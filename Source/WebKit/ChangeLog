2022-03-01  Said Abou-Hallawa  <said@apple.com>

        [macOS][REGRESSION] (rr289518): Form controls are scaled twice on Retina display
        https://bugs.webkit.org/show_bug.cgi?id=237128
        rdar://89064642

        Reviewed by Darin Adler.

        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::createImageBuffer const):
        (WebKit::RemoteDisplayListRecorderProxy::createAlignedImageBuffer const):
        (WebKit::RemoteDisplayListRecorderProxy::createCompatibleImageBuffer const): Deleted.
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-03-01  Eric Carlson  <eric.carlson@apple.com>

        [Cocoa] HLS stream currentTime sometimes jumps backwards
        https://bugs.webkit.org/show_bug.cgi?id=235087
        rdar://83831093

        Reviewed by Dean Jackson.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::currentTimeChanged): Always notify player when
        time jumps backwards.

2022-03-01  Sihui Liu  <sihui_liu@apple.com>

        Move StorageBucket function definitions outside the class definition
        https://bugs.webkit.org/show_bug.cgi?id=237300

        Reviewed by Chris Dumez.

        * NetworkProcess/storage/NetworkStorageManager.h:
        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::mode const):
        (WebKit::OriginStorageManager::StorageBucket::setMode):
        (WebKit::OriginStorageManager::StorageBucket::StorageBucket):
        (WebKit::OriginStorageManager::StorageBucket::connectionClosed):
        (WebKit::OriginStorageManager::StorageBucket::toStorageIdentifier const):
        (WebKit::OriginStorageManager::StorageBucket::typeStoragePath const):
        (WebKit::OriginStorageManager::StorageBucket::fileSystemStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::localStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingLocalStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::sessionStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingSessionStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::idbStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingIDBStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::isActive const):
        (WebKit::OriginStorageManager::StorageBucket::isEmpty):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromMemory):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromDisk):
        (WebKit::OriginStorageManager::StorageBucket::deleteData):
        (WebKit::OriginStorageManager::StorageBucket::deleteFileSystemStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteLocalStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteSessionStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteIDBStorageData):
        (WebKit::OriginStorageManager::StorageBucket::moveData):
        (WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::toWebsiteDataType): Deleted.
        (WebKit::OriginStorageManager::StorageBucket::toStorageIdentifier): Deleted.

2022-03-01  Alex Christensen  <achristensen@webkit.org>

        If the main resource was loaded over private relay, load all sub resources over private relay
        https://bugs.webkit.org/show_bug.cgi?id=237296

        Reviewed by Geoffrey Garen.

        I manually verified that this fixes rdar://88965550 when using the CFNetwork change in the related bug.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::createSocketChannel):
        * NetworkProcess/NetworkConnectionToWebProcess.h:
        * NetworkProcess/NetworkConnectionToWebProcess.messages.in:
        * NetworkProcess/NetworkResourceLoader.cpp:
        (WebKit::NetworkResourceLoader::transferToNewWebProcess):
        (WebKit::NetworkResourceLoader::didRetrieveCacheEntry):
        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::createWebSocketTask):
        * NetworkProcess/NetworkSession.h:
        * NetworkProcess/NetworkSocketChannel.cpp:
        (WebKit::NetworkSocketChannel::create):
        (WebKit::NetworkSocketChannel::NetworkSocketChannel):
        * NetworkProcess/NetworkSocketChannel.h:
        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):
        (WebKit::NetworkSessionCocoa::createWebSocketTask):
        * WebProcess/Network/WebLoaderStrategy.cpp:
        (WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess):
        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::connect):

2022-03-01  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Allow logging to be configured by NSDefaults (without regressing launch time)
        https://bugs.webkit.org/show_bug.cgi?id=237183

        Reviewed by Darin Adler.

        In r220780, code was added to WebProcessPoolCocoa to explicitly pass the results of a NSUserDefaults
        to newly created WebContent processes to determine log channel levels. Later, in r232158, NSUserDefaults
        were removed from the default logLevelString() implementations in WTF, WebCore, and WebKit to improve
        process launch time performance. In r279796, the same technique sued in WebProcessPoolCocoa was added
        to GPUProcessProxyCocoa to pass those log level strings to the GPUProcess. And then in r286484, all the
        uses of NSUserDefaults were removed from WebProcessPoolCocoa and GPUProcessProxyCocoa were removed,
        removing the ability to increase the log channel levels at runtime through NSUserDefualts.

        Add back in the ability to define log levels for the UIProcess and all AuxiliaryProcesses without
        regressing launch time by only checking the NSUserDefault once, only in the UIProcess, storing the result
        in a static variable, and passing the results of that check to all AuxiliaryProcesses at creation time.

        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters):
        * UIProcess/Cocoa/UIProcessLogInitializationCocoa.mm: Added.
        (WebKit::UIProcess::wtfLogLevelString):
        (WebKit::UIProcess::webCoreLogLevelString):
        (WebKit::UIProcess::webKitLogLevelString):
        * UIProcess/UIProcessLogInitialization.cpp: Added.
        (WebKit::UIProcess::initializeLoggingIfNecessary):
        (WebKit::UIProcess::wtfLogLevelString):
        (WebKit::UIProcess::webCoreLogLevelString):
        (WebKit::UIProcess::webKitLogLevelString):
        * UIProcess/UIProcessLogInitialization.h: Added.
        * UIProcess/WebProcessPool.cpp:

2022-03-01  Youenn Fablet  <youenn@apple.com>

        Annotate LibWebRTC with thread safety macros
        https://bugs.webkit.org/show_bug.cgi?id=237321

        Reviewed by Eric Carlson.

        LibWebRTCCodecs works with 3 threads and we add macros to make it clear where each thread is used:
        - the main thread to get its GPU process connection (isMainRunLoop()).
        - the libwebrtc thread where it gets orders to decode/encode frames (!isMainRunLoop())
        - the work queue thread where it is receiving encode/decode results (assertIsCurrent(workQueue())).

        Rename m_encodersLock to m_encodersConnectionLock to make it clear this is about locking the encoder connection and not the encoder map.
        Both decoder and encoder maps should only be touched on the workQueue thread.

        Introduce encoderConnection/setEncoderConnection and decoderConnection/setDecoderConnection routines.
        These methods are guarded by corresponding locks.
        This requires adding some additional locks when accessing connections in workQueue thread.
        Fix a potential issue when creating the encoder: we lock the encoderConnection lock earlier when setting the connection.

        Covered by existing tests.

        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::gpuProcessConnectionMayNoLongerBeNeeded):
        (WebKit::LibWebRTCCodecs::createDecoder):
        (WebKit::LibWebRTCCodecs::releaseDecoder):
        (WebKit::LibWebRTCCodecs::decodeFrame):
        (WebKit::LibWebRTCCodecs::registerDecodeFrameCallback):
        (WebKit::LibWebRTCCodecs::failedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        (WebKit::LibWebRTCCodecs::createEncoder):
        (WebKit::LibWebRTCCodecs::releaseEncoder):
        (WebKit::LibWebRTCCodecs::initializeEncoder):
        (WebKit::LibWebRTCCodecs::copySharedVideoFrame):
        (WebKit::LibWebRTCCodecs::encodeFrame):
        (WebKit::LibWebRTCCodecs::registerEncodeFrameCallback):
        (WebKit::LibWebRTCCodecs::setEncodeRates):
        (WebKit::LibWebRTCCodecs::completedEncoding):
        (WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose):
        (WebKit::LibWebRTCCodecs::encoderConnection):
        (WebKit::LibWebRTCCodecs::setEncoderConnection):
        (WebKit::LibWebRTCCodecs::decoderConnection):
        (WebKit::LibWebRTCCodecs::setDecoderConnection):
        (WebKit::copySharedVideoFrame): Deleted.
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        (WebKit::LibWebRTCCodecs::workQueue const):

2022-03-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        focus({preventScroll: true}) does not prevent scrolling on iOS
        https://bugs.webkit.org/show_bug.cgi?id=236584
        rdar://88911184

        Reviewed by Simon Fraser.

        Add support for `preventScroll` on iOS by avoiding UI-side zooming/scrolling to reveal the focused element if it
        was focused with `preventScroll: true`. See below for more details.

        Tests: fast/forms/select-focus-prevent-scroll.html
               fast/forms/text-field-focus-prevent-scroll.html

        * Shared/FocusedElementInformation.cpp:
        (WebKit::FocusedElementInformation::encode const):
        (WebKit::FocusedElementInformation::decode):
        * Shared/FocusedElementInformation.h:

        Add a boolean flag to `FocusedElementInformation` to indicate whether or not scrolling to reveal the focused
        element should be prevented.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _zoomToRevealFocusedElement]):

        Only zoom to reveal the focused element if the focused element information's `preventScroll` flag is `NO`.

        (-[WKContentView _elementDidBlur]):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::elementDidFocus):
        (WebKit::WebChromeClient::elementDidRefocus):
        * WebProcess/WebCoreSupport/WebChromeClient.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::elementDidRefocus):
        (WebKit::WebPage::elementDidFocus):

        Use `FocusOptions` to set the `preventScroll` flag when propagating `FocusedElementInformation`.

        * WebProcess/WebPage/WebPage.h:

2022-03-01  Kimmo Kinnunen  <kkinnunen@apple.com>

        WebGL GPUP OpenGL context is not used even if WebGL via Metal is deselected
        https://bugs.webkit.org/show_bug.cgi?id=236505

        Reviewed by Myles C. Maxfield.

        * Shared/WebCoreArgumentCoders.cpp:
        * Shared/WebCoreArgumentCoders.h:

2022-03-01  Kimmo Kinnunen  <kkinnunen@apple.com>

        GraphicsContextGL related includes are inconsistent, slowing the build
        https://bugs.webkit.org/show_bug.cgi?id=237270

        Reviewed by Alexey Proskuryakov.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:

2022-03-01  Sihui Liu  <sihui_liu@apple.com>

        Migrate third-party IndexedDB data to GeneralStorageDirectory
        https://bugs.webkit.org/show_bug.cgi?id=237283

        Reviewed by Chris Dumez.

        In current storage layout, third-party IndexedDB data is stored in a subdirectory of top origin directory, e.g.
        [IndexedDBDirectory]/[TopOrigin]/[ThirdPartyOrigin]/[Database]. First-party data is stored in the top origin
        directory, e.g. [IndexedDBDirectory]/[TopOrigin]/[Database]. Our current migration code directly renames the 
        origin directory without checking whether it has subdirectory that is a third-party directory. That means, 
        [IndexedDBDirectory]/[TopOrigin]/ is moved to [GeneralStorageDirectory]/[TopOrigin]/[TopOrigin]/[IndexedDB]/, 
        and [IndexedDBDirectory]/[TopOrigin]/[ThirdPartyOrigin]/ is moved to 
        [GeneralStorageDirectory]/[TopOrigin]/[TopOrigin]/[IndexedDB]/[ThirdPartyOrigin] ([ThirdPartyOrigin]/ here is
        treated as a database directory). This is wrong: the new third-party directory should actually be 
        [GeneralStorageDirectory]/[TopOrigin]/[ThirdPartyOrigin]/[IndexedDB]/.

        To fix this, we now make sure only first-party data is migrated when first-party IndexedDB database is visited,
        by moving only database directories under origin directory.

        Test: IndexedDB.MigrateThirdPartyDataToGeneralStorageDirectory

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::migrateOriginDataImpl):
        (WebKit::IDBStorageManager::idbStorageOriginDirectory):
        (WebKit::IDBStorageManager::migrateOriginData):
        (WebKit::migrateOriginData): Deleted.
        * NetworkProcess/storage/IDBStorageManager.h:
        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath):

2022-02-28  Chris Dumez  <cdumez@apple.com>

        [IPC] Do more hardening in WebSWServerConnection's client registration / unregistration
        https://bugs.webkit.org/show_bug.cgi?id=237290
        <rdar://88903506>

        Reviewed by Alex Christensen.

        Validate client identifiers sent by the WebContent process via IPC to make sure that the
        process identifier of the client actually matches the process identifier of the process
        we're connected to.

        Also validate the SecurityOriginData to make sure it is not empty. We support sending
        empty SecurityOriginData objects over IPC. However, they cannot be used as keys in
        HashMaps.

        If validation fails, we assume the WebContent process is compromised and we terminate it.

        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        (WebKit::WebSWServerConnection::registerServiceWorkerClient):
        (WebKit::WebSWServerConnection::unregisterServiceWorkerClient):

2022-02-28  Alex Christensen  <achristensen@webkit.org>

        Fix use-after-move bug in NetworkResourceLoader
        https://bugs.webkit.org/show_bug.cgi?id=237294

        Reviewed by Chris Dumez.

        Luckily, they were just two booleans, and after you call std::move on a bool you get
        technically undefined behavior.  Luckily, in practice the bool value is unchanged.
        We don't need to rely on that, though.  Let's read from the location with defined behavior.

        * NetworkProcess/NetworkResourceLoader.cpp:

2022-02-28  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290470): CDMInstanceSession::setLogIdentifier must be guarded with !RELEASE_LOG_DISABLED
        https://bugs.webkit.org/show_bug.cgi?id=237302

        Unreviewed build fix.

        * GPUProcess/media/RemoteCDMInstanceSessionProxy.cpp:
        (WebKit::RemoteCDMInstanceSessionProxy::setLogIdentifier):

2022-02-28  Sihui Liu  <sihui_liu@apple.com>

        [macOS] TestWebKitAPI.WebKit.MigrateLocalStorageDataToGeneralStorageDirectory is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=237065
        <rdar://problem/89324250>

        Reviewed by Darin Adler.

        Revert r290544 as it does not fully fix the flaky test. The flakiness is caused by network process exiting
        before transactions of SQLiteStorageArea are committed. In NetworkProcess::destroySession, we schedule a 
        background task to commit transactions in the session, and remove session. In NetworkProcess::didClose, for 
        existing sessions, we schedule tasks to commit transaction and wait until the tasks are finished before exiting 
        network process. That means for a session, when NetworkProcess::destroySession is called before 
        NetworkProcess::didClose, process may exit before commit task (scheduled by NetworkProcess::destroySession) is
        finished (NetworkProcess::didClose does not wait because session is already removed). 

        To solve this issue, let NetworkProcess::didClose check existing NetworkStorageManagers, instead of 
        NetworkSessions. NetworkStorageManager can outlive NetworkSession when it's finishing cleanup task
        (including committing transactions) on its background thread; we want to ensure process exits after the cleanup
        task is done.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::didClose):
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::allNetworkStorageManagers):
        (WebKit::NetworkStorageManager::forEach):
        (WebKit::NetworkStorageManager::NetworkStorageManager):
        (WebKit::NetworkStorageManager::~NetworkStorageManager):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        (WebKit::SQLiteStorageArea::startTransactionIfNecessary):
        (WebKit::SQLiteStorageArea::commitTransactionIfNecessary):
        (WebKit::commitTransactionsAtExit): Deleted.

2022-02-28  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Adopt -streamDataParser:didProvideContentKeySpecifier:forTrackID: delegate callback
        https://bugs.webkit.org/show_bug.cgi?id=236109
        <rdar://problem/88785844>

        Reviewed by Eric Carlson.

        Pass the new RuntimeEnabledFeature through to the GPU process.

        * GPUProcess/GPUProcess.cpp:
        (WebKit::GPUProcess::setSampleBufferContentKeySessionSupportEnabled):
        * GPUProcess/GPUProcess.h:
        * GPUProcess/GPUProcess.messages.in:
        * GPUProcess/GPUProcessCreationParameters.cpp:
        (WebKit::GPUProcessCreationParameters::encode const):
        (WebKit::GPUProcessCreationParameters::decode):
        * GPUProcess/GPUProcessCreationParameters.h:
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::updatePreferences):
        * UIProcess/GPU/GPUProcessProxy.h:

2022-02-28  Chris Dumez  <cdumez@apple.com>

        Adopt the modern Hasher more widely
        https://bugs.webkit.org/show_bug.cgi?id=237262

        Reviewed by Sam Weinig.

        * NetworkProcess/cache/NetworkCache.h:
        (WebKit::NetworkCache::add):
        (WTF::GlobalFrameIDHash::hash):
        (WebKit::NetworkCache::GlobalFrameID::hash const): Deleted.
        * Platform/IPC/StringReference.cpp:
        (IPC::StringReference::Hash::hash):
        * Platform/IPC/StringReference.h:
        (IPC::add):

2022-02-28  Alex Christensen  <achristensen@webkit.org>

        Fix typo in adattributiond sandbox
        https://bugs.webkit.org/show_bug.cgi?id=237279

        Reviewed by Chris Dumez.

        After this change, it matches the value in com.apple.webkit.adattributiond.plist

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:

2022-02-28  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290588): Broke WinCairo and PlayStation debug builds
        https://bugs.webkit.org/show_bug.cgi?id=237277

        Unreviewed build fix.

        * Scripts/webkit/messages.py:
        (conditions_for_header):

2022-02-28  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r290588) Missing symbol jsValueForDecodedMessage<107> (IPCStreamTesterProxy_WasCreated)
        https://bugs.webkit.org/show_bug.cgi?id=237268

        Reviewed by Antti Koivisto.

        Add the class IPCStreamTesterProxy now that *MessageReceiver.cpp
        are needed. After commit
        "IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to compile"
        MessageReceiver.cpp files contain also message-specific functions that
        need to be compiled, even though IPCStreamTesterProxy itself is not
        used.

        * Shared/IPCStreamTesterProxy.h: Added.
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:

2022-02-28  Youenn Fablet  <youenn@apple.com>

        RemoteVideoFrameObjectHeap should process its IPC messages in a background thread
        https://bugs.webkit.org/show_bug.cgi?id=237198

        Reviewed by Darin Adler.

        Minor refactoring to have addWorkQueueMessageReceiver take a reference instead of a pointer.
        Make RemoteVideoFrameObjectHeap become a WorkQueueMessageReceiver.
        This ensures that a main thread hang in GPUProcess will not block big memory releases or WebProcess access to pixel buffers.

        No observable change of behavior.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::didClose):
        (WebKit::GPUConnectionToWebProcess::videoFrameObjectHeap const):
        * GPUProcess/GPUConnectionToWebProcess.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::remoteVideoFrameObjectHeapQueue):
        (WebKit::RemoteVideoFrameObjectHeap::create):
        (WebKit::RemoteVideoFrameObjectHeap::RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::close):
        (WebKit::RemoteVideoFrameObjectHeap::releaseVideoFrame):
        (WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer):
        (WebKit::RemoteVideoFrameObjectHeap::pixelBuffer):
        (WebKit::RemoteVideoFrameObjectHeap::stopListeningForIPC): Deleted.
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * NetworkProcess/IndexedDB/WebIDBServer.cpp:
        (WebKit::WebIDBServer::addConnection):
        * NetworkProcess/WebStorage/StorageManagerSet.cpp:
        (WebKit::StorageManagerSet::addConnection):
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::startReceivingMessageFromConnection):
        * NetworkProcess/webrtc/RTCDataChannelRemoteManagerProxy.cpp:
        (WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess):
        * Platform/IPC/Connection.cpp:
        (IPC::Connection::addWorkQueueMessageReceiver):
        * Platform/IPC/Connection.h:
        * UIProcess/mac/SecItemShimProxy.cpp:
        (WebKit::SecItemShimProxy::initializeConnection):
        * WebProcess/GPU/media/RemoteAudioSourceProviderManager.cpp:
        (WebKit::RemoteAudioSourceProviderManager::setConnection):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor):
        * WebProcess/Inspector/WebInspectorInterruptDispatcher.cpp:
        (WebKit::WebInspectorInterruptDispatcher::initializeConnection):
        * WebProcess/Network/webrtc/RTCDataChannelRemoteManager.cpp:
        (WebKit::RTCDataChannelRemoteManager::setConnection):
        * WebProcess/WebPage/EventDispatcher.cpp:
        (WebKit::EventDispatcher::initializeConnection):
        * WebProcess/WebPage/ViewUpdateDispatcher.cpp:
        (WebKit::ViewUpdateDispatcher::initializeConnection):

2022-02-28  Youenn Fablet  <youenn@apple.com>

        Ensure RemoteMediaPlayerProxy sets its resource owner to pixel buffers created by its player
        https://bugs.webkit.org/show_bug.cgi?id=237200

        Reviewed by Eric Carlson.

        Set resource owner to the player private.

        * GPUProcess/media/RemoteMediaPlayerManagerProxy.cpp:
        (WebKit::RemoteMediaPlayerManagerProxy::createMediaPlayer):
        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::RemoteMediaPlayerProxy):
        * GPUProcess/media/RemoteMediaPlayerProxy.h:

2022-02-28  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to compile
        https://bugs.webkit.org/show_bug.cgi?id=237195

        Reviewed by Antti Koivisto.

        IPC testing API needs convert message data buffer, IPC::Decoder, to
        JSValue. This is a run-time operation.
        IPC message decoding is based on templates, a compile time operation.
        IPC generator generates MessageArgumentDescriptions.cpp with
        a big switch. The switch has a case for each message name. The case would
        call templated jsValueForDecodedArguments<Arguments>, where the Arguments
        is the type tuple for the message arguments.

        The above would mean that MessageArgumentDescriptions would need to
        include all the headers for all the messages in WebKit in order
        to populate the Arguments tuple for particular message.
        This would cause MessageArgumentDescriptions to be slow to compile because
        it would need all the headers in Source/WebKit related to message parameter types.

        This would show up as slow compiles that would consume much memory (5-6gb) and do a
        lot of work.

        It would also have to compile the MessageArgumentDescriptions each time
        any of the headers were touched.

        Change this so that the big switch calls a declared but not defined
        template jsValueForDecodedMessage<MessageName> for each MessageName case in the
        switch.

        Instantiate the template for each message in the *MessageReceiver.cpp file
        that each message receiver has. This file already has to include all the
        headers used for that particular message receiver. These files are small and compile
        fast.

        After this change MessageArgumentDescriptions.cpp only includes the message
        definition headers, does not use much more than the standard 1gb+ of memory
        while compiling and is relatively fast to compile. Also if any of the dependent
        headers are touched, only the corresponding small *MessageReceiver.cpp files are compiled.

        This change is needed for further improve the JS testing API implementation.
        Adding new operations that employ the same strategy, eg. switch and a complex
        template instantiation, would possibly just make the matter worse. New operations
        that are needed are message sends, which use templates similarly to the message
        decode case that is implement here.

        This change regenerates the checked-in test content that can be used to review
        what kind of changes the real MessageArgumentDescriptions.cpp and MessageReceiver.cpps
        get.

        * Platform/IPC/JSIPCBinding.h:
        * Scripts/webkit/messages.py:
        (generate_message_handler):
        (generate_js_value_conversion_function):
        (generate_message_argument_description_implementation):
        * Scripts/webkit/tests/MessageArgumentDescriptions.cpp:
        (IPC::jsValueForArguments):
        (IPC::jsValueForReplyArguments):
        * Scripts/webkit/tests/TestWithCVPixelBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_SendCVPixelBuffer>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_ReceiveCVPixelBuffer>):
        * Scripts/webkit/tests/TestWithIfMessageMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithIfMessage_LoadURL>):
        * Scripts/webkit/tests/TestWithImageDataMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_SendImageData>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_ReceiveImageData>):
        * Scripts/webkit/tests/TestWithLegacyReceiverMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_ExperimentalOperation>):
        * Scripts/webkit/tests/TestWithSemaphoreMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_SendSemaphore>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_ReceiveSemaphore>):
        * Scripts/webkit/tests/TestWithStreamBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStreamBuffer_SendStreamBuffer>):
        * Scripts/webkit/tests/TestWithStreamMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendString>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendStringSynchronized>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_ReceiveMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendAndReceiveMachSendRight>):
        * Scripts/webkit/tests/TestWithSuperclassMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        * Scripts/webkit/tests/TestWithoutAttributesMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_ExperimentalOperation>):

2022-02-27  Sihui Liu  <sihui_liu@apple.com>

        Add a feature flag for using general storage directory
        https://bugs.webkit.org/show_bug.cgi?id=237186
        rdar://89521373

        Reviewed by Chris Dumez.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):
        * UIProcess/WebsiteData/WebsiteDataStore.h:
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.cpp:
        (WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration):
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.h:

2022-02-27  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Deleted unneeded constructors from DisplayList::Recorder classes
        https://bugs.webkit.org/show_bug.cgi?id=237261

        Reviewed by Wenson Hsieh.

        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-02-27  Wenson Hsieh  <wenson_hsieh@apple.com>

        Invoking "Markup Image" should preserve the existing selection range
        https://bugs.webkit.org/show_bug.cgi?id=237242

        Reviewed by Darin Adler.

        Make a few adjustments to `replaceWithPasteboardData`, such that it attempts to restore the previous selection
        range after replacing the target element. If the previous selection is no longer valid (i.e., it was orphaned as
        a result of the editing command used to replace the element), then we fall back to restoring the visible
        character range of the previous selection, relative to the editable root (or the body if there is none).

        API tests will be added in https://webkit.org/b/236519, once we're able to swizzle out the underlying VisionKit
        methods in order to make these tests run reliably.

        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement):
        (WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement):

        Add a helper RAII object that encapsulates logic for setting and unsetting data on the override pasteboard. Use
        this in the two methods below.

        (WebKit::WebPage::replaceWithPasteboardData):

        Switch to using the refactored `Editor::replaceNodeFromPasteboard` method instead of calling to the adjacent
        `replaceSelectionWithPasteboardData` method below. Using this method allows us to avoid manually selecting the
        target element here, and also avoids smart pasteboard replacement (which may insert spaces before or after the
        image); the latter is important in order to correctly restore the previous selection's character range in the
        case where the previous selection range was orphaned by the replacement.

        (WebKit::WebPage::replaceSelectionWithPasteboardData):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Omit template parameter for SetForScope<> variables
        https://bugs.webkit.org/show_bug.cgi?id=237258

        Reviewed by Darin Adler.

        * NetworkProcess/storage/QuotaManager.cpp:
        (WebKit::QuotaManager::handleRequests):
        * Shared/API/Cocoa/WKRemoteObjectCoder.mm:
        (createEncodedObject):
        (decodeObject):
        * UIProcess/API/glib/InputMethodFilter.cpp:
        (WebKit::InputMethodFilter::filterKeyEvent):
        * UIProcess/API/glib/WebKitWebView.cpp:
        (WebKitWebViewClient::frameDisplayed):
        * UIProcess/API/gtk/InputMethodFilterGtk.cpp:
        (WebKit::InputMethodFilter::filterKeyEvent):
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _keyboardChangedWithInfo:adjustScrollView:]):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::updateTextTouchBar):
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::open):
        (WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow):
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.mm:
        (WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren):
        * UIProcess/_WKWebViewPrintFormatter.mm:
        (-[_WKWebViewPrintFormatter _setSnapshotPaperRect:]):
        * UIProcess/gtk/ClipboardGtk3.cpp:
        (WebKit::Clipboard::write):
        * UIProcess/gtk/WebDateTimePickerGtk.cpp:
        (WebKit::WebDateTimePickerGtk::update):
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView becomeFirstResponderForWebView]):
        (-[WKContentView resignFirstResponderForWebView]):
        (-[WKContentView unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded]):
        (-[WKContentView _elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:]):
        (-[WKContentView _elementDidBlur]):
        * UIProcess/ios/forms/WKDateTimeInputControl.mm:
        (-[WKDateTimePicker handleDatePickerPresentationDismissal]):
        (-[WKDateTimePicker removeDatePickerPresentation]):
        * WebProcess/Plugins/Plugin.cpp:
        (WebKit::Plugin::destroyPlugin):
        * WebProcess/WebPage/CoordinatedGraphics/CompositingCoordinator.cpp:
        (WebKit::CompositingCoordinator::flushPendingLayerChanges):
        (WebKit::CompositingCoordinator::purgeBackingStores):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeDrawingArea.mm:
        (WebKit::RemoteLayerTreeDrawingArea::updateRendering):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::stopLoadingDueToProcessSwap):
        (WebKit::WebPage::mouseEvent):
        (WebKit::WebPage::keyEvent):
        (WebKit::WebPage::restoreSessionInternal):
        (WebKit::WebPage::dispatchTouchEvent):
        (WebKit::WebPage::setInitialFocus):
        (WebKit::WebPage::setActivityState):
        (WebKit::WebPage::insertTextAsync):
        (WebKit::WebPage::createAppHighlightInSelectedRange):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::completeSyntheticClick):
        (WebKit::WebPage::requestDragStart):
        (WebKit::WebPage::requestAdditionalItemsForDragSession):
        (WebKit::WebPage::selectPositionAtPoint):
        (WebKit::WebPage::dynamicViewportSizeUpdate):
        (WebKit::WebPage::focusTextInputContextAndPlaceCaret):
        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::updateRendering):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::prepareToSuspend):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Simplify SerializedScriptValue construction
        https://bugs.webkit.org/show_bug.cgi?id=237241

        Reviewed by Darin Adler.

        Update code base to reflect SerializedScriptValue API changes.

        * Shared/API/APISerializedScriptValue.h:
        (API::SerializedScriptValue::createFromWireBytes):
        (API::SerializedScriptValue::dataReference const):
        (API::SerializedScriptValue::adopt): Deleted.
        * Shared/SessionState.cpp:
        (WebKit::PageState::encode const):
        * Shared/UserData.cpp:
        (WebKit::UserData::decode):
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _evaluateJavaScript:asAsyncFunction:withSourceURL:withArguments:forceUserGesture:inFrame:inWorld:completionHandler:]):
        * UIProcess/Inspector/WebInspectorUIExtensionControllerProxy.cpp:
        (WebKit::WebInspectorUIExtensionControllerProxy::evaluateScriptForExtension):
        (WebKit::WebInspectorUIExtensionControllerProxy::evaluateScriptInExtensionTab):
        * UIProcess/UserContent/WebUserContentControllerProxy.cpp:
        (WebKit::WebUserContentControllerProxy::didPostMessage):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld):
        * WebProcess/Inspector/WebInspectorUIExtensionController.cpp:
        (WebKit::WebInspectorUIExtensionController::evaluateScriptForExtension):
        (WebKit::WebInspectorUIExtensionController::evaluateScriptInExtensionTab):
        * WebProcess/UserContent/WebUserContentController.cpp:
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFrameState):
        (WebKit::applyFrameState):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::runJavaScript):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Call WKNavigationDelegate.didFailProvisionalNavigation even after a cross-origin navigation with COOP
        https://bugs.webkit.org/show_bug.cgi?id=237071
        <rdar://problem/89354367>

        Reviewed by Darin Adler.

        When doing a process swap on navigation (PSON), we start a new provisional load in the new provisional
        process and ask the committed process to stop all loads. Since we swap in decidePolicyForNavigationAction,
        no provisional load has started in the committed process yet. If the provisional process sends us a
        didFailProvisionalLoad though, we know the provisional load has failed and we take this into consideration
        and notify the client app.

        When doing a process swap on resource response (due to COOP), we were behaving differently and it was
        causing some confusion. Since we swap on resource response, the provisional load has started in the
        committed process by the time we process-swap (unlike PSON). We were also not asking for the committed
        process to stop/cancel this provisional load. As a result, a provisional load would still be going on
        in the committed process while another provisional load starts happening in the provisional page / process.
        Then, if the provisional process would send us a didFailProvisional, we would not pass it along to the
        client app. Instead we would destroy the ProvisionalPageProxy, which would tell the committed process to
        stop loading and send its own didFailProvisionalLoad, and the client app would eventually get notified.

        Even though the difference in behavior was confusing, it was working in most cases. There was however
        an edge case where it didn't work and we would fail to tell the client app that the provisional load
        had failed. In particular, we would run into trouble when navigating cross-site to a site that adopted
        the COOP header. We would first do a process-swap on navigation, stop the provisional load in the committed
        process A, then start a provisional load in process B. We would then get the COOP header and we would
        start a new provisional load in process C. Process B would go away since we cannot have 2 provisional
        pages / processes at the same time for the same WebPageProxy. Then if the provisional load fails in
        process C, we would ignore the didFailProvisionalLoad from process C and destroy the provisional page.
        We would tell the committed process A to stop loading, expecting it to send its own didFailProvisionalLoad
        but it wouldn't happen since PSON had already stopped all loading in process A earlier when swapping to
        process B.

        To address the issue, we align COOP process swap with PSON process swap. We now has the committed process
        to stop all loads when process swapping on resource response due to COOP. As a result, when the provisional
        load fails in the provisional process, we can simply pass it along to the client, no matter if the process
        swap occurred due to PSON or COOP.

        Covered by new API test.

        * UIProcess/ProvisionalPageProxy.cpp:
        (WebKit::ProvisionalPageProxy::~ProvisionalPageProxy):
        We no longer need to tell the committed process to stop loading when the provisional page gets destroyed
        and this was a process swap on resource response. The reason is that when process-swapping on navigation
        response, we now drop the provisional load in the committed process right away, like in the PSON case.

        (WebKit::ProvisionalPageProxy::cancel):
        When cancelling a provisional load due to PSON or COOP, we need to notify the client that the provisional
        load failed. We used to only to it in the PSON case. We now do it for both PSON and COOP since they
        behave the same.

        (WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame):
        Similarly as above, now that PSON and COOP behave the same, we need to pass the didFailProvisionalLoad
        from the provisional process to the client app for both PSON and COOP (Not just PSON).

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation):
        When triggering a process swap on resource response (due to COOP), we now stop the provisional load going
        on in the committed process to be consistent with what we do in the PSON case. This way there is only a
        single provisional load going on and it is happening in the provisional page / process.


2022-02-27  Youenn Fablet  <youenn@apple.com>

        Exposing RemoteVideoFrameProxy::write is unneeded
        https://bugs.webkit.org/show_bug.cgi?id=237212

        Reviewed by Eric Carlson.

        Exposing RemoteVideoFrameProxy::write is unneeded as RemoteVideoFrameProxy is immutable.
        It is best to remove it as calling write() inadvertently would break things.
        Renaming read() to newReadReference() to make it clear that we are creating a new read reference
        that needs to be sent to GPUProcess to prevent leaks.
        No change of behavior.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia):
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        (WebKit::RemoteVideoFrameProxy::~RemoteVideoFrameProxy):
        (WebKit::RemoteVideoFrameProxy::newReadReference const):
        (WebKit::RemoteVideoFrameProxy::pixelBuffer const):
        (WebKit::RemoteVideoFrameProxy::write const): Deleted.
        (WebKit::RemoteVideoFrameProxy::read const): Deleted.
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::encodeFrame):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getVideoFrameBuffer):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameWriter::write):

2022-02-26  Kimmo Kinnunen  <kkinnunen@apple.com>

        RemoteCaptureSampleManager, UserMediaSampleCaptureManagerProxy create the RemoteVideoFrame in incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=237134

        Reviewed by Youenn Fablet.

        UserMediaSampleCaptureManagerProxy should not call RemoteVideoFrameObjectHeap::createVideoFrame,
        the function should be removed. Instead, UserMediaSampleCaptureManagerProxy should construct a
        write reference to insert the media sample -> remote proxy mapping. Then
        the result of the insert, a new reference, should be sent as part of the
        RemoteVideoFrameProxy::Properties to the WP. This way the sent reference is
        constructed as expected. Previously the reference was correct but matched just
        by selecting the constants currently used (0).

        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailable):
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailableCV):
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:

2022-02-26  Chris Dumez  <cdumez@apple.com>

        Drop Ref<>'s operator==() as it is a bit ambiguous / confusing
        https://bugs.webkit.org/show_bug.cgi?id=237231

        Reviewed by Darin Adler.

        Drop Ref<>'s operator==() as it is a bit ambiguous / confusing. Some people expect it to compare
        pointers while other expect it to compare the values we hold references to.
        It seems best to omit this operator and be explicit at call sites.

        * UIProcess/Cocoa/WebProcessProxyCocoa.mm:
        (WebKit::WebProcessProxy::cacheMediaMIMETypes):
        * UIProcess/VisitedLinkStore.cpp:
        (WebKit::VisitedLinkStore::removeAll):
        (WebKit::VisitedLinkStore::sendStoreHandleToProcess):
        (WebKit::VisitedLinkStore::didUpdateSharedStringHashes):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::shouldTerminate):

2022-02-26  Kimmo Kinnunen  <kkinnunen@apple.com>

        Multiple concurrency violations in LibWebRTCCodecsProxy
        https://bugs.webkit.org/show_bug.cgi?id=236767
        <rdar://88904160>

        Reviewed by Antti Koivisto.

        - ThreadMessageReceivers should not add IPC listeners in constructors,
        as the delivery starts right away and uses the unconstructed virtual pointer.
        - The work queue functions should not use GPUConnectionToWebProcess, as that is
        main thread object.
        - Locked m_encoders, m_decoders are sometimes accessed without lock.

        Instead:
        - Add the IPC listeners in initialize function.
        - Remove the IPC listeners when GPUConnectionToWebProcess disconnects.
        - Store the thread-safe conection, video frame object heap, process identity
        objects as member variables.
        - Do not lock m_encoders, m_decoders. If they are work queue instances,
        just access them in the work queue functions. Add thread requirements
        to the variables so that the compiler checks the access.
        - Use IPC testing assertions when skipping incorrect messages.
        - Use separate atomic counter (bool) to check if allowsExitUnderMemoryPressure.

        No new tests, tested with existing tests and ASAN.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess):
        (WebKit::GPUConnectionToWebProcess::didClose):
        * GPUProcess/GPUConnectionToWebProcess.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::LibWebRTCCodecsProxy::create):
        (WebKit::LibWebRTCCodecsProxy::LibWebRTCCodecsProxy):
        (WebKit::LibWebRTCCodecsProxy::stopListeningForIPC):
        (WebKit::LibWebRTCCodecsProxy::initialize):
        (WebKit::LibWebRTCCodecsProxy::dispatchToThread):
        (WebKit::LibWebRTCCodecsProxy::createDecoderCallback):
        (WebKit::LibWebRTCCodecsProxy::createH264Decoder):
        (WebKit::LibWebRTCCodecsProxy::createH265Decoder):
        (WebKit::LibWebRTCCodecsProxy::createVP9Decoder):
        (WebKit::LibWebRTCCodecsProxy::releaseDecoder):
        (WebKit::LibWebRTCCodecsProxy::createEncoder):
        (WebKit::LibWebRTCCodecsProxy::releaseEncoder):
        (WebKit::LibWebRTCCodecsProxy::initializeEncoder):
        (WebKit::LibWebRTCCodecsProxy::findEncoder):
        (WebKit::LibWebRTCCodecsProxy::encodeFrame):
        (WebKit::LibWebRTCCodecsProxy::setEncodeRates):
        (WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameSemaphore):
        (WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameMemory):
        (WebKit::LibWebRTCCodecsProxy::allowsExitUnderMemoryPressure const):

2022-02-25  Sihui Liu  <sihui_liu@apple.com>

        [macOS] TestWebKitAPI.WebKit.MigrateLocalStorageDataToGeneralStorageDirectory is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=237065
        <rdar://problem/89324250>

        Reviewed by Alexey Proskuryakov.

        Commit transactions of SQLiteStorageArea at exit of network process.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::didClose):
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::commitTransactionsAtExit):
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        (WebKit::SQLiteStorageArea::startTransactionIfNecessary):
        (WebKit::SQLiteStorageArea::commitTransactionIfNecessary):

2022-02-25  Wenson Hsieh  <wenson_hsieh@apple.com>

        Adjust -[WKContentView _requiresKeyboardWhenFirstResponder] to account for editable web views
        https://bugs.webkit.org/show_bug.cgi?id=237226
        rdar://89447095

        Reviewed by Aditya Keerthi.

        Adjust the implementation of `-[WKContentView _requiresKeyboardWhenFirstResponder]`, such that it returns YES
        for editable web views, except for the scenario where an input field that does *not* require the automatic
        keyboard is currently focused in the page inside the editable web view (e.g. a `readonly` text field).

        UIKit consults this method to know whether or not a given responder would require the keyboard (either software
        keyboard or the minimized UCB for hardware keyboard) if it were to become the first responder. For web views
        that are made editable in the SPI sense, we know a-priori that this should return YES, unless a readonly element
        underneath the web view has focus (in which case, `_disableAutomaticKeyboardUI` would be true).

        Test: KeyboardInputTests.EditableWebViewRequiresKeyboardWhenFirstResponder

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _requiresKeyboardWhenFirstResponder]):

2022-02-25  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Implement RemoteImageBufferProxy::drawConsuming()
        https://bugs.webkit.org/show_bug.cgi?id=236685
        rdar://89007426

        Reviewed by Simon Fraser.

        RemoteImageBufferProxy::drawConsuming() should call drawImageBuffer() of
        the destination GraphicsContext. No recursion will happen and the expected
        behavior will be achieved by this change. 

        This is the sequence of calls when the Destination GraphicsContext is
        local and when it is remote:

        -- Destination GraphicsContext is local:
           In this case, the backend of the RemoteImageBufferProxy can be mapped
           in WebProcess; i.e. we do have access to its memory.
           ConcreteImageBuffer::draw() will be called eventually. This function
           will call its backend->draw() which will get a NativeImage by calling
           backend->copyNativeImage(). There is no difference between draw() and
           drawConsuming() in this case because the backend is still owned by
           GPUProcess. So it will not be released immediately. We do not copy the
           pixels since we have to pass DontCopyBackingStore to copyNativeImage().

        -- Destination GraphicsContext is remote:
           In this case, Recorder::drawImageBuffer() will be called which will
           call RemoteDisplayListRecorderProxy::recordDrawImageBuffer(). This
           will send a message to GPUProcess and hence all the drawing will 
           happen in GPUProcess. Similar to the case of the local GraphicsContext,
           no pixels will be copied from the RemoteImageBuffer backend to the
           NativeImage in all cases. The assumption is the backend will be destroyed
           automatically after calling drawConsuming().

        * WebProcess/GPU/graphics/RemoteImageBufferProxy.h:

2022-02-25  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Fallback to attestation=none whenever attestation fails
        https://bugs.webkit.org/show_bug.cgi?id=237223
        rdar://88767812

        Reviewed by Brent Fulgham.

        Whenever attestation is requested by a RP and it fails to complete,
        we previously errored out of the registration. The more correct platform
        behavior in this case is to provide attestation=none.

        Created API test for this behavior.

        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::continueMakeCredentialAfterAttested):

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        [macOS] Add access to required mach service in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=237216
        <rdar://89176897>

        Reviewed by Brent Fulgham.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:

2022-02-25  Brent Fulgham  <bfulgham@apple.com>

        WebKit continues to render PDF images in Captive Portal mode
        https://bugs.webkit.org/show_bug.cgi?id=237120
        <rdar://problem/89384234>

        Reviewed by Chris Dumez.

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeWebProcess): Turn PDF image decoding off when in CaptivePortal mode.

2022-02-25  Sihui Liu  <sihui_liu@apple.com>

        Regression(r242729): m_origin in IDBDatabaseIdentifier is incorrect
        https://bugs.webkit.org/show_bug.cgi?id=237044

        Reviewed by Youenn Fablet.

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::migrateOriginData):
        (WebKit::IDBStorageManager::idbStorageOriginDirectory):

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        Make sure there is a default Networking process to provide the Launch Services database
        https://bugs.webkit.org/show_bug.cgi?id=236629

        Reviewed by Brent Fulgham.

        The WebContent processes relies on getting the Launch Services database from the Networking process.
        It is possible to enter a state where there is no default Network process, but a Network process is
        running because a Website data store is holding a reference to it. This patch addresses this issue
        by removing Network process references in all remaining Website data stores when the last process
        pool is being deleted.

        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::~WebProcessPool):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::removeNetworkProcessReference):
        * UIProcess/WebsiteData/WebsiteDataStore.h:

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Better isolate RemoteVideoFrameObjectHeap clients from ThreadSafeObjectHeap implementation details
        https://bugs.webkit.org/show_bug.cgi?id=237191

        Reviewed by Kimmo Kinnunen.

        Refactoring to make RemoteVideoFrameObjectHeap API independent of ThreadSafeObjectHeap.
        This makes code more readable and simplifies client side usage as well,
        for instance by not having to care about timers, or using more known names like add/get instead of retire.

        No change of behavior.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * Shared/ThreadSafeObjectHeap.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        Remove unused soft linking declarations
        https://bugs.webkit.org/show_bug.cgi?id=237209

        Reviewed by Brent Fulgham.

        * WebProcess/cocoa/WebProcessCocoa.mm:

2022-02-25  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r289580): [ iOS macOS ] TestWebKitAPI.IPCTestingAPI.CanReceiveSharedMemory is a constant timeout
        https://bugs.webkit.org/show_bug.cgi?id=236744

        Reviewed by Antti Koivisto.

        Add new tester interface for testing IPC stream features.

        Before, TestWebKitAPI.IPCTestingAPI.CanReceiveSharedMemory would test the feature of
        "can reply stream sync message with shared memory" by using a RemoteRenderingBackend
        message that did so. However, when the RemoteRenderingBackend was changed to use a
        different stategy, this test stopped working without compile failure. The IPC testing
        is currently done at JS level.

        After, the new dedicated testing interface IPCStreamTester has dedicated message for
        testing this feature. The test is moved to LayoutTests/ipc and made so that
        it tests the feature in all currently testable processes WP uses (GPU, Networking, UI).

        IPCTestingAPI is amended to return the all possible testable process names, so
        the .html test can work even when ENABLE(GPU_PROCESS) is toggled.

        The .html test also passes when !ENABLE(IPC_TESTING_API). Currently
        ENABLE_IPC_TESTING_API == (ASAN_ENABLED || !defined(NDEBUG)) && PLATFORM(COCOA)
        E.g. test tests something on Release+ASAN or Debug.

        Having the test in .html also makes it possible to run the test on iOS devices.

        * CMakeLists.txt:
        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * Scripts/webkit/messages.py:
        (types_that_cannot_be_forward_declared):
        * Shared/IPCStreamTester.cpp: Added.
        (WebKit::IPCStreamTester::create):
        (WebKit::IPCStreamTester::IPCStreamTester):
        (WebKit::IPCStreamTester::initialize):
        (WebKit::IPCStreamTester::stopListeningForIPC):
        (WebKit::IPCStreamTester::syncMessageReturningSharedMemory1):
        * Shared/IPCStreamTester.h: Copied from Source/WebKit/Shared/IPCTester.h.
        * Shared/IPCStreamTester.messages.in: Copied from Source/WebKit/Shared/IPCTester.messages.in.
        * Shared/IPCStreamTesterIdentifier.h: Copied from Source/WebKit/Shared/IPCTester.h.
        * Shared/IPCStreamTesterProxy.messages.in: Copied from Source/WebKit/Shared/IPCTester.messages.in.
        * Shared/IPCTester.cpp:
        (WebKit::IPCTester::createStreamTester):
        (WebKit::IPCTester::releaseStreamTester):
        * Shared/IPCTester.h:
        * Shared/IPCTester.messages.in:
        * Shared/mac/MediaFormatReader/MediaFormatReader.cpp:
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPC::staticValues):
        (WebKit::IPCTestingAPI::processTargetFromArgument):
        (WebKit::IPCTestingAPI::JSIPC::processTargets):

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Optimize black frame sending in MediaRecorderPrivate
        https://bugs.webkit.org/show_bug.cgi?id=237027

        Reviewed by Kimmo Kinnunen.

        Add support for sending black frames through SharedVideoFrame.
        In that case, we only send width and height and we reconstruct a black frame on receiver side.
        Make use of SharedVideoFrame in RemoteMediaRecorder.
        Set ownership in SharedVideoFrame to the corresponding WebProcess.

        Covered by existing tests, in particular http/wpt/mediarecorder/mute-tracks.html.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteMediaRecorder.h:
        * GPUProcess/webrtc/RemoteMediaRecorder.messages.in:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Remove dead code in GPUProcessConnection::dispatchMessage
        https://bugs.webkit.org/show_bug.cgi?id=237135

        Reviewed by Kimmo Kinnunen.

        No change of behavior.

        * WebProcess/GPU/GPUProcessConnection.cpp:
        (WebKit::GPUProcessConnection::dispatchMessage):

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Make RemoteVideoFrameIdentifier a regular ObjectIdentifier
        https://bugs.webkit.org/show_bug.cgi?id=237136

        Reviewed by Kimmo Kinnunen.

        Given all RemoteVideoFrames are created in GPUProcess, we no longer need to use a ProcessQualified identifier.
        Covered by existing tests.

        * WebProcess/GPU/media/RemoteVideoFrameIdentifier.h:

2022-02-24  Alex Christensen  <achristensen@webkit.org>

        Unreviewed, reverting r290371.

        Caused assertion

        Reverted changeset:

        "Call WKNavigationDelegate.didFailProvisionalNavigation even
        after a cross-origin navigation with COOP"
        https://bugs.webkit.org/show_bug.cgi?id=237071
        https://commits.webkit.org/r290371

2022-02-24  Gavin Phillips  <gavin.p@apple.com>

        Port CaptivePortalMode preferences to AnyHost in order to support CFPrefs Direct Mode propagation
        https://bugs.webkit.org/show_bug.cgi?id=237098

        Reviewed by Brent Fulgham.

        Move our CaptivePortalMode preference to AnyHost in order to correctly support
        CFPrefs Direct Mode propagation. We also now dispatch a CFNotification to ensure our preference
        observer is always notified of the change.

        * UIProcess/Cocoa/PreferenceObserver.mm:
        (-[WKUserDefaults findPreferenceChangesAndNotifyForKeys:toValuesForKeys:]):

        * Shared/Cocoa/AuxiliaryProcessCocoa.mm:
        (WebKit::AuxiliaryProcess::setPreferenceValue):
        * UIProcess/API/Cocoa/_WKSystemPreferences.mm:
        (+[_WKSystemPreferences isCaptivePortalModeEnabled]):
        (+[_WKSystemPreferences setCaptivePortalModeEnabled:]):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::captivePortalModeConfigUpdateCallback):
        (WebKit::WebProcessPool::registerNotificationObservers):
        (WebKit::WebProcessPool::unregisterNotificationObservers):
        * UIProcess/WebProcessPool.h:

2022-02-24  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Add support for replacing WKFoundTextRanges
        https://bugs.webkit.org/show_bug.cgi?id=237151
        rdar://89258687

        Reviewed by Wenson Hsieh.

        Implement protocol methods to support replacement.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::replaceFoundTextRangeWithString):
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView replaceFoundTextInRange:inDocument:withText:]):
        (-[WKContentView supportsTextReplacement]):

        Restrict replacement to editable web views.

        * WebProcess/WebPage/WebFoundTextRangeController.cpp:
        (WebKit::WebFoundTextRangeController::replaceFoundTextRangeWithString):

        Use a `TemporarySelectionChange` to select and replace the desired range.

        * WebProcess/WebPage/WebFoundTextRangeController.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::replaceFoundTextRangeWithString):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-02-24  Chris Dumez  <cdumez@apple.com>

        Take down shared worker context connection less aggressively when it becomes idle
        https://bugs.webkit.org/show_bug.cgi?id=237156

        Reviewed by Darin Adler.

        Take down shared worker context connection less aggressively when it becomes idle. Give it 5
        seconds before shutting it down in case it ends up being used again in the near future.

        This is similar to what we do for service workers.

        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::shutDownSharedWorker):
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.cpp:
        (WebKit::WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection):
        (WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject):
        (WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject):
        (WebKit::WebSharedWorkerServerToContextConnection::idleTerminationTimerFired):
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:

2022-02-24  Jer Noble  <jer.noble@apple.com>

        [Refactor] Adopt LoggerHelper in Legacy EME classes
        https://bugs.webkit.org/show_bug.cgi?id=234319

        Reviewed by Eric Carlson.

        * GPUProcess/media/RemoteCDMFactoryProxy.cpp:
        (WebKit::RemoteCDMFactoryProxy::createCDM):
        (WebKit::RemoteCDMFactoryProxy::logger const):
        * GPUProcess/media/RemoteCDMFactoryProxy.h:
        * GPUProcess/media/RemoteCDMInstanceProxy.cpp:
        (WebKit::RemoteCDMInstanceProxy::create):
        (WebKit::RemoteCDMInstanceProxy::RemoteCDMInstanceProxy):
        (WebKit::RemoteCDMInstanceProxy::createSession):
        * GPUProcess/media/RemoteCDMInstanceProxy.h:
        * GPUProcess/media/RemoteCDMInstanceProxy.messages.in:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.cpp:
        (WebKit::RemoteCDMInstanceSessionProxy::create):
        (WebKit::RemoteCDMInstanceSessionProxy::RemoteCDMInstanceSessionProxy):
        (WebKit::RemoteCDMInstanceSessionProxy::setLogIdentifier):
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.h:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.messages.in:
        * GPUProcess/media/RemoteCDMProxy.cpp:
        (WebKit::RemoteCDMProxy::create):
        (WebKit::RemoteCDMProxy::RemoteCDMProxy):
        (WebKit::RemoteCDMProxy::setLogIdentifier):
        * GPUProcess/media/RemoteCDMProxy.h:
        (WebKit::RemoteCDMProxy::logger const):
        (WebKit::RemoteCDMProxy::logIdentifier const):
        * GPUProcess/media/RemoteCDMProxy.messages.in:
        * GPUProcess/media/RemoteLegacyCDMFactoryProxy.cpp:
        (WebKit::RemoteLegacyCDMFactoryProxy::logger const):
        * GPUProcess/media/RemoteLegacyCDMFactoryProxy.h:
        * GPUProcess/media/RemoteLegacyCDMProxy.cpp:
        (WebKit::RemoteLegacyCDMProxy::createSession):
        * GPUProcess/media/RemoteLegacyCDMProxy.h:
        * GPUProcess/media/RemoteLegacyCDMProxy.messages.in:
        * GPUProcess/media/RemoteLegacyCDMSessionProxy.cpp:
        (WebKit::RemoteLegacyCDMSessionProxy::create):
        (WebKit::RemoteLegacyCDMSessionProxy::RemoteLegacyCDMSessionProxy):
        * GPUProcess/media/RemoteLegacyCDMSessionProxy.h:
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::createSession):
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.h:
        * WebProcess/GPU/media/RemoteCDM.cpp:
        (WebKit::RemoteCDM::setLogIdentifier):
        * WebProcess/GPU/media/RemoteCDM.h:
        * WebProcess/GPU/media/RemoteCDMConfiguration.h:
        (WebKit::RemoteCDMConfiguration::encode const):
        (WebKit::RemoteCDMConfiguration::decode):
        * WebProcess/GPU/media/RemoteCDMFactory.cpp:
        (WebKit::RemoteCDMFactory::createCDM):
        * WebProcess/GPU/media/RemoteCDMFactory.h:
        * WebProcess/GPU/media/RemoteCDMInstance.cpp:
        (WebKit::RemoteCDMInstance::createSession):
        * WebProcess/GPU/media/RemoteCDMInstanceSession.cpp:
        (WebKit::RemoteCDMInstanceSession::setLogIdentifier):
        * WebProcess/GPU/media/RemoteCDMInstanceSession.h:
        * WebProcess/GPU/media/RemoteLegacyCDM.cpp:
        (WebKit::RemoteLegacyCDM::createSession):
        * WebProcess/GPU/media/RemoteLegacyCDM.h:
        * WebProcess/GPU/media/RemoteLegacyCDMSession.cpp:
        (WebKit::RemoteLegacyCDMSession::create):
        (WebKit::RemoteLegacyCDMSession::RemoteLegacyCDMSession):
        * WebProcess/GPU/media/RemoteLegacyCDMSession.h:

2022-02-24  Sihui Liu  <sihui_liu@apple.com>

        Delete SessionStorageQuotaManager
        https://bugs.webkit.org/show_bug.cgi?id=237132

        Reviewed by Chris Dumez.

        The code is unused since r289474.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addWebsiteDataStore):
        (WebKit::NetworkProcess::addSessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::removeSessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::setSessionStorageQuotaManagerIDBRootPath): Deleted.
        (WebKit::NetworkProcess::storageQuotaManager): Deleted.
        * NetworkProcess/NetworkProcess.h:
        (WebKit::NetworkProcess::SessionStorageQuotaManager::SessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::defaultQuota const): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::ensureOriginStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::existingStorageQuotaManagers): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::cacheRootPath const): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::setIDBRootPath): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::idbRootPath const): Deleted.

2022-02-24  Devin Rousso  <drousso@apple.com>

        REGRESSION(r290436): fix build failures
        https://bugs.webkit.org/show_bug.cgi?id=237149

        Reviewed by Tim Horton.

        * Platform/cocoa/PaymentAuthorizationPresenter.mm:
        (WebKit::toNSError):
        * Platform/cocoa/WKPaymentAuthorizationDelegate.mm:
        (-[WKPaymentAuthorizationDelegate _willFinishWithError:]):
        * Shared/ApplePay/cocoa/WebPaymentCoordinatorProxyCocoa.mm:
        (WebKit::toPKContactFields):
        * Shared/ApplePay/mac/WebPaymentCoordinatorProxyMac.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments):
        (WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI):
        Replace `PAL::get_PassKitCore_*()` with `#define` declared in `<pal/cocoa/PassKitSoftLink.h>`.

2022-02-24  Wenson Hsieh  <wenson_hsieh@apple.com>

        Refactor logic for showing "Markup Image" and Quick Note items in the callout bar
        https://bugs.webkit.org/show_bug.cgi?id=237127
        rdar://89396617

        Reviewed by Megan Gardner.

        Use `-buildMenuWithBuilder:` to supply additional Quick Note and image analysis items, instead of adding them
        directly to the shared menu controller. See below for more details.

        Tests:  ImageAnalysisTests.MenuControllerItems
                WebKit.AppHighlightsInImageOverlays

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView didMoveToWindow]):

        See below.

        (-[WKWebView buildMenuWithBuilder:]):

        Override this method and call into the content view via `-buildMenuForWebViewWithBuilder:` to populate the given
        builder with either Quick Note or "Markup Image" items, if necessary. Note that overriding this method on
        WKWebView is sufficient, since UIKit walks up the responder hierarchy starting from the first responder
        (WKContentView) when populating menu items.

        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView targetForAction:withSender:]):

        Move some logic for conditionally enabling the Quick Note items into `-imageAnalysisMarkupMenu`.

        (-[WKContentView imageAnalysisMarkupMenu]):
        (-[WKContentView _selectionChanged]):

        Remove logic that updates the shared UIMenuController's menu items every time the selection changes. This is
        no longer needed, since UIKit will always call into `-buildMenuWithBuilder:` when presenting the callout bar,
        which allows us to lazily run logic to determine whether or not we should show the Quick Note and image analysis
        items when the callout bar is shown, instead of keeping the menu controller's `-menuItems` array up to date upon
        each selection change.

        (-[WKContentView buildMenuForWebViewWithBuilder:]):

        Consult `-appHighlightMenu` and `-imageAnalysisMarkupMenu` to populate the menu with inline UIMenus. Note that
        these menus' items are always inlined into the callout bar as top-level items, since we explicitly specify
        `UIMenuOptionsDisplayInline` when creating the menu.

        (-[WKContentView menuWithInlineAction:identifier:handler:]):
        (-[WKContentView appHighlightMenu]):

        Refactor this, and `-imageAnalysisMarkupMenu` above to return a UIMenu with a single UIAction presented inline.

        (-[WKContentView updateImageAnalysisMarkupMenuItems:]): Deleted.

        Replaced with `-imageAnalysisMarkupMenu`.

        (-[WKContentView canPerformImageAnalysisMarkup]): Deleted.
        (-[WKContentView performImageAnalysisMarkup:]): Deleted.
        (-[WKContentView setUpAdditionalMenuControllerActions]): Deleted.
        (findMenuItemWithAction): Deleted.
        (-[WKContentView updateAppHighlightMenuItems:]): Deleted.

        Replaced with `-appHighlightMenu`.

        (-[WKContentView createHighlightForCurrentQuickNoteWithRange:]): Deleted.
        (-[WKContentView createHighlightForNewQuickNoteWithRange:]): Deleted.

2022-02-24  Chris Dumez  <cdumez@apple.com>

        Regression(r273929) FrameState no longer gets a move constructor
        https://bugs.webkit.org/show_bug.cgi?id=237142

        Reviewed by Darin Adler.

        FrameState no longer gets an implicit move constructor since r273929 because a custom
        destructor was added.

        * Shared/SessionState.h:

2022-02-24  Kate Cheney  <katherine_cheney@apple.com>

        Update CSP console logging
        https://bugs.webkit.org/show_bug.cgi?id=232216
        <rdar://problem/89322580>

        Reviewed by Brent Fulgham.

        * NetworkProcess/NetworkLoadChecker.cpp:
        (WebKit::NetworkLoadChecker::check):
        (WebKit::NetworkLoadChecker::checkRedirection):
        (WebKit::NetworkLoadChecker::checkRequest):
        (WebKit::NetworkLoadChecker::isAllowedByContentSecurityPolicy):
        * NetworkProcess/NetworkLoadChecker.h:

2022-02-24  Devin Rousso  <drousso@apple.com>

        [MacCatalyst] REGRESSION(r290091): sometimes can crash if `WKWebView` is deallocated before the next visible content rect update
        https://bugs.webkit.org/show_bug.cgi?id=237126
        <rdar://problem/89345853>

        Reviewed by Tim Horton.

        Tests: WKWebViewResize.DoesNotAssertInDeallocAfterChangingFrame
               WKWebViewResize.DoesNotAssertInDeallocAfterChangingBounds

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _acquireResizeAssertionForReason:]):
        (-[WKWebView _invalidateResizeAssertions]): Added.
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView dealloc]):
        Make sure to `-invalidate` any remaining assertions in `-dealloc` as required by `_UIInvalidatable`.

2022-02-24  Devin Rousso  <drousso@apple.com>

        [Apple Pay] switch from `PassKit/*` to `PassKit[Core,UI]/*`
        https://bugs.webkit.org/show_bug.cgi?id=237091
        <rdar://problem/81085862>

        Reviewed by Tim Horton.

        * Platform/cocoa/PaymentAuthorizationPresenter.mm:
        (WebKit::toNSError):
        * Platform/cocoa/WKPaymentAuthorizationDelegate.mm:
        (-[WKPaymentAuthorizationDelegate _willFinishWithError:]):
        * Shared/ApplePay/cocoa/WebPaymentCoordinatorProxyCocoa.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard):
        (WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup):
        (WebKit::toPKContactFields):
        * Shared/ApplePay/mac/WebPaymentCoordinatorProxyMac.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments):
        (WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI):
        * WebProcess/ApplePay/cocoa/WebPaymentCoordinatorCocoa.mm:
        (WebKit::WebPaymentCoordinator::platformAvailablePaymentNetworks):

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        LibWebRTCCodecs, -Proxy create and communicate the RemoteVideoFrameProxy incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=237083

        Reviewed by Youenn Fablet.
        LibWebRTCCodecsProxy should not call RemoteVideoFrameObjectHeap::createVideoFrame,
        the function should be removed. Instead, LibWebRTCCodecsProxy should construct a
        write reference to insert the media sample -> remote proxy mapping. Then
        the result of the insert, a new reference, should be sent as part of the
        RemoteVideoFrameProxy::Properties to the WP. This way the sent reference is
        constructed as expected. Previously the reference was correct but matched just
        by selecting the constants currently used (0). This works towards being able
        to remove RemoteVideoFrameObjectHeap::createVideoFrame.

        Split the completedDecoding to two:
        - completedDecoding used to send new RemoteVideoFrames
        - completedDecodingCV to send CoreVideo specific RemoteVideoSample instances (which will
          removed eventually).

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::Function<void):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::completedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.messages.in:

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        Thread safety analysis to assert "code is run sequentially" is not useful when code is mainly run with WorkQueues
        https://bugs.webkit.org/show_bug.cgi?id=236832

        Reviewed by Antti Koivisto.

        Assert directly that the work queues are current instead of using ThreadAssertion.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL):
        (WebKit::RemoteGraphicsContextGL::displayWasReconfigured):
        (WebKit::RemoteGraphicsContextGL::workQueueInitialize):
        (WebKit::RemoteGraphicsContextGL::workQueueUninitialize):
        (WebKit::RemoteGraphicsContextGL::didComposite):
        (WebKit::RemoteGraphicsContextGL::forceContextLost):
        (WebKit::RemoteGraphicsContextGL::dispatchContextChangedNotification):
        (WebKit::RemoteGraphicsContextGL::reshape):
        (WebKit::RemoteGraphicsContextGL::prepareForDisplay):
        (WebKit::RemoteGraphicsContextGL::synthesizeGLError):
        (WebKit::RemoteGraphicsContextGL::getError):
        (WebKit::RemoteGraphicsContextGL::ensureExtensionEnabled):
        (WebKit::RemoteGraphicsContextGL::markContextChanged):
        (WebKit::RemoteGraphicsContextGL::paintRenderingResultsToCanvasWithQualifiedIdentifier):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToCanvasWithQualifiedIdentifier):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToMediaSample):
        (WebKit::RemoteGraphicsContextGL::paintPixelBufferToImageBuffer):
        (WebKit::RemoteGraphicsContextGL::simulateEventForTesting):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        (WebKit::RemoteGraphicsContextGL::workQueue const):
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        (WebKit::RemoteGraphicsContextGL::copyTextureFromVideoFrame):
        (WebKit::RemoteGraphicsContextGLCocoa::platformWorkQueueInitialize):
        (WebKit::RemoteGraphicsContextGLCocoa::prepareForDisplay):
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (moveErrorsToSyntheticErrorList):
        (activeTexture):
        (attachShader):
        (bindAttribLocation):
        (bindBuffer):
        (bindFramebuffer):
        (bindRenderbuffer):
        (bindTexture):
        (blendColor):
        (blendEquation):
        (blendEquationSeparate):
        (blendFunc):
        (blendFuncSeparate):
        (checkFramebufferStatus):
        (clear):
        (clearColor):
        (clearDepth):
        (clearStencil):
        (colorMask):
        (compileShader):
        (copyTexImage2D):
        (copyTexSubImage2D):
        (createBuffer):
        (createFramebuffer):
        (createProgram):
        (createRenderbuffer):
        (createShader):
        (createTexture):
        (cullFace):
        (deleteBuffer):
        (deleteFramebuffer):
        (deleteProgram):
        (deleteRenderbuffer):
        (deleteShader):
        (deleteTexture):
        (depthFunc):
        (depthMask):
        (depthRange):
        (detachShader):
        (disable):
        (disableVertexAttribArray):
        (drawArrays):
        (drawElements):
        (enable):
        (enableVertexAttribArray):
        (finish):
        (flush):
        (framebufferRenderbuffer):
        (framebufferTexture2D):
        (frontFace):
        (generateMipmap):
        (getActiveAttrib):
        (getActiveUniform):
        (getAttribLocation):
        (getBufferParameteri):
        (getString):
        (getFloatv):
        (getIntegerv):
        (getInteger64):
        (getInteger64i):
        (getProgrami):
        (getBooleanv):
        (getFramebufferAttachmentParameteri):
        (getProgramInfoLog):
        (getRenderbufferParameteri):
        (getShaderi):
        (getShaderInfoLog):
        (getShaderPrecisionFormat):
        (getShaderSource):
        (getTexParameterf):
        (getTexParameteri):
        (getUniformfv):
        (getUniformiv):
        (getUniformuiv):
        (getUniformLocation):
        (getVertexAttribOffset):
        (hint):
        (isBuffer):
        (isEnabled):
        (isFramebuffer):
        (isProgram):
        (isRenderbuffer):
        (isShader):
        (isTexture):
        (lineWidth):
        (linkProgram):
        (pixelStorei):
        (polygonOffset):
        (renderbufferStorage):
        (sampleCoverage):
        (scissor):
        (shaderSource):
        (stencilFunc):
        (stencilFuncSeparate):
        (stencilMask):
        (stencilMaskSeparate):
        (stencilOp):
        (stencilOpSeparate):
        (texParameterf):
        (texParameteri):
        (uniform1f):
        (uniform1fv):
        (uniform1i):
        (uniform1iv):
        (uniform2f):
        (uniform2fv):
        (uniform2i):
        (uniform2iv):
        (uniform3f):
        (uniform3fv):
        (uniform3i):
        (uniform3iv):
        (uniform4f):
        (uniform4fv):
        (uniform4i):
        (uniform4iv):
        (uniformMatrix2fv):
        (uniformMatrix3fv):
        (uniformMatrix4fv):
        (useProgram):
        (validateProgram):
        (vertexAttrib1f):
        (vertexAttrib1fv):
        (vertexAttrib2f):
        (vertexAttrib2fv):
        (vertexAttrib3f):
        (vertexAttrib3fv):
        (vertexAttrib4f):
        (vertexAttrib4fv):
        (vertexAttribPointer):
        (viewport):
        (bufferData0):
        (bufferData1):
        (bufferSubData):
        (readnPixels0):
        (readnPixels1):
        (texImage2D0):
        (texImage2D1):
        (texSubImage2D0):
        (texSubImage2D1):
        (compressedTexImage2D0):
        (compressedTexImage2D1):
        (compressedTexSubImage2D0):
        (compressedTexSubImage2D1):
        (drawArraysInstanced):
        (drawElementsInstanced):
        (vertexAttribDivisor):
        (createVertexArray):
        (deleteVertexArray):
        (isVertexArray):
        (bindVertexArray):
        (copyBufferSubData):
        (getBufferSubData):
        (blitFramebuffer):
        (framebufferTextureLayer):
        (invalidateFramebuffer):
        (invalidateSubFramebuffer):
        (readBuffer):
        (renderbufferStorageMultisample):
        (texStorage2D):
        (texStorage3D):
        (texImage3D0):
        (texImage3D1):
        (texSubImage3D0):
        (texSubImage3D1):
        (copyTexSubImage3D):
        (compressedTexImage3D0):
        (compressedTexImage3D1):
        (compressedTexSubImage3D0):
        (compressedTexSubImage3D1):
        (getFragDataLocation):
        (uniform1ui):
        (uniform2ui):
        (uniform3ui):
        (uniform4ui):
        (uniform1uiv):
        (uniform2uiv):
        (uniform3uiv):
        (uniform4uiv):
        (uniformMatrix2x3fv):
        (uniformMatrix3x2fv):
        (uniformMatrix2x4fv):
        (uniformMatrix4x2fv):
        (uniformMatrix3x4fv):
        (uniformMatrix4x3fv):
        (vertexAttribI4i):
        (vertexAttribI4iv):
        (vertexAttribI4ui):
        (vertexAttribI4uiv):
        (vertexAttribIPointer):
        (drawRangeElements):
        (drawBuffers):
        (clearBufferiv):
        (clearBufferuiv):
        (clearBufferfv):
        (clearBufferfi):
        (createQuery):
        (deleteQuery):
        (isQuery):
        (beginQuery):
        (endQuery):
        (getQuery):
        (getQueryObjectui):
        (createSampler):
        (deleteSampler):
        (isSampler):
        (bindSampler):
        (samplerParameteri):
        (samplerParameterf):
        (getSamplerParameterf):
        (getSamplerParameteri):
        (fenceSync):
        (isSync):
        (deleteSync):
        (clientWaitSync):
        (waitSync):
        (getSynci):
        (createTransformFeedback):
        (deleteTransformFeedback):
        (isTransformFeedback):
        (bindTransformFeedback):
        (beginTransformFeedback):
        (endTransformFeedback):
        (transformFeedbackVaryings):
        (getTransformFeedbackVarying):
        (pauseTransformFeedback):
        (resumeTransformFeedback):
        (bindBufferBase):
        (bindBufferRange):
        (getUniformIndices):
        (getActiveUniforms):
        (getUniformBlockIndex):
        (getActiveUniformBlockName):
        (uniformBlockBinding):
        (getActiveUniformBlockiv):
        (getGraphicsResetStatusARB):
        (getTranslatedShaderSourceANGLE):
        (drawBuffersEXT):
        (getInternalformativ):
        (multiDrawArraysANGLE):
        (multiDrawArraysInstancedANGLE):
        (multiDrawElementsANGLE):
        (multiDrawElementsInstancedANGLE):
        (paintRenderingResultsToPixelBuffer):
        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::RemoteGPU):
        (WebKit::RemoteGPU::initialize):
        (WebKit::RemoteGPU::stopListeningForIPC):
        (WebKit::RemoteGPU::workQueueInitialize):
        (WebKit::RemoteGPU::workQueueUninitialize):
        (WebKit::RemoteGPU::requestAdapter):
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::stopListeningForIPC):
        (WebKit::RemoteVideoFrameObjectHeap::releaseVideoFrame):
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * Platform/IPC/StreamConnectionWorkQueue.cpp:
        (IPC::StreamConnectionWorkQueue::assertIsCurrent const):
        * Platform/IPC/StreamConnectionWorkQueue.h:
        (IPC::WTF_ASSERTS_ACQUIRED_CAPABILITY):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r290175): Texture upload from video and user media is slower than expected for non-GPUP WebGL
        https://bugs.webkit.org/show_bug.cgi?id=237034

        Reviewed by Youenn Fablet.

        Add back the code-path to obtain the IOSurface backed CVPixelBuffers directly
        via IPC transfer. This is used on macOS where WebGL is in WP.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::pixelBuffer):
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.messages.in:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        (WebKit::RemoteVideoFrameProxy::pixelBuffer const):
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:

2022-02-23  Don Olmstead  <don.olmstead@sony.com>

        Fix !ENABLE(SERVICE_WORKER) build after r290387
        https://bugs.webkit.org/show_bug.cgi?id=237119

        Unreviewed build fix.

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess):

2022-02-23  Maxim Cournoyer  <maxim.cournoyer@gmail.com>

        [WPE][GTK] Paths should be canonicalized before calling bwrap
        https://bugs.webkit.org/show_bug.cgi?id=211131

        Reviewed by Michael Catanzaro.

        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindSymlinksRealPath): Relocate earlier in file,
        add a 'bindOption' argument and use FileSystem::realPath instead
        of realpath from the standard C library.
        (WebKit::bindIfExists): Use the modified above procedure to
        canonicalize the source path, and avoid adding bind mounts for
        locations under /etc.

2022-02-23  Liliana Marie Prikler <liliana.prikler@gmail.com>

        Bubblewrap launcher doesn't bind font locations from XDG_DATA_DIRS
        https://bugs.webkit.org/show_bug.cgi?id=237089

        Reviewed by Michael Catanzaro.

        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindFonts): Expose font directories present in the
        XDG_DATA_DIRS environment variable.

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Adopt more widely the new URL constructor that takes in a String
        https://bugs.webkit.org/show_bug.cgi?id=237099

        Reviewed by Darin Adler.

        * NetworkProcess/Classifier/ResourceLoadStatisticsStore.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:task:didReceiveChallenge:completionHandler:]):
        * Shared/API/APISecurityOrigin.h:
        (API::SecurityOrigin::createFromString):
        * Shared/API/APIURL.h:
        (API::URL::parseURLIfNecessary const):
        * Shared/API/c/WKURLRequest.cpp:
        (WKURLRequestCreateWithWKURL):
        * Shared/API/glib/WebKitURIRequest.cpp:
        (webkit_uri_request_set_uri):
        * Shared/APIWebArchiveResource.mm:
        (API::WebArchiveResource::WebArchiveResource):
        * Shared/ApplePay/WebPaymentCoordinatorProxy.cpp:
        (WebKit::WebPaymentCoordinatorProxy::showPaymentUI):
        * Shared/curl/WebCoreArgumentCodersCurl.cpp:
        (IPC::ArgumentCoder<ResourceError>::decodePlatformData):
        * Shared/gtk/ArgumentCodersGtk.cpp:
        (IPC::ArgumentCoder<SelectionData>::decode):
        * Shared/soup/WebCoreArgumentCodersSoup.cpp:
        (IPC::ArgumentCoder<ResourceError>::decodePlatformData):
        * UIProcess/API/C/WKOpenPanelResultListener.cpp:
        (filePathsFromFileURLs):
        * UIProcess/API/C/WKPage.cpp:
        (WKPageLoadURL):
        (WKPageLoadURLWithShouldOpenExternalURLsPolicy):
        (WKPageLoadURLWithUserData):
        (WKPageLoadAlternateHTMLStringWithUserData):
        (WKPageSetPrivateClickMeasurementTokenPublicKeyURLForTesting):
        (WKPageSetPrivateClickMeasurementTokenSignatureURLForTesting):
        (WKPageSetPrivateClickMeasurementAttributionReportURLsForTesting):
        * UIProcess/API/C/WKPageGroup.cpp:
        (WKPageGroupAddUserStyleSheet):
        (WKPageGroupAddUserScript):
        * UIProcess/API/C/WKWebsiteDataStoreRef.cpp:
        (WKWebsiteDataStoreSetResourceLoadStatisticsPrevalentResourceForDebugMode):
        (WKWebsiteDataStoreSetStatisticsLastSeen):
        (WKWebsiteDataStoreSetStatisticsMergeStatistic):
        (WKWebsiteDataStoreSetStatisticsExpiredStatistic):
        (WKWebsiteDataStoreSetStatisticsPrevalentResource):
        (WKWebsiteDataStoreSetStatisticsVeryPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsVeryPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsSubresourceUnder):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsSubFrameUnder):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsRedirectingTo):
        (WKWebsiteDataStoreSetStatisticsHasHadUserInteraction):
        (WKWebsiteDataStoreIsStatisticsHasHadUserInteraction):
        (WKWebsiteDataStoreIsStatisticsOnlyInDatabaseOnce):
        (WKWebsiteDataStoreSetStatisticsGrandfathered):
        (WKWebsiteDataStoreIsStatisticsGrandfathered):
        (WKWebsiteDataStoreSetStatisticsSubframeUnderTopFrameOrigin):
        (WKWebsiteDataStoreSetStatisticsSubresourceUnderTopFrameOrigin):
        (WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectTo):
        (WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectFrom):
        (WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectTo):
        (WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectFrom):
        (WKWebsiteDataStoreSetStatisticsCrossSiteLoadWithLinkDecoration):
        (WKWebsiteDataStoreStatisticsDeleteCookiesForTesting):
        (WKWebsiteDataStoreStatisticsHasLocalStorage):
        (WKWebsiteDataStoreStatisticsHasIsolatedSession):
        (WKWebsiteDataStoreSetResourceLoadStatisticsToSameSiteStrictCookiesForTesting):
        (WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting):
        (WKWebsiteDataStoreSetResourceLoadStatisticsThirdPartyCNAMEDomainForTesting):
        (WKWebsiteDataStoreSetAppBoundDomainsForTesting):
        * UIProcess/API/C/curl/WKWebsiteDataStoreRefCurl.cpp:
        (WKWebsiteDataStoreEnableCustomNetworkProxySettings):
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        * UIProcess/API/glib/WebKitCookieManager.cpp:
        (webkit_cookie_manager_get_cookies):
        * UIProcess/API/glib/WebKitSecurityOrigin.cpp:
        (webkit_security_origin_new_for_uri):
        * UIProcess/API/glib/WebKitWebView.cpp:
        (webkit_web_view_load_alternate_html):
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _uiEventAttribution]):
        * UIProcess/Automation/WebAutomationSession.cpp:
        (WebKit::WebAutomationSession::navigateBrowsingContext):
        (WebKit::WebAutomationSession::addSingleCookie):
        (WebKit::WebAutomationSession::deleteAllCookies):
        * UIProcess/Cocoa/LegacyDownloadClient.mm:
        (WebKit::LegacyDownloadClient::legacyDidStart):
        * UIProcess/Cocoa/NavigationState.mm:
        (WebKit::NavigationState::NavigationClient::willPerformClientRedirect):
        (WebKit::NavigationState::NavigationClient::didPerformClientRedirect):
        * UIProcess/Cocoa/WKReloadFrameErrorRecoveryAttempter.mm:
        (-[WKReloadFrameErrorRecoveryAttempter attemptRecovery]):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::isURLKnownHSTSHost const):
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.cpp:
        (WebKit::RemoteWebInspectorUIProxy::load):
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::isMainOrTestInspectorPage):
        (WebKit::WebInspectorUIProxy::openLocalInspectorFrontend):
        * UIProcess/Inspector/gtk/RemoteWebInspectorUIProxyGtk.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformSave):
        * UIProcess/Inspector/gtk/WebInspectorUIProxyGtk.cpp:
        (WebKit::WebInspectorUIProxy::platformSave):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::launchProcessForReload):
        (WebKit::WebPageProxy::loadFile):
        (WebKit::WebPageProxy::navigateToPDFLinkWithSimulatedClick):
        (WebKit::WebPageProxy::reload):
        (WebKit::WebPageProxy::goToBackForwardItem):
        (WebKit::WebPageProxy::receivedNavigationPolicyDecision):
        (WebKit::WebPageProxy::sessionState const):
        (WebKit::checkIfNavigationContainsDataTransfer):
        (WebKit::WebPageProxy::didCommitLoadForFrame):
        (WebKit::WebPageProxy::decidePolicyForNavigationAction):
        (WebKit::WebPageProxy::contextMenuItemSelected):
        (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::processForNavigationInternal):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::assumeReadAccessToBaseURL):
        (WebKit::WebProcessProxy::checkURLReceivedFromWebProcess):
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::platformSetNetworkParameters):
        (WebKit::WebsiteDataStore::initializeAppBoundDomains):
        * UIProcess/mac/LegacySessionStateCoding.cpp:
        (WebKit::decodeLegacySessionState):
        * WebProcess/ApplePay/WebPaymentCoordinator.cpp:
        (WebKit::WebPaymentCoordinator::validateMerchant):
        * WebProcess/InjectedBundle/API/c/WKBundleFrame.cpp:
        (WKBundleFrameAllowsFollowingLink):
        (WKBundleFrameCopySuggestedFilenameForResourceWithURL):
        (WKBundleFrameCopyMIMETypeForResourceWithURL):
        * WebProcess/InjectedBundle/API/c/WKBundlePage.cpp:
        (WKBundlePageHasLocalDataForURL):
        (WKBundlePageClearApplicationCacheForOrigin):
        (WKBundlePageGetAppCacheUsageForOrigin):
        * WebProcess/InjectedBundle/InjectedBundle.cpp:
        (WebKit::InjectedBundle::setUserStyleSheetLocation):
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        (WebKit::isValidFetch):
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFormData):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::loadData):
        (WebKit::WebPage::loadAlternateHTML):
        (WebKit::WebPage::getResourceDataFromFrame):
        * webpushd/PushService.mm:
        (WebPushD::PushService::didReceivePushMessage):

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Share more code between service and shared workers for context connection establishment
        https://bugs.webkit.org/show_bug.cgi?id=237085

        Reviewed by Youenn Fablet.

        Share more code between service and shared workers for context connection establishment.

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::ensureSWServer):
        * NetworkProcess/SharedWorker/WebSharedWorker.cpp:
        (WebKit::WebSharedWorker::firstSharedWorkerObjectProcess const):
        * NetworkProcess/SharedWorker/WebSharedWorker.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::didFinishFetchingSharedWorkerScript):
        (WebKit::WebSharedWorkerServer::createContextConnection):
        (WebKit::WebSharedWorkerServer::removeContextConnection):
        (WebKit::WebSharedWorkerServer::shutDownSharedWorker):
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::NetworkProcessProxy::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::NetworkProcessProxy::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::WebProcessPool::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        * UIProcess/WebProcessPool.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::establishRemoteWorkerContext):
        (WebKit::WebProcessProxy::establishServiceWorkerContext): Deleted.
        (WebKit::WebProcessProxy::establishSharedWorkerContext): Deleted.
        * UIProcess/WebProcessProxy.h:
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::WebProcess::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::WebProcess::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        * WebProcess/WebProcess.h:
        * WebProcess/WebProcess.messages.in:

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        Prevent use of PDFKit when using PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=237052
        rdar://89251696

        Reviewed by Tim Horton.

        PDFKit was still being used by embeds, this patch fixes that issue by treating
        pdf embeds as frames if PDF.js is enabled and also prevents the loading of
        the PDFKit plugin entirely by modifying shouldUsePDFPlugin.

        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::objectContentType):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::shouldUsePDFPlugin const):

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] userHandle not marked nullable in _WKWebAuthenticationAssertionResponse
        https://bugs.webkit.org/show_bug.cgi?id=237043
        rdar://89317740

        Reviewed by Brent Fulgham.

        The userHandle is a nullable field on UserEntity. This patch changes
        various API/SPI to allow passing null userHandle.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        Update forward declared SPI, reflecting userHandle as nullable.
        * UIProcess/API/Cocoa/_WKAuthenticatorAssertionResponseInternal.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationAssertionResponse.h:
        Update userHandle property to null.
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (getAllLocalAuthenticatorCredentialsImpl):
        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticatorInternal::getExistingCredentials):

2022-02-23  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] De-initialize GStreamer before terminating WebProcess
        https://bugs.webkit.org/show_bug.cgi?id=237084

        Reviewed by Carlos Garcia Campos.

        Allowing the leak tracer to report/log leaks. There is an issue though, if the UIProcess
        exits too early, the leak tracer reporting will be interrupted potentially too early. The
        workaround is to have 2 tabs open in the GTK MiniBrowser, closing the one where media
        handling and leak tracing was done and keeping the second tab open.

        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::stopRunLoop):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteSampleBufferDisplayLayer::enqueueSample should not change media samples owned by its object heap
        https://bugs.webkit.org/show_bug.cgi?id=237025
        <rdar://problem/89343447>

        Reviewed by Darin Adler.

        Updated https://commits.webkit.org/r290358 according comments given during review.

        * Platform/IPC/ArgumentCoders.h:
        (IPC::ArgumentCoder<std::nullptr_t>::encode):
        (IPC::ArgumentCoder<std::nullptr_t>::decode):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameWriter::write):
        (WebKit::SharedVideoFrameReader::SharedVideoFrameReader):
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:
        (WebKit::SharedVideoFrame::encode const):
        (WebKit::SharedVideoFrame::decode):

2022-02-23  Alex Christensen  <achristensen@webkit.org>

        Call WKNavigationDelegate.didFailProvisionalNavigation even after a cross-origin navigation with COOP
        https://bugs.webkit.org/show_bug.cgi?id=237071
        <rdar://88652375>

        Reviewed by Chris Dumez.

        There was an assumption that this callback wasn't needed in this case, but it is.
        Covered by an API test that verifies the callback is received.

        * UIProcess/ProvisionalPageProxy.cpp:
        (WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame):

2022-02-23  Zan Dobersek  <zdobersek@igalia.com>

        [GLib] Add missing WebPage.h inclusion in WebProcessGLib.cpp
        https://bugs.webkit.org/show_bug.cgi?id=237081

        Unreviewed, adding the WebPage.h header inclusion in WebProcessGLib.cpp
        to avoid incomplete-type errors for the WebPage class under a certain
        combination of unified sources.

        * WebProcess/glib/WebProcessGLib.cpp:

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteVideoFrameObjectHeap::getVideoFrameBuffer can use base class pixelBuffer accessor
        https://bugs.webkit.org/show_bug.cgi?id=237020

        Reviewed by Kimmo Kinnunen.

        Make use of pixelBuffer virtual method to simplify things.
        Add a missing early return in case of not found pixel buffer.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Fix GPUP WebGL generator script wrt uninitialised sized span
        https://bugs.webkit.org/show_bug.cgi?id=235889

        Reviewed by Antti Koivisto.

        Regenerated.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Thread safety analysis macros are confusing for non-Lock use-cases
        https://bugs.webkit.org/show_bug.cgi?id=237022

        Reviewed by Chris Dumez.

        Use WTF_GUARDED_BY_CAPABILITY instead of WTF_GUARDED_BY_LOCK
        for non-lock use-cases.

        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:

2022-02-23  Pablo Saavedra  <psaavedra@igalia.com>

        [GTK][WPE] PlatformDisplay::terminateEglDisplays() is never called
        https://bugs.webkit.org/show_bug.cgi?id=217655

        Stop the run loop for GTK and WPE to ensure a normal exit, since we need
        atexit handlers to be called to cleanup resources like EGL displays.

        Reviewed by Carlos Garcia Campos.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::AuxiliaryProcess::didClose):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeConnection):
        * WebProcess/WebProcess.h:
        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::stopRunLoop):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteSampleBufferDisplayLayer::enqueueSample should not change media samples owned by its object heap
        https://bugs.webkit.org/show_bug.cgi?id=237025

        Reviewed by Darin Adler.

        From past bugs, it is risky to change CMSampleBuffer dictionaries if they can be used on various threads (encoder, display layer...).
        Instead, we create a new MediaSample that is wrapping the same CVPixelBufferRef, on which can safely apply setAsDisplayImmediately.

        We introduce SharedVideoFrame as a replacement to RemoteVideoSample.
        We beef up SharedVideoFrameWriter and SharedVideoFrameReader to handle any MediaSample,
        with specific handling for remote frames, IOSurface frames or other in memory frames.
        We make use of SharedVideoFrame in SampleBufferDisplayLayer, which allows to unify enqueueSample and enqueueCV in one IPC message,
        which is easier to maintain.

        We update call sites that create SharedVideoFrameReader to either take nullptr or a object heap reference when they will need it in the future.

        Covered by existing tests.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.messages.in:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-02-23  Youenn Fablet  <youenn@apple.com>

        Optimize RemoteVideoFrame handling in WebProcess WebRTC pipeline
        https://bugs.webkit.org/show_bug.cgi?id=236970

        Reviewed by Eric Carlson.

        Fix bug in LibWebRTCCodecsProxy that would make use of shared video frame instead of remote video frame when a shared video frame is available.
        Use VideoFrame* as webrtc frame provider for encoding and decoding.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:

2022-02-22  Chris Dumez  <cdumez@apple.com>

        http/wpt/push-api/onpush-disabled.html fails
        https://bugs.webkit.org/show_bug.cgi?id=236874
        <rdar://problem/89176154>

        Reviewed by Youenn Fablet.

        Before running the test, we would construct a new WKWebView with the Push API setting disabled.
        We would then run the test, which would launch a service worker. Normally, we would expect the
        service worker to inherit the settings from the WKWebView. However, it was not reliably
        happening because the settings for the service worker are stored on the WebProcessPool and
        WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess() was selecting a
        random WebProcessPool object (the first one returned by processPools()).

        To address the issue, we now pass the ProcessIdentifier of the client that requested the
        service worker connection so that establishServiceWorkerContextConnectionToNetworkProcess() can
        now prioritize the WebProcessPool of that process. Also, as an optimization, we now prioritize
        this client process to run the service worker (assuming it is origin-clean).

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::ensureSWServer):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::establishServiceWorkerContextConnectionToNetworkProcess):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess):
        * UIProcess/WebProcessPool.h:

2022-02-22  Simon Fraser  <simon.fraser@apple.com>

        With DOM Rendering in GPU process, every display results in new IOSurface allocation
        https://bugs.webkit.org/show_bug.cgi?id=237063

        Reviewed by Tim Horton.

        We have to avoid ImageBufferRemoteIOSurfaceBackends in the web process from hanging on to
        an IOSurface MachSendRight (via ImageBufferBackendHandle) all the time, because doing so
        makes the IOSurface appear to be in-use, and therefore not eligible for swapping to,
        or making volatile. In particular, swapToValidFrontBuffer() would always think
        that the surfaces were in-use, resulting in permanent triple-buffering, and
        allocation of a new buffer on every swap.

        Fix by clearing the ImageBufferBackendHandles of all the buffers in the WP in
        RemoteRenderingBackendProxy::swapToValidFrontBuffer(), so that the GPUP can accurately
        gauge in-use-ness; we get back a handle to the new front buffer in the reply,
        and this is the only one we need to keep hold of, since it gets transferred to
        the UI process.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::markSurfaceNonVolatile):
        (WebKit::RemoteRenderingBackend::swapToValidFrontBuffer):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::display):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer):
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile):

2022-02-22  Simon Fraser  <simon.fraser@apple.com>

        Use non-inline messages for layer volatility-related IPC in RemoteRenderingBackend
        https://bugs.webkit.org/show_bug.cgi?id=237061

        Reviewed by Wenson Hsieh.

        There appears to be a rare issue where StreamClientConnection::sendSync() can hang sometimes,
        which makes it impossible to do an entire MotionMark run (rdar://89313626). So avoid this
        by making the MarkSurfaceNonVolatile and SwapToValidFrontBuffer use out-of-line encoding.

        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:

2022-02-22  Simon Lewis  <simon.lewis@apple.com>

        Further restrict received IPC boolean values to 0 or 1
        https://bugs.webkit.org/show_bug.cgi?id=236801
        rdar://85811396

        Reviewed by Chris Dumez.

        Return std::nullopt if a value larger than 1 is received.

        * Platform/IPC/ArgumentCoder.h:
        (IPC::ArgumentCoder<bool>::decode):

2022-02-22  Brent Fulgham  <bfulgham@apple.com>

        PingLoader is failing to call completion handler in error case
        https://bugs.webkit.org/show_bug.cgi?id=237062
        <rdar://50157253>

        Reviewed by Chris Dumez.

        The completion handler was not being called in the case of a PingLoad being redirected to
        a non-HTTP(S) scheme.

        * NetworkProcess/PingLoad.cpp:
        (WebKit::PingLoad::willPerformHTTPRedirection):

2022-02-22  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][WK2] animations/background-position.html is timing out
        https://bugs.webkit.org/show_bug.cgi?id=236630

        Reviewed by Don Olmstead.

        r289848 was a wrong fix causing some test failures. It called the
        force repaint completion handler too early if m_waitDidUpdate was
        true when the force repaint was requested. In such case, we should
        wait for two DidUpdate messages before calling the completion
        handler.

        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::forceRepaintAsync):
        (WebKit::DrawingAreaWC::didUpdate):
        * WebProcess/WebPage/wc/DrawingAreaWC.h:
        Added m_isForceRepaintCompletionHandlerDeferred flag.

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Clean up / optimize even more call sites constructing vectors
        https://bugs.webkit.org/show_bug.cgi?id=236852

        Reviewed by Darin Adler.

        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::outOfBandTrackSources):
        * GPUProcess/media/RemoteSourceBufferProxy.cpp:
        (WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidReceiveInitializationSegment):
        (WebKit::RemoteSourceBufferProxy::updateTrackIds):
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.cpp:
        (WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::fetchDiskCacheEntries):
        * NetworkProcess/Notifications/NetworkNotificationManager.cpp:
        (WebKit::NetworkNotificationManager::getOriginsWithPushAndNotificationPermissions):
        * NetworkProcess/WebStorage/StorageManager.cpp:
        (WebKit::StorageManager::allStorageAreaIdentifiers const):
        * NetworkProcess/WebStorage/TransientLocalStorageNamespace.cpp:
        (WebKit::TransientLocalStorageNamespace::origins const):
        (WebKit::TransientLocalStorageNamespace::storageAreaIdentifiers const):
        * NetworkProcess/cache/CacheStorageEngineCache.cpp:
        (WebKit::CacheStorage::Cache::finishOpening):
        (WebKit::CacheStorage::Cache::keys const):
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        * Platform/IPC/ArgumentCoders.h:
        * Shared/ApplePay/WebPaymentCoordinatorProxy.cpp:
        (WebKit::WebPaymentCoordinatorProxy::showPaymentUI):
        * UIProcess/API/APINavigation.cpp:
        (API::Navigation::Navigation):
        (API::m_clientNavigationActivity):
        * UIProcess/Cocoa/WKShareSheet.mm:
        (appendFilesAsShareableURLs):
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::restoreAppHighlightsAndScrollToIndex):
        * UIProcess/FrameLoadState.cpp:
        (WebKit::FrameLoadState::didFinishLoad):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/UserContent/WebUserContentControllerProxy.cpp:
        (WebKit::WebUserContentControllerProxy::parameters const):
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::startDiscovery):
        * UIProcess/WebBackForwardList.cpp:
        (WebKit::WebBackForwardList::removeAllItems):
        (WebKit::WebBackForwardList::clear):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::initializeNewWebProcess):
        (WebKit::WebProcessPool::removeProcessFromOriginCacheSet):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::fetchDataAndApply):
        (WebKit::WebsiteDataStore::removeData):
        * UIProcess/ios/TextCheckerIOS.mm:
        (WebKit::TextChecker::checkTextOfParagraph):
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant presentationRectForElementUsingClosestIndicatedRect]):
        * UIProcess/mac/TextCheckerMac.mm:
        (WebKit::TextChecker::checkTextOfParagraph):
        * WebProcess/ApplePay/WebPaymentCoordinator.cpp:
        (WebKit::WebPaymentCoordinator::showPaymentUI):
        * WebProcess/Automation/WebAutomationSessionProxy.cpp:
        (WebKit::WebAutomationSessionProxy::setFilesForInputFileUpload):
        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:
        (WebKit::RemoteMediaPlayerManager::createRemoteMediaPlayer):
        * WebProcess/GPU/media/SourceBufferPrivateRemote.cpp:
        (WebKit::SourceBufferPrivateRemote::updateTrackIds):
        (WebKit::SourceBufferPrivateRemote::sourceBufferPrivateDidReceiveInitializationSegment):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::createEncoder):
        * WebProcess/InjectedBundle/API/c/WKBundlePageOverlay.cpp:
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFrameState):
        * WebProcess/WebCoreSupport/WebDeviceOrientationUpdateProvider.cpp:
        (WebKit::WebDeviceOrientationUpdateProvider::deviceOrientationChanged):
        (WebKit::WebDeviceOrientationUpdateProvider::deviceMotionChanged):
        * WebProcess/WebCoreSupport/WebPasteboardOverrides.cpp:
        (WebKit::WebPasteboardOverrides::overriddenTypes):
        * WebProcess/WebCoreSupport/WebSpeechSynthesisClient.cpp:
        (WebKit::WebSpeechSynthesisClient::voiceList):
        * WebProcess/WebPage/FindController.cpp:
        (WebKit::FindController::findStringMatches):
        * WebProcess/WebPage/WebFoundTextRangeController.cpp:
        (WebKit::WebFoundTextRangeController::drawRect):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::consumeSandboxExtensions):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::handleSelectionServiceClick):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::fetchWebsiteData):

2022-02-22  Alex Christensen  <achristensen@webkit.org>

        Fix GPUP WebGL generator script wrt uninitialised sized span
        https://bugs.webkit.org/show_bug.cgi?id=235889
        <rdar://problem/88567612>

        Reviewed by Chris Dumez.

        Even though we check if the synchronous message was received successfully before using it,
        if we didn't check then we might have a problem with pointing to uninitialized memory, which we then wouldn't use for anything.
        To fix this hypothetical problem, I start out by pointing to initialized memory.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat):

2022-02-22  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Fix lifetime issue on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237018
        rdar://89206950

        Reviewed by Brent Fulgham.

        Lifetime issues introduced in a recent refactor of performRequest were causing
        replies from WebAuthenticatorCoordinatorProxy_MakeCredentialReply not to make it
        back to the web content process. This patch fixes these, allowing requests to proceed.

        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::continueAfterRequest):
        (WebKit::WebAuthenticatorCoordinatorProxy::performRequest): Deleted.
        (WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable): Deleted.
        (WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable): Deleted.
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.h:

2022-02-22  Brent Fulgham  <bfulgham@apple.com>

        Remove an unneeded IOKit property
        https://bugs.webkit.org/show_bug.cgi?id=236867
        <rdar://47695155>

        Reviewed by Per Arne Vollan.

        The relevant frameworks that used the IOPlatformUUID IOKit
        property have been updated to no longer refer to it. We can
        now safely remove it.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-02-22  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Adopt new _UITextSearching method for range comparison
        https://bugs.webkit.org/show_bug.cgi?id=237012
        rdar://88442811

        Reviewed by Devin Rousso.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView offsetFromPosition:toPosition:inDocument:]):

        Mark deprecation.

        (-[WKWebView compareFoundRange:toRange:inDocument:]):
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView compareFoundRange:toRange:inDocument:]):

        Implement the new comparison method using existing offset computation logic.

2022-02-22  Alexander Kanavin  <alex@linutronix.de>

        When building introspection files, add CMAKE_C_FLAGS to the compiler flags.
        https://bugs.webkit.org/show_bug.cgi?id=232936

        Reviewed by Michael Catanzaro.

        g-ir-compiler is using a C compiler internally, so it needs to set
        the proper flags for it.

        * PlatformGTK.cmake:

2022-02-22  Youenn Fablet  <youenn@apple.com>

        http/wpt/mediarecorder/mute-tracks.html fails with WebRTCRemoteVideoFrameEnabled=true
        https://bugs.webkit.org/show_bug.cgi?id=237021

        Reviewed by Kimmo Kinnunen.

        We were previously creating the black frame but still sending the remote read reference.
        On GPUProcess side, we were then encoding the real frame instead of the black/muted frame.
        Add a specific muted code path to fix the issue.

        Covered by updated test.

        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        (WebKit::MediaRecorderPrivate::videoSampleAvailable):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameReader::read):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Rename RenderStyle::userSelectIncludingInert to RenderStyle::effectiveUserSelect
        https://bugs.webkit.org/show_bug.cgi?id=237033

        Reviewed by Antti Koivisto.

        This naming is consistent with other properties (effectiveDisplay/Appearance/PointerEvents/etc.).

        * WebProcess/InjectedBundle/DOM/InjectedBundleNodeHandle.cpp:
        (WebKit::InjectedBundleNodeHandle::isSelectableTextNode const):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::selectionPositionInformation):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings
        https://bugs.webkit.org/show_bug.cgi?id=236989

        Reviewed by Youenn Fablet.

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings, since RuntimeEnabledFeatures is deprecated.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _serviceWorkersEnabled:]):
        * WebProcess/Storage/WebServiceWorkerProvider.cpp:
        (WebKit::WebServiceWorkerProvider::serviceWorkerConnection):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updateThrottleState):
        (WebKit::WebPage::updatePreferences):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events
        https://bugs.webkit.org/show_bug.cgi?id=236985

        Reviewed by Darin Adler.

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events,
        by keeping track of window objects interested in storage events. A Window object is interested
        in storage events if both of the following conditions is true:
        1. It has a Storage object (either localStorage or sessionStorage)
        2. It has a storage event listener registered.

        This patch also refactors the code so that we share more logic between WebKit1 and WebKit2.

        * WebProcess/WebStorage/StorageAreaImpl.cpp:
        (WebKit::StorageAreaImpl::setItem):
        (WebKit::StorageAreaImpl::removeItem):
        (WebKit::StorageAreaImpl::clear):
        * WebProcess/WebStorage/StorageAreaImpl.h:
        * WebProcess/WebStorage/StorageAreaMap.cpp:
        (WebKit::StorageAreaMap::setItem):
        (WebKit::StorageAreaMap::removeItem):
        (WebKit::StorageAreaMap::clear):
        (WebKit::StorageAreaMap::dispatchSessionStorageEvent):
        (WebKit::StorageAreaMap::dispatchLocalStorageEvent):
        (WebKit::framesForEventDispatching): Deleted.
        * WebProcess/WebStorage/StorageAreaMap.h:

2022-02-22  Kate Cheney  <katherine_cheney@apple.com>

        NSSharingServicePicker gets deallocated when using the standard share menu item
        https://bugs.webkit.org/show_bug.cgi?id=236998
        <rdar://problem/89174827>

        Reviewed by Wenson Hsieh.

        The NSMenuItem should keep the NSSharingServicePicker alive.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::getShareMenuItem):

2022-02-22  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Suspend web process after some time in the process cache
        https://bugs.webkit.org/show_bug.cgi?id=236971

        Reviewed by Michael Catanzaro.

        Implement platformSuspendProcess() and platformResumeProcess() for GTK and WPE ports.

        * UIProcess/WebProcessCache.cpp:
        (WebKit::WebProcessCache::addProcess):
        (WebKit::WebProcessCache::CachedProcess::CachedProcess):
        (WebKit::WebProcessCache::CachedProcess::~CachedProcess):
        (WebKit::WebProcessCache::CachedProcess::takeProcess):
        * UIProcess/WebProcessCache.h:
        * UIProcess/WebProcessProxy.h:
        * UIProcess/glib/WebProcessProxyGLib.cpp:
        (WebKit::WebProcessProxy::platformSuspendProcess):
        (WebKit::WebProcessProxy::platformResumeProcess):

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Allow adattributiond to start on iOS devices
        https://bugs.webkit.org/show_bug.cgi?id=237009
        <rdar://89062166>

        Reviewed by Per Arne Vollan.

        There were three more problems preventing it from starting:
        1. The code signature said to look for a sandbox profile with "webkit" in the name, but the profile had "WebKit" in the name.
           These names are case sensitive.
        2. The sandbox profile would not let it load the WebKit framework, so dyld would fail and the process would fail to launch.
           I added the framework directories that the XPC services are allowed to access.
        3. Once it started, it would crash inside WTF::initializeMainThread when calling WTF::pageSize which requires access to the hw.pagesize_compat syscall.
           As a starting point, I'm going to allow all the syscalls that the network process currently has access to,
           which is enough to get it to respond without crashing.
        4. We need access to com.apple.diagnosticd and com.apple.analyticsd in order to be able to generate crash reports.  This is quite useful.
        Yes, I know I said there were only three problems, but the 4th is so useful I thought I'd put it in the list.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:
        * Scripts/process-entitlements.sh:

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Improve const correctness for SecurityOrigin accessors
        https://bugs.webkit.org/show_bug.cgi?id=236983

        Reviewed by Chris Dumez.

        * UIProcess/Notifications/WebNotification.h:
        (WebKit::WebNotification::origin const):
        (WebKit::WebNotification::origin):

2022-02-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Adjust some behaviors around the "Markup Image" action in the callout bar
        https://bugs.webkit.org/show_bug.cgi?id=236980

        Reviewed by Aditya Keerthi.

        Adjust the following behaviors around the "Markup Image" callout bar item on iOS:
        1.  The item should be present as long as the selection range contains a single image item (not only if the
            selection range exactly encompasses a single image element.
        2.  The item should appear in the callout bar before other WebKit-client-provided menu controller items.

        This patch also adds a new API test to exercise these behaviors and, in doing so, also refactors logic around
        determining whether or not to show this item so that it's dependent on a WebKit internal feature instead of just
        the system feature flag (with the default value of the internal feature being equal to whether or not the system
        feature is enabled). This means we can run tests for these features without requiring the system feature flag to
        be enabled.

        See below for more details.

        Test: ImageAnalysisTests.MenuControllerItems

        * Platform/cocoa/TextRecognitionUtilities.mm:
        (WebKit::makeTextRecognitionResult):

        Drive-by fix for some API tests: only attempt to send the platform image analysis result over IPC if it is a
        `VKCImageAnalysis`. In some API tests, we use mock objects here instead, which currently causes the IPC message
        send to fail due to encoding failure.

        * Shared/Cocoa/WebPreferencesDefaultValuesCocoa.mm:
        (WebKit::defaultImageAnalysisMarkupEnabled):
        * Shared/WebPreferencesDefaultValues.h:

        Make the new internal feature flag default to the system feature flag.

        * UIProcess/ios/WKActionSheetAssistant.h:
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant defaultActionsForLinkSheet:]):
        (-[WKActionSheetAssistant defaultActionsForImageSheet:]):

        Consult a new delegate method (`-actionSheetAssistantShouldIncludeCopyCroppedImageAction:`) instead of checking
        the system feature flag directly.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView updateImageAnalysisMarkupMenuItems:]):

        Append the "Markup Image" item at the start of the list of additional menu items.

        (-[WKContentView canPerformImageAnalysisMarkup]):

        Check the internal feature instead of the system feature flag.

        (-[WKContentView performImageAnalysisMarkup:]):

        Now that this action can be triggered even when the current selection doens't encompass only a single image, we
        need to use `replaceWithPasteboardData()` instead, passing in the element context of the image element we want
        to replace.

        (-[WKContentView actionSheetAssistantShouldIncludeCopyCroppedImageAction:]):

        Only attempt to show the new items if the internal feature is enabled. Consulted by `WKActionSheetAssistant`
        above.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::setupServicesMenu):

        Check the internal feature instead of the system feature flag.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::getPlatformEditorState const):

        Make a minor adjustment here to bail early only if we find multiple image elements in the selected range,
        rather than bailing if we find anything that's not an image element.

2022-02-21  Alexander Kanavin  <alex@linutronix.de>

        Fix racy parallel build of WebKit2-4.0.gir
        https://bugs.webkit.org/show_bug.cgi?id=232935

        Reviewed by Michael Catanzaro.

        This is a target and not a command because it's used to build another .gir
        and a .typelib, which would trigger two racy parallel builds when using command
        (e.g. command would run twice, target runs only once).

        * PlatformGTK.cmake:

2022-02-21  Myles C. Maxfield  <mmaxfield@apple.com>

        Sort WebCore and WebKit Xcode project files
        https://bugs.webkit.org/show_bug.cgi?id=237010

        Unreviewed.

        * WebKit.xcodeproj/project.pbxproj:

2022-02-21  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Fix the internal build after rdar://88354008
        https://bugs.webkit.org/show_bug.cgi?id=236999

        Unreviewed build fix.

        Mark deprecated implementations.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        * UIProcess/ios/WKContentViewInteraction.mm:

== Rolled over to ChangeLog-2022-02-22 ==
