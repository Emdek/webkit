2022-02-24  Chris Dumez  <cdumez@apple.com>

        Regression(r273929) FrameState no longer gets a move constructor
        https://bugs.webkit.org/show_bug.cgi?id=237142

        Reviewed by Darin Adler.

        FrameState no longer gets an implicit move constructor since r273929 because a custom
        destructor was added.

        * Shared/SessionState.h:

2022-02-24  Kate Cheney  <katherine_cheney@apple.com>

        Update CSP console logging
        https://bugs.webkit.org/show_bug.cgi?id=232216
        <rdar://problem/89322580>

        Reviewed by Brent Fulgham.

        * NetworkProcess/NetworkLoadChecker.cpp:
        (WebKit::NetworkLoadChecker::check):
        (WebKit::NetworkLoadChecker::checkRedirection):
        (WebKit::NetworkLoadChecker::checkRequest):
        (WebKit::NetworkLoadChecker::isAllowedByContentSecurityPolicy):
        * NetworkProcess/NetworkLoadChecker.h:

2022-02-24  Devin Rousso  <drousso@apple.com>

        [MacCatalyst] REGRESSION(r290091): sometimes can crash if `WKWebView` is deallocated before the next visible content rect update
        https://bugs.webkit.org/show_bug.cgi?id=237126
        <rdar://problem/89345853>

        Reviewed by Tim Horton.

        Tests: WKWebViewResize.DoesNotAssertInDeallocAfterChangingFrame
               WKWebViewResize.DoesNotAssertInDeallocAfterChangingBounds

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _acquireResizeAssertionForReason:]):
        (-[WKWebView _invalidateResizeAssertions]): Added.
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView dealloc]):
        Make sure to `-invalidate` any remaining assertions in `-dealloc` as required by `_UIInvalidatable`.

2022-02-24  Devin Rousso  <drousso@apple.com>

        [Apple Pay] switch from `PassKit/*` to `PassKit[Core,UI]/*`
        https://bugs.webkit.org/show_bug.cgi?id=237091
        <rdar://problem/81085862>

        Reviewed by Tim Horton.

        * Platform/cocoa/PaymentAuthorizationPresenter.mm:
        (WebKit::toNSError):
        * Platform/cocoa/WKPaymentAuthorizationDelegate.mm:
        (-[WKPaymentAuthorizationDelegate _willFinishWithError:]):
        * Shared/ApplePay/cocoa/WebPaymentCoordinatorProxyCocoa.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard):
        (WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup):
        (WebKit::toPKContactFields):
        * Shared/ApplePay/mac/WebPaymentCoordinatorProxyMac.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments):
        (WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI):
        * WebProcess/ApplePay/cocoa/WebPaymentCoordinatorCocoa.mm:
        (WebKit::WebPaymentCoordinator::platformAvailablePaymentNetworks):

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        LibWebRTCCodecs, -Proxy create and communicate the RemoteVideoFrameProxy incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=237083

        Reviewed by Youenn Fablet.
        LibWebRTCCodecsProxy should not call RemoteVideoFrameObjectHeap::createVideoFrame,
        the function should be removed. Instead, LibWebRTCCodecsProxy should construct a
        write reference to insert the media sample -> remote proxy mapping. Then
        the result of the insert, a new reference, should be sent as part of the
        RemoteVideoFrameProxy::Properties to the WP. This way the sent reference is
        constructed as expected. Previously the reference was correct but matched just
        by selecting the constants currently used (0). This works towards being able
        to remove RemoteVideoFrameObjectHeap::createVideoFrame.

        Split the completedDecoding to two:
        - completedDecoding used to send new RemoteVideoFrames
        - completedDecodingCV to send CoreVideo specific RemoteVideoSample instances (which will
          removed eventually).

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::Function<void):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::completedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.messages.in:

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        Thread safety analysis to assert "code is run sequentially" is not useful when code is mainly run with WorkQueues
        https://bugs.webkit.org/show_bug.cgi?id=236832

        Reviewed by Antti Koivisto.

        Assert directly that the work queues are current instead of using ThreadAssertion.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL):
        (WebKit::RemoteGraphicsContextGL::displayWasReconfigured):
        (WebKit::RemoteGraphicsContextGL::workQueueInitialize):
        (WebKit::RemoteGraphicsContextGL::workQueueUninitialize):
        (WebKit::RemoteGraphicsContextGL::didComposite):
        (WebKit::RemoteGraphicsContextGL::forceContextLost):
        (WebKit::RemoteGraphicsContextGL::dispatchContextChangedNotification):
        (WebKit::RemoteGraphicsContextGL::reshape):
        (WebKit::RemoteGraphicsContextGL::prepareForDisplay):
        (WebKit::RemoteGraphicsContextGL::synthesizeGLError):
        (WebKit::RemoteGraphicsContextGL::getError):
        (WebKit::RemoteGraphicsContextGL::ensureExtensionEnabled):
        (WebKit::RemoteGraphicsContextGL::markContextChanged):
        (WebKit::RemoteGraphicsContextGL::paintRenderingResultsToCanvasWithQualifiedIdentifier):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToCanvasWithQualifiedIdentifier):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToMediaSample):
        (WebKit::RemoteGraphicsContextGL::paintPixelBufferToImageBuffer):
        (WebKit::RemoteGraphicsContextGL::simulateEventForTesting):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        (WebKit::RemoteGraphicsContextGL::workQueue const):
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        (WebKit::RemoteGraphicsContextGL::copyTextureFromVideoFrame):
        (WebKit::RemoteGraphicsContextGLCocoa::platformWorkQueueInitialize):
        (WebKit::RemoteGraphicsContextGLCocoa::prepareForDisplay):
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (moveErrorsToSyntheticErrorList):
        (activeTexture):
        (attachShader):
        (bindAttribLocation):
        (bindBuffer):
        (bindFramebuffer):
        (bindRenderbuffer):
        (bindTexture):
        (blendColor):
        (blendEquation):
        (blendEquationSeparate):
        (blendFunc):
        (blendFuncSeparate):
        (checkFramebufferStatus):
        (clear):
        (clearColor):
        (clearDepth):
        (clearStencil):
        (colorMask):
        (compileShader):
        (copyTexImage2D):
        (copyTexSubImage2D):
        (createBuffer):
        (createFramebuffer):
        (createProgram):
        (createRenderbuffer):
        (createShader):
        (createTexture):
        (cullFace):
        (deleteBuffer):
        (deleteFramebuffer):
        (deleteProgram):
        (deleteRenderbuffer):
        (deleteShader):
        (deleteTexture):
        (depthFunc):
        (depthMask):
        (depthRange):
        (detachShader):
        (disable):
        (disableVertexAttribArray):
        (drawArrays):
        (drawElements):
        (enable):
        (enableVertexAttribArray):
        (finish):
        (flush):
        (framebufferRenderbuffer):
        (framebufferTexture2D):
        (frontFace):
        (generateMipmap):
        (getActiveAttrib):
        (getActiveUniform):
        (getAttribLocation):
        (getBufferParameteri):
        (getString):
        (getFloatv):
        (getIntegerv):
        (getInteger64):
        (getInteger64i):
        (getProgrami):
        (getBooleanv):
        (getFramebufferAttachmentParameteri):
        (getProgramInfoLog):
        (getRenderbufferParameteri):
        (getShaderi):
        (getShaderInfoLog):
        (getShaderPrecisionFormat):
        (getShaderSource):
        (getTexParameterf):
        (getTexParameteri):
        (getUniformfv):
        (getUniformiv):
        (getUniformuiv):
        (getUniformLocation):
        (getVertexAttribOffset):
        (hint):
        (isBuffer):
        (isEnabled):
        (isFramebuffer):
        (isProgram):
        (isRenderbuffer):
        (isShader):
        (isTexture):
        (lineWidth):
        (linkProgram):
        (pixelStorei):
        (polygonOffset):
        (renderbufferStorage):
        (sampleCoverage):
        (scissor):
        (shaderSource):
        (stencilFunc):
        (stencilFuncSeparate):
        (stencilMask):
        (stencilMaskSeparate):
        (stencilOp):
        (stencilOpSeparate):
        (texParameterf):
        (texParameteri):
        (uniform1f):
        (uniform1fv):
        (uniform1i):
        (uniform1iv):
        (uniform2f):
        (uniform2fv):
        (uniform2i):
        (uniform2iv):
        (uniform3f):
        (uniform3fv):
        (uniform3i):
        (uniform3iv):
        (uniform4f):
        (uniform4fv):
        (uniform4i):
        (uniform4iv):
        (uniformMatrix2fv):
        (uniformMatrix3fv):
        (uniformMatrix4fv):
        (useProgram):
        (validateProgram):
        (vertexAttrib1f):
        (vertexAttrib1fv):
        (vertexAttrib2f):
        (vertexAttrib2fv):
        (vertexAttrib3f):
        (vertexAttrib3fv):
        (vertexAttrib4f):
        (vertexAttrib4fv):
        (vertexAttribPointer):
        (viewport):
        (bufferData0):
        (bufferData1):
        (bufferSubData):
        (readnPixels0):
        (readnPixels1):
        (texImage2D0):
        (texImage2D1):
        (texSubImage2D0):
        (texSubImage2D1):
        (compressedTexImage2D0):
        (compressedTexImage2D1):
        (compressedTexSubImage2D0):
        (compressedTexSubImage2D1):
        (drawArraysInstanced):
        (drawElementsInstanced):
        (vertexAttribDivisor):
        (createVertexArray):
        (deleteVertexArray):
        (isVertexArray):
        (bindVertexArray):
        (copyBufferSubData):
        (getBufferSubData):
        (blitFramebuffer):
        (framebufferTextureLayer):
        (invalidateFramebuffer):
        (invalidateSubFramebuffer):
        (readBuffer):
        (renderbufferStorageMultisample):
        (texStorage2D):
        (texStorage3D):
        (texImage3D0):
        (texImage3D1):
        (texSubImage3D0):
        (texSubImage3D1):
        (copyTexSubImage3D):
        (compressedTexImage3D0):
        (compressedTexImage3D1):
        (compressedTexSubImage3D0):
        (compressedTexSubImage3D1):
        (getFragDataLocation):
        (uniform1ui):
        (uniform2ui):
        (uniform3ui):
        (uniform4ui):
        (uniform1uiv):
        (uniform2uiv):
        (uniform3uiv):
        (uniform4uiv):
        (uniformMatrix2x3fv):
        (uniformMatrix3x2fv):
        (uniformMatrix2x4fv):
        (uniformMatrix4x2fv):
        (uniformMatrix3x4fv):
        (uniformMatrix4x3fv):
        (vertexAttribI4i):
        (vertexAttribI4iv):
        (vertexAttribI4ui):
        (vertexAttribI4uiv):
        (vertexAttribIPointer):
        (drawRangeElements):
        (drawBuffers):
        (clearBufferiv):
        (clearBufferuiv):
        (clearBufferfv):
        (clearBufferfi):
        (createQuery):
        (deleteQuery):
        (isQuery):
        (beginQuery):
        (endQuery):
        (getQuery):
        (getQueryObjectui):
        (createSampler):
        (deleteSampler):
        (isSampler):
        (bindSampler):
        (samplerParameteri):
        (samplerParameterf):
        (getSamplerParameterf):
        (getSamplerParameteri):
        (fenceSync):
        (isSync):
        (deleteSync):
        (clientWaitSync):
        (waitSync):
        (getSynci):
        (createTransformFeedback):
        (deleteTransformFeedback):
        (isTransformFeedback):
        (bindTransformFeedback):
        (beginTransformFeedback):
        (endTransformFeedback):
        (transformFeedbackVaryings):
        (getTransformFeedbackVarying):
        (pauseTransformFeedback):
        (resumeTransformFeedback):
        (bindBufferBase):
        (bindBufferRange):
        (getUniformIndices):
        (getActiveUniforms):
        (getUniformBlockIndex):
        (getActiveUniformBlockName):
        (uniformBlockBinding):
        (getActiveUniformBlockiv):
        (getGraphicsResetStatusARB):
        (getTranslatedShaderSourceANGLE):
        (drawBuffersEXT):
        (getInternalformativ):
        (multiDrawArraysANGLE):
        (multiDrawArraysInstancedANGLE):
        (multiDrawElementsANGLE):
        (multiDrawElementsInstancedANGLE):
        (paintRenderingResultsToPixelBuffer):
        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::RemoteGPU):
        (WebKit::RemoteGPU::initialize):
        (WebKit::RemoteGPU::stopListeningForIPC):
        (WebKit::RemoteGPU::workQueueInitialize):
        (WebKit::RemoteGPU::workQueueUninitialize):
        (WebKit::RemoteGPU::requestAdapter):
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::stopListeningForIPC):
        (WebKit::RemoteVideoFrameObjectHeap::releaseVideoFrame):
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * Platform/IPC/StreamConnectionWorkQueue.cpp:
        (IPC::StreamConnectionWorkQueue::assertIsCurrent const):
        * Platform/IPC/StreamConnectionWorkQueue.h:
        (IPC::WTF_ASSERTS_ACQUIRED_CAPABILITY):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r290175): Texture upload from video and user media is slower than expected for non-GPUP WebGL
        https://bugs.webkit.org/show_bug.cgi?id=237034

        Reviewed by Youenn Fablet.

        Add back the code-path to obtain the IOSurface backed CVPixelBuffers directly
        via IPC transfer. This is used on macOS where WebGL is in WP.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::pixelBuffer):
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.messages.in:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        (WebKit::RemoteVideoFrameProxy::pixelBuffer const):
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:

2022-02-23  Don Olmstead  <don.olmstead@sony.com>

        Fix !ENABLE(SERVICE_WORKER) build after r290387
        https://bugs.webkit.org/show_bug.cgi?id=237119

        Unreviewed build fix.

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess):

2022-02-23  Maxim Cournoyer  <maxim.cournoyer@gmail.com>

        [WPE][GTK] Paths should be canonicalized before calling bwrap
        https://bugs.webkit.org/show_bug.cgi?id=211131

        Reviewed by Michael Catanzaro.

        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindSymlinksRealPath): Relocate earlier in file,
        add a 'bindOption' argument and use FileSystem::realPath instead
        of realpath from the standard C library.
        (WebKit::bindIfExists): Use the modified above procedure to
        canonicalize the source path, and avoid adding bind mounts for
        locations under /etc.

2022-02-23  Liliana Marie Prikler <liliana.prikler@gmail.com>

        Bubblewrap launcher doesn't bind font locations from XDG_DATA_DIRS
        https://bugs.webkit.org/show_bug.cgi?id=237089

        Reviewed by Michael Catanzaro.

        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindFonts): Expose font directories present in the
        XDG_DATA_DIRS environment variable.

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Adopt more widely the new URL constructor that takes in a String
        https://bugs.webkit.org/show_bug.cgi?id=237099

        Reviewed by Darin Adler.

        * NetworkProcess/Classifier/ResourceLoadStatisticsStore.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:task:didReceiveChallenge:completionHandler:]):
        * Shared/API/APISecurityOrigin.h:
        (API::SecurityOrigin::createFromString):
        * Shared/API/APIURL.h:
        (API::URL::parseURLIfNecessary const):
        * Shared/API/c/WKURLRequest.cpp:
        (WKURLRequestCreateWithWKURL):
        * Shared/API/glib/WebKitURIRequest.cpp:
        (webkit_uri_request_set_uri):
        * Shared/APIWebArchiveResource.mm:
        (API::WebArchiveResource::WebArchiveResource):
        * Shared/ApplePay/WebPaymentCoordinatorProxy.cpp:
        (WebKit::WebPaymentCoordinatorProxy::showPaymentUI):
        * Shared/curl/WebCoreArgumentCodersCurl.cpp:
        (IPC::ArgumentCoder<ResourceError>::decodePlatformData):
        * Shared/gtk/ArgumentCodersGtk.cpp:
        (IPC::ArgumentCoder<SelectionData>::decode):
        * Shared/soup/WebCoreArgumentCodersSoup.cpp:
        (IPC::ArgumentCoder<ResourceError>::decodePlatformData):
        * UIProcess/API/C/WKOpenPanelResultListener.cpp:
        (filePathsFromFileURLs):
        * UIProcess/API/C/WKPage.cpp:
        (WKPageLoadURL):
        (WKPageLoadURLWithShouldOpenExternalURLsPolicy):
        (WKPageLoadURLWithUserData):
        (WKPageLoadAlternateHTMLStringWithUserData):
        (WKPageSetPrivateClickMeasurementTokenPublicKeyURLForTesting):
        (WKPageSetPrivateClickMeasurementTokenSignatureURLForTesting):
        (WKPageSetPrivateClickMeasurementAttributionReportURLsForTesting):
        * UIProcess/API/C/WKPageGroup.cpp:
        (WKPageGroupAddUserStyleSheet):
        (WKPageGroupAddUserScript):
        * UIProcess/API/C/WKWebsiteDataStoreRef.cpp:
        (WKWebsiteDataStoreSetResourceLoadStatisticsPrevalentResourceForDebugMode):
        (WKWebsiteDataStoreSetStatisticsLastSeen):
        (WKWebsiteDataStoreSetStatisticsMergeStatistic):
        (WKWebsiteDataStoreSetStatisticsExpiredStatistic):
        (WKWebsiteDataStoreSetStatisticsPrevalentResource):
        (WKWebsiteDataStoreSetStatisticsVeryPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsVeryPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsSubresourceUnder):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsSubFrameUnder):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsRedirectingTo):
        (WKWebsiteDataStoreSetStatisticsHasHadUserInteraction):
        (WKWebsiteDataStoreIsStatisticsHasHadUserInteraction):
        (WKWebsiteDataStoreIsStatisticsOnlyInDatabaseOnce):
        (WKWebsiteDataStoreSetStatisticsGrandfathered):
        (WKWebsiteDataStoreIsStatisticsGrandfathered):
        (WKWebsiteDataStoreSetStatisticsSubframeUnderTopFrameOrigin):
        (WKWebsiteDataStoreSetStatisticsSubresourceUnderTopFrameOrigin):
        (WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectTo):
        (WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectFrom):
        (WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectTo):
        (WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectFrom):
        (WKWebsiteDataStoreSetStatisticsCrossSiteLoadWithLinkDecoration):
        (WKWebsiteDataStoreStatisticsDeleteCookiesForTesting):
        (WKWebsiteDataStoreStatisticsHasLocalStorage):
        (WKWebsiteDataStoreStatisticsHasIsolatedSession):
        (WKWebsiteDataStoreSetResourceLoadStatisticsToSameSiteStrictCookiesForTesting):
        (WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting):
        (WKWebsiteDataStoreSetResourceLoadStatisticsThirdPartyCNAMEDomainForTesting):
        (WKWebsiteDataStoreSetAppBoundDomainsForTesting):
        * UIProcess/API/C/curl/WKWebsiteDataStoreRefCurl.cpp:
        (WKWebsiteDataStoreEnableCustomNetworkProxySettings):
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        * UIProcess/API/glib/WebKitCookieManager.cpp:
        (webkit_cookie_manager_get_cookies):
        * UIProcess/API/glib/WebKitSecurityOrigin.cpp:
        (webkit_security_origin_new_for_uri):
        * UIProcess/API/glib/WebKitWebView.cpp:
        (webkit_web_view_load_alternate_html):
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _uiEventAttribution]):
        * UIProcess/Automation/WebAutomationSession.cpp:
        (WebKit::WebAutomationSession::navigateBrowsingContext):
        (WebKit::WebAutomationSession::addSingleCookie):
        (WebKit::WebAutomationSession::deleteAllCookies):
        * UIProcess/Cocoa/LegacyDownloadClient.mm:
        (WebKit::LegacyDownloadClient::legacyDidStart):
        * UIProcess/Cocoa/NavigationState.mm:
        (WebKit::NavigationState::NavigationClient::willPerformClientRedirect):
        (WebKit::NavigationState::NavigationClient::didPerformClientRedirect):
        * UIProcess/Cocoa/WKReloadFrameErrorRecoveryAttempter.mm:
        (-[WKReloadFrameErrorRecoveryAttempter attemptRecovery]):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::isURLKnownHSTSHost const):
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.cpp:
        (WebKit::RemoteWebInspectorUIProxy::load):
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::isMainOrTestInspectorPage):
        (WebKit::WebInspectorUIProxy::openLocalInspectorFrontend):
        * UIProcess/Inspector/gtk/RemoteWebInspectorUIProxyGtk.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformSave):
        * UIProcess/Inspector/gtk/WebInspectorUIProxyGtk.cpp:
        (WebKit::WebInspectorUIProxy::platformSave):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::launchProcessForReload):
        (WebKit::WebPageProxy::loadFile):
        (WebKit::WebPageProxy::navigateToPDFLinkWithSimulatedClick):
        (WebKit::WebPageProxy::reload):
        (WebKit::WebPageProxy::goToBackForwardItem):
        (WebKit::WebPageProxy::receivedNavigationPolicyDecision):
        (WebKit::WebPageProxy::sessionState const):
        (WebKit::checkIfNavigationContainsDataTransfer):
        (WebKit::WebPageProxy::didCommitLoadForFrame):
        (WebKit::WebPageProxy::decidePolicyForNavigationAction):
        (WebKit::WebPageProxy::contextMenuItemSelected):
        (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::processForNavigationInternal):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::assumeReadAccessToBaseURL):
        (WebKit::WebProcessProxy::checkURLReceivedFromWebProcess):
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::platformSetNetworkParameters):
        (WebKit::WebsiteDataStore::initializeAppBoundDomains):
        * UIProcess/mac/LegacySessionStateCoding.cpp:
        (WebKit::decodeLegacySessionState):
        * WebProcess/ApplePay/WebPaymentCoordinator.cpp:
        (WebKit::WebPaymentCoordinator::validateMerchant):
        * WebProcess/InjectedBundle/API/c/WKBundleFrame.cpp:
        (WKBundleFrameAllowsFollowingLink):
        (WKBundleFrameCopySuggestedFilenameForResourceWithURL):
        (WKBundleFrameCopyMIMETypeForResourceWithURL):
        * WebProcess/InjectedBundle/API/c/WKBundlePage.cpp:
        (WKBundlePageHasLocalDataForURL):
        (WKBundlePageClearApplicationCacheForOrigin):
        (WKBundlePageGetAppCacheUsageForOrigin):
        * WebProcess/InjectedBundle/InjectedBundle.cpp:
        (WebKit::InjectedBundle::setUserStyleSheetLocation):
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        (WebKit::isValidFetch):
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFormData):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::loadData):
        (WebKit::WebPage::loadAlternateHTML):
        (WebKit::WebPage::getResourceDataFromFrame):
        * webpushd/PushService.mm:
        (WebPushD::PushService::didReceivePushMessage):

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Share more code between service and shared workers for context connection establishment
        https://bugs.webkit.org/show_bug.cgi?id=237085

        Reviewed by Youenn Fablet.

        Share more code between service and shared workers for context connection establishment.

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::ensureSWServer):
        * NetworkProcess/SharedWorker/WebSharedWorker.cpp:
        (WebKit::WebSharedWorker::firstSharedWorkerObjectProcess const):
        * NetworkProcess/SharedWorker/WebSharedWorker.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::didFinishFetchingSharedWorkerScript):
        (WebKit::WebSharedWorkerServer::createContextConnection):
        (WebKit::WebSharedWorkerServer::removeContextConnection):
        (WebKit::WebSharedWorkerServer::shutDownSharedWorker):
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::NetworkProcessProxy::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::NetworkProcessProxy::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::WebProcessPool::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        * UIProcess/WebProcessPool.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::establishRemoteWorkerContext):
        (WebKit::WebProcessProxy::establishServiceWorkerContext): Deleted.
        (WebKit::WebProcessProxy::establishSharedWorkerContext): Deleted.
        * UIProcess/WebProcessProxy.h:
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::WebProcess::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::WebProcess::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        * WebProcess/WebProcess.h:
        * WebProcess/WebProcess.messages.in:

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        Prevent use of PDFKit when using PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=237052
        rdar://89251696

        Reviewed by Tim Horton.

        PDFKit was still being used by embeds, this patch fixes that issue by treating
        pdf embeds as frames if PDF.js is enabled and also prevents the loading of
        the PDFKit plugin entirely by modifying shouldUsePDFPlugin.

        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::objectContentType):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::shouldUsePDFPlugin const):

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] userHandle not marked nullable in _WKWebAuthenticationAssertionResponse
        https://bugs.webkit.org/show_bug.cgi?id=237043
        rdar://89317740

        Reviewed by Brent Fulgham.

        The userHandle is a nullable field on UserEntity. This patch changes
        various API/SPI to allow passing null userHandle.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        Update forward declared SPI, reflecting userHandle as nullable.
        * UIProcess/API/Cocoa/_WKAuthenticatorAssertionResponseInternal.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationAssertionResponse.h:
        Update userHandle property to null.
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (getAllLocalAuthenticatorCredentialsImpl):
        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticatorInternal::getExistingCredentials):

2022-02-23  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] De-initialize GStreamer before terminating WebProcess
        https://bugs.webkit.org/show_bug.cgi?id=237084

        Reviewed by Carlos Garcia Campos.

        Allowing the leak tracer to report/log leaks. There is an issue though, if the UIProcess
        exits too early, the leak tracer reporting will be interrupted potentially too early. The
        workaround is to have 2 tabs open in the GTK MiniBrowser, closing the one where media
        handling and leak tracing was done and keeping the second tab open.

        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::stopRunLoop):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteSampleBufferDisplayLayer::enqueueSample should not change media samples owned by its object heap
        https://bugs.webkit.org/show_bug.cgi?id=237025
        <rdar://problem/89343447>

        Reviewed by Darin Adler.

        Updated https://commits.webkit.org/r290358 according comments given during review.

        * Platform/IPC/ArgumentCoders.h:
        (IPC::ArgumentCoder<std::nullptr_t>::encode):
        (IPC::ArgumentCoder<std::nullptr_t>::decode):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameWriter::write):
        (WebKit::SharedVideoFrameReader::SharedVideoFrameReader):
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:
        (WebKit::SharedVideoFrame::encode const):
        (WebKit::SharedVideoFrame::decode):

2022-02-23  Alex Christensen  <achristensen@webkit.org>

        Call WKNavigationDelegate.didFailProvisionalNavigation even after a cross-origin navigation with COOP
        https://bugs.webkit.org/show_bug.cgi?id=237071
        <rdar://88652375>

        Reviewed by Chris Dumez.

        There was an assumption that this callback wasn't needed in this case, but it is.
        Covered by an API test that verifies the callback is received.

        * UIProcess/ProvisionalPageProxy.cpp:
        (WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame):

2022-02-23  Zan Dobersek  <zdobersek@igalia.com>

        [GLib] Add missing WebPage.h inclusion in WebProcessGLib.cpp
        https://bugs.webkit.org/show_bug.cgi?id=237081

        Unreviewed, adding the WebPage.h header inclusion in WebProcessGLib.cpp
        to avoid incomplete-type errors for the WebPage class under a certain
        combination of unified sources.

        * WebProcess/glib/WebProcessGLib.cpp:

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteVideoFrameObjectHeap::getVideoFrameBuffer can use base class pixelBuffer accessor
        https://bugs.webkit.org/show_bug.cgi?id=237020

        Reviewed by Kimmo Kinnunen.

        Make use of pixelBuffer virtual method to simplify things.
        Add a missing early return in case of not found pixel buffer.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Fix GPUP WebGL generator script wrt uninitialised sized span
        https://bugs.webkit.org/show_bug.cgi?id=235889

        Reviewed by Antti Koivisto.

        Regenerated.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Thread safety analysis macros are confusing for non-Lock use-cases
        https://bugs.webkit.org/show_bug.cgi?id=237022

        Reviewed by Chris Dumez.

        Use WTF_GUARDED_BY_CAPABILITY instead of WTF_GUARDED_BY_LOCK
        for non-lock use-cases.

        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:

2022-02-23  Pablo Saavedra  <psaavedra@igalia.com>

        [GTK][WPE] PlatformDisplay::terminateEglDisplays() is never called
        https://bugs.webkit.org/show_bug.cgi?id=217655

        Stop the run loop for GTK and WPE to ensure a normal exit, since we need
        atexit handlers to be called to cleanup resources like EGL displays.

        Reviewed by Carlos Garcia Campos.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::AuxiliaryProcess::didClose):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeConnection):
        * WebProcess/WebProcess.h:
        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::stopRunLoop):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteSampleBufferDisplayLayer::enqueueSample should not change media samples owned by its object heap
        https://bugs.webkit.org/show_bug.cgi?id=237025

        Reviewed by Darin Adler.

        From past bugs, it is risky to change CMSampleBuffer dictionaries if they can be used on various threads (encoder, display layer...).
        Instead, we create a new MediaSample that is wrapping the same CVPixelBufferRef, on which can safely apply setAsDisplayImmediately.

        We introduce SharedVideoFrame as a replacement to RemoteVideoSample.
        We beef up SharedVideoFrameWriter and SharedVideoFrameReader to handle any MediaSample,
        with specific handling for remote frames, IOSurface frames or other in memory frames.
        We make use of SharedVideoFrame in SampleBufferDisplayLayer, which allows to unify enqueueSample and enqueueCV in one IPC message,
        which is easier to maintain.

        We update call sites that create SharedVideoFrameReader to either take nullptr or a object heap reference when they will need it in the future.

        Covered by existing tests.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.messages.in:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-02-23  Youenn Fablet  <youenn@apple.com>

        Optimize RemoteVideoFrame handling in WebProcess WebRTC pipeline
        https://bugs.webkit.org/show_bug.cgi?id=236970

        Reviewed by Eric Carlson.

        Fix bug in LibWebRTCCodecsProxy that would make use of shared video frame instead of remote video frame when a shared video frame is available.
        Use VideoFrame* as webrtc frame provider for encoding and decoding.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:

2022-02-22  Chris Dumez  <cdumez@apple.com>

        http/wpt/push-api/onpush-disabled.html fails
        https://bugs.webkit.org/show_bug.cgi?id=236874
        <rdar://problem/89176154>

        Reviewed by Youenn Fablet.

        Before running the test, we would construct a new WKWebView with the Push API setting disabled.
        We would then run the test, which would launch a service worker. Normally, we would expect the
        service worker to inherit the settings from the WKWebView. However, it was not reliably
        happening because the settings for the service worker are stored on the WebProcessPool and
        WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess() was selecting a
        random WebProcessPool object (the first one returned by processPools()).

        To address the issue, we now pass the ProcessIdentifier of the client that requested the
        service worker connection so that establishServiceWorkerContextConnectionToNetworkProcess() can
        now prioritize the WebProcessPool of that process. Also, as an optimization, we now prioritize
        this client process to run the service worker (assuming it is origin-clean).

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::ensureSWServer):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::establishServiceWorkerContextConnectionToNetworkProcess):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess):
        * UIProcess/WebProcessPool.h:

2022-02-22  Simon Fraser  <simon.fraser@apple.com>

        With DOM Rendering in GPU process, every display results in new IOSurface allocation
        https://bugs.webkit.org/show_bug.cgi?id=237063

        Reviewed by Tim Horton.

        We have to avoid ImageBufferRemoteIOSurfaceBackends in the web process from hanging on to
        an IOSurface MachSendRight (via ImageBufferBackendHandle) all the time, because doing so
        makes the IOSurface appear to be in-use, and therefore not eligible for swapping to,
        or making volatile. In particular, swapToValidFrontBuffer() would always think
        that the surfaces were in-use, resulting in permanent triple-buffering, and
        allocation of a new buffer on every swap.

        Fix by clearing the ImageBufferBackendHandles of all the buffers in the WP in
        RemoteRenderingBackendProxy::swapToValidFrontBuffer(), so that the GPUP can accurately
        gauge in-use-ness; we get back a handle to the new front buffer in the reply,
        and this is the only one we need to keep hold of, since it gets transferred to
        the UI process.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::markSurfaceNonVolatile):
        (WebKit::RemoteRenderingBackend::swapToValidFrontBuffer):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::display):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer):
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile):

2022-02-22  Simon Fraser  <simon.fraser@apple.com>

        Use non-inline messages for layer volatility-related IPC in RemoteRenderingBackend
        https://bugs.webkit.org/show_bug.cgi?id=237061

        Reviewed by Wenson Hsieh.

        There appears to be a rare issue where StreamClientConnection::sendSync() can hang sometimes,
        which makes it impossible to do an entire MotionMark run (rdar://89313626). So avoid this
        by making the MarkSurfaceNonVolatile and SwapToValidFrontBuffer use out-of-line encoding.

        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:

2022-02-22  Simon Lewis  <simon.lewis@apple.com>

        Further restrict received IPC boolean values to 0 or 1
        https://bugs.webkit.org/show_bug.cgi?id=236801
        rdar://85811396

        Reviewed by Chris Dumez.

        Return std::nullopt if a value larger than 1 is received.

        * Platform/IPC/ArgumentCoder.h:
        (IPC::ArgumentCoder<bool>::decode):

2022-02-22  Brent Fulgham  <bfulgham@apple.com>

        PingLoader is failing to call completion handler in error case
        https://bugs.webkit.org/show_bug.cgi?id=237062
        <rdar://50157253>

        Reviewed by Chris Dumez.

        The completion handler was not being called in the case of a PingLoad being redirected to
        a non-HTTP(S) scheme.

        * NetworkProcess/PingLoad.cpp:
        (WebKit::PingLoad::willPerformHTTPRedirection):

2022-02-22  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][WK2] animations/background-position.html is timing out
        https://bugs.webkit.org/show_bug.cgi?id=236630

        Reviewed by Don Olmstead.

        r289848 was a wrong fix causing some test failures. It called the
        force repaint completion handler too early if m_waitDidUpdate was
        true when the force repaint was requested. In such case, we should
        wait for two DidUpdate messages before calling the completion
        handler.

        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::forceRepaintAsync):
        (WebKit::DrawingAreaWC::didUpdate):
        * WebProcess/WebPage/wc/DrawingAreaWC.h:
        Added m_isForceRepaintCompletionHandlerDeferred flag.

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Clean up / optimize even more call sites constructing vectors
        https://bugs.webkit.org/show_bug.cgi?id=236852

        Reviewed by Darin Adler.

        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::outOfBandTrackSources):
        * GPUProcess/media/RemoteSourceBufferProxy.cpp:
        (WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidReceiveInitializationSegment):
        (WebKit::RemoteSourceBufferProxy::updateTrackIds):
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.cpp:
        (WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::fetchDiskCacheEntries):
        * NetworkProcess/Notifications/NetworkNotificationManager.cpp:
        (WebKit::NetworkNotificationManager::getOriginsWithPushAndNotificationPermissions):
        * NetworkProcess/WebStorage/StorageManager.cpp:
        (WebKit::StorageManager::allStorageAreaIdentifiers const):
        * NetworkProcess/WebStorage/TransientLocalStorageNamespace.cpp:
        (WebKit::TransientLocalStorageNamespace::origins const):
        (WebKit::TransientLocalStorageNamespace::storageAreaIdentifiers const):
        * NetworkProcess/cache/CacheStorageEngineCache.cpp:
        (WebKit::CacheStorage::Cache::finishOpening):
        (WebKit::CacheStorage::Cache::keys const):
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        * Platform/IPC/ArgumentCoders.h:
        * Shared/ApplePay/WebPaymentCoordinatorProxy.cpp:
        (WebKit::WebPaymentCoordinatorProxy::showPaymentUI):
        * UIProcess/API/APINavigation.cpp:
        (API::Navigation::Navigation):
        (API::m_clientNavigationActivity):
        * UIProcess/Cocoa/WKShareSheet.mm:
        (appendFilesAsShareableURLs):
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::restoreAppHighlightsAndScrollToIndex):
        * UIProcess/FrameLoadState.cpp:
        (WebKit::FrameLoadState::didFinishLoad):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/UserContent/WebUserContentControllerProxy.cpp:
        (WebKit::WebUserContentControllerProxy::parameters const):
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::startDiscovery):
        * UIProcess/WebBackForwardList.cpp:
        (WebKit::WebBackForwardList::removeAllItems):
        (WebKit::WebBackForwardList::clear):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::initializeNewWebProcess):
        (WebKit::WebProcessPool::removeProcessFromOriginCacheSet):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::fetchDataAndApply):
        (WebKit::WebsiteDataStore::removeData):
        * UIProcess/ios/TextCheckerIOS.mm:
        (WebKit::TextChecker::checkTextOfParagraph):
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant presentationRectForElementUsingClosestIndicatedRect]):
        * UIProcess/mac/TextCheckerMac.mm:
        (WebKit::TextChecker::checkTextOfParagraph):
        * WebProcess/ApplePay/WebPaymentCoordinator.cpp:
        (WebKit::WebPaymentCoordinator::showPaymentUI):
        * WebProcess/Automation/WebAutomationSessionProxy.cpp:
        (WebKit::WebAutomationSessionProxy::setFilesForInputFileUpload):
        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:
        (WebKit::RemoteMediaPlayerManager::createRemoteMediaPlayer):
        * WebProcess/GPU/media/SourceBufferPrivateRemote.cpp:
        (WebKit::SourceBufferPrivateRemote::updateTrackIds):
        (WebKit::SourceBufferPrivateRemote::sourceBufferPrivateDidReceiveInitializationSegment):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::createEncoder):
        * WebProcess/InjectedBundle/API/c/WKBundlePageOverlay.cpp:
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFrameState):
        * WebProcess/WebCoreSupport/WebDeviceOrientationUpdateProvider.cpp:
        (WebKit::WebDeviceOrientationUpdateProvider::deviceOrientationChanged):
        (WebKit::WebDeviceOrientationUpdateProvider::deviceMotionChanged):
        * WebProcess/WebCoreSupport/WebPasteboardOverrides.cpp:
        (WebKit::WebPasteboardOverrides::overriddenTypes):
        * WebProcess/WebCoreSupport/WebSpeechSynthesisClient.cpp:
        (WebKit::WebSpeechSynthesisClient::voiceList):
        * WebProcess/WebPage/FindController.cpp:
        (WebKit::FindController::findStringMatches):
        * WebProcess/WebPage/WebFoundTextRangeController.cpp:
        (WebKit::WebFoundTextRangeController::drawRect):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::consumeSandboxExtensions):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::handleSelectionServiceClick):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::fetchWebsiteData):

2022-02-22  Alex Christensen  <achristensen@webkit.org>

        Fix GPUP WebGL generator script wrt uninitialised sized span
        https://bugs.webkit.org/show_bug.cgi?id=235889
        <rdar://problem/88567612>

        Reviewed by Chris Dumez.

        Even though we check if the synchronous message was received successfully before using it,
        if we didn't check then we might have a problem with pointing to uninitialized memory, which we then wouldn't use for anything.
        To fix this hypothetical problem, I start out by pointing to initialized memory.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat):

2022-02-22  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Fix lifetime issue on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237018
        rdar://89206950

        Reviewed by Brent Fulgham.

        Lifetime issues introduced in a recent refactor of performRequest were causing
        replies from WebAuthenticatorCoordinatorProxy_MakeCredentialReply not to make it
        back to the web content process. This patch fixes these, allowing requests to proceed.

        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::continueAfterRequest):
        (WebKit::WebAuthenticatorCoordinatorProxy::performRequest): Deleted.
        (WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable): Deleted.
        (WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable): Deleted.
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.h:

2022-02-22  Brent Fulgham  <bfulgham@apple.com>

        Remove an unneeded IOKit property
        https://bugs.webkit.org/show_bug.cgi?id=236867
        <rdar://47695155>

        Reviewed by Per Arne Vollan.

        The relevant frameworks that used the IOPlatformUUID IOKit
        property have been updated to no longer refer to it. We can
        now safely remove it.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-02-22  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Adopt new _UITextSearching method for range comparison
        https://bugs.webkit.org/show_bug.cgi?id=237012
        rdar://88442811

        Reviewed by Devin Rousso.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView offsetFromPosition:toPosition:inDocument:]):

        Mark deprecation.

        (-[WKWebView compareFoundRange:toRange:inDocument:]):
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView compareFoundRange:toRange:inDocument:]):

        Implement the new comparison method using existing offset computation logic.

2022-02-22  Alexander Kanavin  <alex@linutronix.de>

        When building introspection files, add CMAKE_C_FLAGS to the compiler flags.
        https://bugs.webkit.org/show_bug.cgi?id=232936

        Reviewed by Michael Catanzaro.

        g-ir-compiler is using a C compiler internally, so it needs to set
        the proper flags for it.

        * PlatformGTK.cmake:

2022-02-22  Youenn Fablet  <youenn@apple.com>

        http/wpt/mediarecorder/mute-tracks.html fails with WebRTCRemoteVideoFrameEnabled=true
        https://bugs.webkit.org/show_bug.cgi?id=237021

        Reviewed by Kimmo Kinnunen.

        We were previously creating the black frame but still sending the remote read reference.
        On GPUProcess side, we were then encoding the real frame instead of the black/muted frame.
        Add a specific muted code path to fix the issue.

        Covered by updated test.

        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        (WebKit::MediaRecorderPrivate::videoSampleAvailable):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameReader::read):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Rename RenderStyle::userSelectIncludingInert to RenderStyle::effectiveUserSelect
        https://bugs.webkit.org/show_bug.cgi?id=237033

        Reviewed by Antti Koivisto.

        This naming is consistent with other properties (effectiveDisplay/Appearance/PointerEvents/etc.).

        * WebProcess/InjectedBundle/DOM/InjectedBundleNodeHandle.cpp:
        (WebKit::InjectedBundleNodeHandle::isSelectableTextNode const):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::selectionPositionInformation):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings
        https://bugs.webkit.org/show_bug.cgi?id=236989

        Reviewed by Youenn Fablet.

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings, since RuntimeEnabledFeatures is deprecated.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _serviceWorkersEnabled:]):
        * WebProcess/Storage/WebServiceWorkerProvider.cpp:
        (WebKit::WebServiceWorkerProvider::serviceWorkerConnection):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updateThrottleState):
        (WebKit::WebPage::updatePreferences):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events
        https://bugs.webkit.org/show_bug.cgi?id=236985

        Reviewed by Darin Adler.

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events,
        by keeping track of window objects interested in storage events. A Window object is interested
        in storage events if both of the following conditions is true:
        1. It has a Storage object (either localStorage or sessionStorage)
        2. It has a storage event listener registered.

        This patch also refactors the code so that we share more logic between WebKit1 and WebKit2.

        * WebProcess/WebStorage/StorageAreaImpl.cpp:
        (WebKit::StorageAreaImpl::setItem):
        (WebKit::StorageAreaImpl::removeItem):
        (WebKit::StorageAreaImpl::clear):
        * WebProcess/WebStorage/StorageAreaImpl.h:
        * WebProcess/WebStorage/StorageAreaMap.cpp:
        (WebKit::StorageAreaMap::setItem):
        (WebKit::StorageAreaMap::removeItem):
        (WebKit::StorageAreaMap::clear):
        (WebKit::StorageAreaMap::dispatchSessionStorageEvent):
        (WebKit::StorageAreaMap::dispatchLocalStorageEvent):
        (WebKit::framesForEventDispatching): Deleted.
        * WebProcess/WebStorage/StorageAreaMap.h:

2022-02-22  Kate Cheney  <katherine_cheney@apple.com>

        NSSharingServicePicker gets deallocated when using the standard share menu item
        https://bugs.webkit.org/show_bug.cgi?id=236998
        <rdar://problem/89174827>

        Reviewed by Wenson Hsieh.

        The NSMenuItem should keep the NSSharingServicePicker alive.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::getShareMenuItem):

2022-02-22  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Suspend web process after some time in the process cache
        https://bugs.webkit.org/show_bug.cgi?id=236971

        Reviewed by Michael Catanzaro.

        Implement platformSuspendProcess() and platformResumeProcess() for GTK and WPE ports.

        * UIProcess/WebProcessCache.cpp:
        (WebKit::WebProcessCache::addProcess):
        (WebKit::WebProcessCache::CachedProcess::CachedProcess):
        (WebKit::WebProcessCache::CachedProcess::~CachedProcess):
        (WebKit::WebProcessCache::CachedProcess::takeProcess):
        * UIProcess/WebProcessCache.h:
        * UIProcess/WebProcessProxy.h:
        * UIProcess/glib/WebProcessProxyGLib.cpp:
        (WebKit::WebProcessProxy::platformSuspendProcess):
        (WebKit::WebProcessProxy::platformResumeProcess):

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Allow adattributiond to start on iOS devices
        https://bugs.webkit.org/show_bug.cgi?id=237009
        <rdar://89062166>

        Reviewed by Per Arne Vollan.

        There were three more problems preventing it from starting:
        1. The code signature said to look for a sandbox profile with "webkit" in the name, but the profile had "WebKit" in the name.
           These names are case sensitive.
        2. The sandbox profile would not let it load the WebKit framework, so dyld would fail and the process would fail to launch.
           I added the framework directories that the XPC services are allowed to access.
        3. Once it started, it would crash inside WTF::initializeMainThread when calling WTF::pageSize which requires access to the hw.pagesize_compat syscall.
           As a starting point, I'm going to allow all the syscalls that the network process currently has access to,
           which is enough to get it to respond without crashing.
        4. We need access to com.apple.diagnosticd and com.apple.analyticsd in order to be able to generate crash reports.  This is quite useful.
        Yes, I know I said there were only three problems, but the 4th is so useful I thought I'd put it in the list.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:
        * Scripts/process-entitlements.sh:

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Improve const correctness for SecurityOrigin accessors
        https://bugs.webkit.org/show_bug.cgi?id=236983

        Reviewed by Chris Dumez.

        * UIProcess/Notifications/WebNotification.h:
        (WebKit::WebNotification::origin const):
        (WebKit::WebNotification::origin):

2022-02-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Adjust some behaviors around the "Markup Image" action in the callout bar
        https://bugs.webkit.org/show_bug.cgi?id=236980

        Reviewed by Aditya Keerthi.

        Adjust the following behaviors around the "Markup Image" callout bar item on iOS:
        1.  The item should be present as long as the selection range contains a single image item (not only if the
            selection range exactly encompasses a single image element.
        2.  The item should appear in the callout bar before other WebKit-client-provided menu controller items.

        This patch also adds a new API test to exercise these behaviors and, in doing so, also refactors logic around
        determining whether or not to show this item so that it's dependent on a WebKit internal feature instead of just
        the system feature flag (with the default value of the internal feature being equal to whether or not the system
        feature is enabled). This means we can run tests for these features without requiring the system feature flag to
        be enabled.

        See below for more details.

        Test: ImageAnalysisTests.MenuControllerItems

        * Platform/cocoa/TextRecognitionUtilities.mm:
        (WebKit::makeTextRecognitionResult):

        Drive-by fix for some API tests: only attempt to send the platform image analysis result over IPC if it is a
        `VKCImageAnalysis`. In some API tests, we use mock objects here instead, which currently causes the IPC message
        send to fail due to encoding failure.

        * Shared/Cocoa/WebPreferencesDefaultValuesCocoa.mm:
        (WebKit::defaultImageAnalysisMarkupEnabled):
        * Shared/WebPreferencesDefaultValues.h:

        Make the new internal feature flag default to the system feature flag.

        * UIProcess/ios/WKActionSheetAssistant.h:
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant defaultActionsForLinkSheet:]):
        (-[WKActionSheetAssistant defaultActionsForImageSheet:]):

        Consult a new delegate method (`-actionSheetAssistantShouldIncludeCopyCroppedImageAction:`) instead of checking
        the system feature flag directly.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView updateImageAnalysisMarkupMenuItems:]):

        Append the "Markup Image" item at the start of the list of additional menu items.

        (-[WKContentView canPerformImageAnalysisMarkup]):

        Check the internal feature instead of the system feature flag.

        (-[WKContentView performImageAnalysisMarkup:]):

        Now that this action can be triggered even when the current selection doens't encompass only a single image, we
        need to use `replaceWithPasteboardData()` instead, passing in the element context of the image element we want
        to replace.

        (-[WKContentView actionSheetAssistantShouldIncludeCopyCroppedImageAction:]):

        Only attempt to show the new items if the internal feature is enabled. Consulted by `WKActionSheetAssistant`
        above.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::setupServicesMenu):

        Check the internal feature instead of the system feature flag.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::getPlatformEditorState const):

        Make a minor adjustment here to bail early only if we find multiple image elements in the selected range,
        rather than bailing if we find anything that's not an image element.

2022-02-21  Alexander Kanavin  <alex@linutronix.de>

        Fix racy parallel build of WebKit2-4.0.gir
        https://bugs.webkit.org/show_bug.cgi?id=232935

        Reviewed by Michael Catanzaro.

        This is a target and not a command because it's used to build another .gir
        and a .typelib, which would trigger two racy parallel builds when using command
        (e.g. command would run twice, target runs only once).

        * PlatformGTK.cmake:

2022-02-21  Myles C. Maxfield  <mmaxfield@apple.com>

        Sort WebCore and WebKit Xcode project files
        https://bugs.webkit.org/show_bug.cgi?id=237010

        Unreviewed.

        * WebKit.xcodeproj/project.pbxproj:

2022-02-21  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Fix the internal build after rdar://88354008
        https://bugs.webkit.org/show_bug.cgi?id=236999

        Unreviewed build fix.

        Mark deprecated implementations.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        * UIProcess/ios/WKContentViewInteraction.mm:

== Rolled over to ChangeLog-2022-02-22 ==
