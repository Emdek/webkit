@@ -409,143 +377,89 @@
 {
     if (!decoder.decode(static_cast<ScrollingStateScrollingNode&>(node)))
         return false;
-
+    
     return true;
 }
 
 bool ArgumentCoder<ScrollingStateOverflowScrollProxyNode>::decode(Decoder& decoder, ScrollingStateOverflowScrollProxyNode& node)
 {
-    if (!decoder.decode(static_cast<ScrollingStateNode&>(node)))
-        return false;
-
     SCROLLING_NODE_DECODE(ScrollingStateNode::Property::OverflowScrollingNode, ScrollingNodeID, setOverflowScrollingNode);
     return true;
 }
 
 void ArgumentCoder<ScrollingStateFixedNode>::encode(Encoder& encoder, const ScrollingStateFixedNode& node)
 {
-    encoder << static_cast<const ScrollingStateNode&>(node);
-    
     if (node.hasChangedProperty(ScrollingStateNode::Property::ViewportConstraints))
         encoder << node.viewportConstraints();
 }
 
 bool ArgumentCoder<ScrollingStateFixedNode>::decode(Decoder& decoder, ScrollingStateFixedNode& node)
 {
-    if (!decoder.decode(static_cast<ScrollingStateNode&>(node)))
-        return false;
-
     if (node.hasChangedProperty(ScrollingStateNode::Property::ViewportConstraints)) {
         FixedPositionViewportConstraints decodedValue;
         if (!decoder.decode(decodedValue))
             return false;
         node.updateConstraints(decodedValue);
     }
-
+    
     return true;
 }
 
 void ArgumentCoder<ScrollingStateStickyNode>::encode(Encoder& encoder, const ScrollingStateStickyNode& node)
 {
-    encoder << static_cast<const ScrollingStateNode&>(node);
-    
     if (node.hasChangedProperty(ScrollingStateNode::Property::ViewportConstraints))
         encoder << node.viewportConstraints();
 }
 
 bool ArgumentCoder<ScrollingStateStickyNode>::decode(Decoder& decoder, ScrollingStateStickyNode& node)
 {
-    if (!decoder.decode(static_cast<ScrollingStateNode&>(node)))
-        return false;
-
     if (node.hasChangedProperty(ScrollingStateNode::Property::ViewportConstraints)) {
         StickyPositionViewportConstraints decodedValue;
         if (!decoder.decode(decodedValue))
             return false;
         node.updateConstraints(decodedValue);
     }
-
+    
     return true;
 }
 
 void ArgumentCoder<ScrollingStatePositionedNode>::encode(Encoder& encoder, const ScrollingStatePositionedNode& node)
 {
-    encoder << static_cast<const ScrollingStateNode&>(node);
-
     if (node.hasChangedProperty(ScrollingStateNode::Property::RelatedOverflowScrollingNodes))
         encoder << node.relatedOverflowScrollingNodes();
-
+    
     if (node.hasChangedProperty(ScrollingStateNode::Property::LayoutConstraintData))
         encoder << node.layoutConstraints();
 }
 
 bool ArgumentCoder<ScrollingStatePositionedNode>::decode(Decoder& decoder, ScrollingStatePositionedNode& node)
 {
-    if (!decoder.decode(static_cast<ScrollingStateNode&>(node)))
-        return false;
-
     if (node.hasChangedProperty(ScrollingStateNode::Property::RelatedOverflowScrollingNodes)) {
         Vector<ScrollingNodeID> decodedValue;
         if (!decoder.decode(decodedValue))
             return false;
         node.setRelatedOverflowScrollingNodes(WTFMove(decodedValue));
     }
-
+    
     if (node.hasChangedProperty(ScrollingStateNode::Property::LayoutConstraintData)) {
         AbsolutePositionConstraints decodedValue;
         if (!decoder.decode(decodedValue))
             return false;
         node.updateConstraints(decodedValue);
     }
-
+    
     return true;
 }
 
-static void encodeNodeAndDescendants(IPC::Encoder& encoder, const ScrollingStateNode& stateNode, unsigned& encodedNodeCount)
-{
-    ++encodedNodeCount;
-
-    switch (stateNode.nodeType()) {
-    case ScrollingNodeType::MainFrame:
-    case ScrollingNodeType::Subframe:
-        encoder << downcast<ScrollingStateFrameScrollingNode>(stateNode);
-        break;
-    case ScrollingNodeType::FrameHosting:
-        encoder << downcast<ScrollingStateFrameHostingNode>(stateNode);
-        break;
-    case ScrollingNodeType::Overflow:
-        encoder << downcast<ScrollingStateOverflowScrollingNode>(stateNode);
-        break;
-    case ScrollingNodeType::OverflowProxy:
-        encoder << downcast<ScrollingStateOverflowScrollProxyNode>(stateNode);
-        break;
-    case ScrollingNodeType::Fixed:
-        encoder << downcast<ScrollingStateFixedNode>(stateNode);
-        break;
-    case ScrollingNodeType::Sticky:
-        encoder << downcast<ScrollingStateStickyNode>(stateNode);
-        break;
-    case ScrollingNodeType::Positioned:
-        encoder << downcast<ScrollingStatePositionedNode>(stateNode);
-        break;
-    }
-
-    if (!stateNode.children())
-        return;
-
-    for (const auto& child : *stateNode.children())
-        encodeNodeAndDescendants(encoder, *child.get(), encodedNodeCount);
-}
-
 void ArgumentCoder<WebCore::ScrollingStateTree>::encode(Encoder& encoder, const WebCore::ScrollingStateTree& tree)
 {
     encoder << tree.hasNewRootStateNode();
     encoder << tree.hasChangedProperties();
-    encoder << tree.nodeCount();
-    unsigned numNodesEncoded = 0;
-    if (const ScrollingStateNode* rootNode = tree.rootStateNode())
-        encodeNodeAndDescendants(encoder, *rootNode, numNodesEncoded);
-    ASSERT_UNUSED(numNodesEncoded, numNodesEncoded == tree.nodeCount());
+    if (const ScrollingStateNode* rootNode = tree.rootStateNode()) {
+        encoder << true;
+        encoder << *rootNode;
+    } else
+        encoder << false;
 }
 
 std::optional<WebCore::ScrollingStateTree> ArgumentCoder<WebCore::ScrollingStateTree>::decode(Decoder& decoder)
