2022-02-26  Tyler Wilcock  <tyler_w@apple.com>

        AX: Remove unnecessary AccessibilityRenderObject::init() override
        https://bugs.webkit.org/show_bug.cgi?id=237239

        Reviewed by Chris Fleizach.

        The implementation of AccessibilityRenderObject::init() just calls
        AccessibilityNodeObject::init(), so we don't need it as an override.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::init): Deleted.
        * accessibility/AccessibilityRenderObject.h:

2022-02-26  Chris Dumez  <cdumez@apple.com>

        Drop Ref<>'s operator==() as it is a bit ambiguous / confusing
        https://bugs.webkit.org/show_bug.cgi?id=237231

        Reviewed by Darin Adler.

        Drop Ref<>'s operator==() as it is a bit ambiguous / confusing. Some people expect it to compare
        pointers while other expect it to compare the values we hold references to.
        It seems best to omit this operator and be explicit at call sites.

        * Modules/mediastream/libwebrtc/LibWebRTCRtpSenderBackend.cpp:
        (WebCore::LibWebRTCRtpSenderBackend::startSource):
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::SVGDocumentExtensions::removeElementToRebuild):
        * svg/graphics/filters/SVGFilterBuilder.cpp:
        (WebCore::SVGFilterBuilder::buildEffectExpression const):

2022-02-26  Kate Cheney  <katherine_cheney@apple.com>

        Update CSP handling of javascript URLs
        https://bugs.webkit.org/show_bug.cgi?id=236351
        <rdar://problem/88675827>

        Reviewed by Brent Fulgham.

        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::executeJavaScriptURL):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::continueLoadAfterNewWindowPolicy):
        (WebCore::createWindow):
        * loader/SubframeLoader.cpp:
        (WebCore::FrameLoader::SubframeLoader::requestFrame):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::setLocation):
        * page/csp/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::allowJavaScriptURLs const):
        * page/csp/ContentSecurityPolicy.h:

2022-02-26  Alan Bujtas  <zalan@apple.com>

        [RenderTreeBuilder] Clean up descendant floats when a block container becomes float
        https://bugs.webkit.org/show_bug.cgi?id=237238
        <rdar://79960422>

        Reviewed by Antti Koivisto.

        When a block box becomes float, it forms a "lockdown" container for the descendant floats by establishing a BFC.
        What it means is that such descendant floats can't intrude to sibling block containers anymore.
        This patch ensures that we remove such floats from sibling (and their descendant) renderers.

        Test: fast/block/float/float-merge-anon-parent-crash.html

        * rendering/updating/RenderTreeBuilder.cpp:
        (WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange):

2022-02-26  Simon Fraser  <simon.fraser@apple.com>

        No animation when scroll snap scroller is navigated with the keyboard
        https://bugs.webkit.org/show_bug.cgi?id=236244

        Reviewed by Tim Horton.

        Keyboard-driven scrolls in overflow didn't animate, simply because scrollAnimatorEnabled()
        wasn't implemented for RenderLayerScrollableArea.

        I could not figure out a reliable way to test that we animated the scroll.

        * rendering/RenderLayerScrollableArea.cpp:
        (WebCore::RenderLayerScrollableArea::scrollAnimatorEnabled const):
        * rendering/RenderLayerScrollableArea.h:

2022-02-25  Simon Fraser  <simon.fraser@apple.com>

        Scrollbars disappear when very long or wide
        https://bugs.webkit.org/show_bug.cgi?id=237232
        <rdar://17540446>

        Reviewed by Tim Horton.

        Our tiling logic does not play nicely with AppKit's NSScrollerImps, probably because we
        inadvertently unparent its layers.

        Fix by disallowing GraphicsLayers for scrollbars from going into tiled mode, for
        both root and overflow scrollbars.

        Test: fast/scrolling/mac/scrollbars/very-wide-overlay-scrollbar.html

        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::setAllowsTiling):
        (WebCore::GraphicsLayer::allowsTiling const):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::requiresTiledLayer const):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateOverflowControlsLayers):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):

2022-02-25  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Implement RemoteImageBufferProxy::drawConsuming()
        https://bugs.webkit.org/show_bug.cgi?id=236685
        rdar://89007426

        Reviewed by Simon Fraser.

        Assert ImageBuffer::drawConsuming() does not draw into its backend before
        it is destroyed.

        * platform/graphics/ConcreteImageBuffer.h:

2022-02-25  Alejandro G. Castro  <alex@igalia.com> and Fujii Hironori <Hironori.Fujii@sony.com>

        [GTK][WPE][WC] Move ANGLE context initialisation to GraphicsContextGLTextureMapper::initialize
        https://bugs.webkit.org/show_bug.cgi?id=236769

        Reviewed by Chris Lord.

        This is the first step for the long-term plan to share more code
        in GraphicsContextGLANGLE between Cocoa and non-Cocoa, and
        minimise the ifdefs in GraphicsContextGLANGLE.

        We are moving the context initialisation and holding to
        GraphicsContextGLTextureMapper, away from
        GCGLANGLELayer::ANGLEContext and the layer classes in case of
        COORDINATED_GRAPHICS. Later on, Cocoa and non-Cocoa can merge
        their ::initialize.

        No new tests, this is a refactoring patch.

        * platform/TextureMapper.cmake:
        * platform/graphics/angle/GraphicsContextGLANGLE.h:
        * platform/graphics/nicosia/texmap/NicosiaGCGLANGLELayer.cpp:
        (Nicosia::GCGLANGLELayer::GCGLANGLELayer):
        (Nicosia::GCGLANGLELayer::ANGLEContext::errorString): Deleted.
        (Nicosia::GCGLANGLELayer::ANGLEContext::lastErrorString): Deleted.
        (Nicosia::GCGLANGLELayer::ANGLEContext::createContext): Deleted.
        (Nicosia::GCGLANGLELayer::ANGLEContext::ANGLEContext): Deleted.
        (Nicosia::GCGLANGLELayer::ANGLEContext::~ANGLEContext): Deleted.
        (Nicosia::GCGLANGLELayer::ANGLEContext::makeContextCurrent): Deleted.
        (Nicosia::GCGLANGLELayer::ANGLEContext::platformContext const): Deleted.
        (Nicosia::GCGLANGLELayer::ANGLEContext::platformDisplay const): Deleted.
        (Nicosia::GCGLANGLELayer::ANGLEContext::platformConfig const): Deleted.
        (Nicosia::GCGLANGLELayer::makeContextCurrent): Deleted.
        (Nicosia::GCGLANGLELayer::platformContext const): Deleted.
        (Nicosia::GCGLANGLELayer::platformDisplay const): Deleted.
        (Nicosia::GCGLANGLELayer::platformConfig const): Deleted.
        * platform/graphics/nicosia/texmap/NicosiaGCGLANGLELayer.h:
        * platform/graphics/opengl/GraphicsContextGLOpenGL.cpp:
        (WebCore::GraphicsContextGLOpenGL::initialize):
        * platform/graphics/opengl/GraphicsContextGLOpenGL.h:
        * platform/graphics/texmap/ANGLEContext.cpp: Removed.
        * platform/graphics/texmap/ANGLEContext.h: Removed.
        * platform/graphics/texmap/GraphicsContextGLTextureMapper.cpp:
        (WebCore::GraphicsContextGLTextureMapper::create):
        (WebCore::GraphicsContextGLTextureMapper::GraphicsContextGLTextureMapper):
        (WebCore::GraphicsContextGLTextureMapper::layerContentsDisplayDelegate):
        (WebCore::GraphicsContextGLTextureMapper::platformInitialize):
        (): Deleted.
        * platform/graphics/texmap/GraphicsContextGLTextureMapper.h:
        * platform/graphics/texmap/GraphicsContextGLTextureMapperANGLE.cpp:
        (WebCore::GraphicsContextGLANGLE::GraphicsContextGLANGLE):
        (WebCore::GraphicsContextGLTextureMapper::platformInitializeContext):
        (WebCore::GraphicsContextGLTextureMapper::platformInitialize):
        (WebCore::GraphicsContextGLANGLE::platformDisplay const):
        (WebCore::GraphicsContextGLANGLE::platformConfig const):
        (WebCore::GraphicsContextGLANGLE::makeContextCurrent):
        * platform/graphics/texmap/PlatformLayerDisplayDelegate.h: Copied from Source/WebCore/platform/graphics/texmap/GraphicsContextGLTextureMapper.h.
        * platform/graphics/texmap/TextureMapperGCGLPlatformLayer.cpp:
        (WebCore::TextureMapperGCGLPlatformLayer::TextureMapperGCGLPlatformLayer):
        (WebCore::TextureMapperGCGLPlatformLayer::~TextureMapperGCGLPlatformLayer):
        (WebCore::TextureMapperGCGLPlatformLayer::paintToTextureMapper):
        (WebCore::TextureMapperGCGLPlatformLayer::makeContextCurrent): Deleted.
        (WebCore::TextureMapperGCGLPlatformLayer::platformContext const): Deleted.
        (WebCore::TextureMapperGCGLPlatformLayer::platformDisplay const): Deleted.
        (WebCore::TextureMapperGCGLPlatformLayer::platformConfig const): Deleted.
        (WebCore::TextureMapperGCGLPlatformLayer::proxy const): Deleted.
        (WebCore::TextureMapperGCGLPlatformLayer::swapBuffersIfNeeded): Deleted.
        * platform/graphics/texmap/TextureMapperGCGLPlatformLayer.h:

2022-02-25  Chris Dumez  <cdumez@apple.com>

        Use the modern Hasher more in Content Extensions code
        https://bugs.webkit.org/show_bug.cgi?id=237228

        Reviewed by Darin Adler.

        * contentextensions/CombinedFiltersAlphabet.cpp:
        (WebCore::ContentExtensions::add):
        (WebCore::ContentExtensions::TermCreatorTranslator::hash):
        * contentextensions/CombinedFiltersAlphabet.h:
        (WebCore::ContentExtensions::CombinedFiltersAlphabet::TermPointerHash::hash):
        * contentextensions/ContentExtensionRule.h:
        (WebCore::ContentExtensions::add):
        (WebCore::ContentExtensions::TriggerHash::hash):
        * contentextensions/Term.h:
        (WebCore::ContentExtensions::Term::Group::operator== const):
        (WebCore::ContentExtensions::add):
        (WebCore::ContentExtensions::Term::CharacterSet::hash const): Deleted.
        (WebCore::ContentExtensions::Term::Group::hash const): Deleted.
        (WebCore::ContentExtensions::Term::hash const): Deleted.

2022-02-25  Brandon Stewart  <brandonstewart@apple.com>

        Do not trigger didFail during FileReaderLoader Destruction
        https://bugs.webkit.org/show_bug.cgi?id=237060

        Reviewed by Darin Adler.

        Setting cancel() instead of terminate() will prevent the didFail() method from being triggered.
        This method has the unfortunate side effect of trying to allocate memory, which is not allowed when
        under going a sweep event.

        * fileapi/FileReaderLoader.cpp:
        (WebCore::FileReaderLoader::~FileReaderLoader):

2022-02-25  Brent Fulgham  <bfulgham@apple.com>

        WebKit continues to render PDF images in Captive Portal mode
        https://bugs.webkit.org/show_bug.cgi?id=237120
        <rdar://problem/89384234>

        Reviewed by Chris Dumez.

        WebKit should handle all PDF processing in PDF.JS when in Captive Portal mode. However, testing
        revealed that PDF images are still rendered natively. As a first step we should bypass the
        native PDF code path. A subsequent patch will handle in PDF.JS.

        We need to thread the state of the Captive Portal setting through the image loading code so that
        WebKit knows to bail out before consuming the PDF data in the native decoder.

        Tested by TestWebKitAPI.

        * page/RuntimeEnabledFeatures.h: Add new flag for PDF image decoding state.
        * platform/graphics/Image.cpp:
        (WebCore::Image::create): Check whether PDF image decoding should be permitted.

2022-02-25  Sihui Liu  <sihui_liu@apple.com>

        Regression(r242729): m_origin in IDBDatabaseIdentifier is incorrect
        https://bugs.webkit.org/show_bug.cgi?id=237044

        Reviewed by Youenn Fablet.

        In r242729, we swapped top origin and opening origin in m_origin (it is a ClientOrigin) of IDBDatabaseIdentifier. 
        This can cause trouble since IndexedDB operation will be processed by wrong OriginStorageManager 
        (OriginStorageManager is identified by ClientOrigin). To fix this issue, we need to swap it back.

        New test: IndexedDB.IndexedDBThirdPartyStorageLayout

        * Modules/indexeddb/IDBDatabaseIdentifier.cpp:
        (WebCore::IDBDatabaseIdentifier::IDBDatabaseIdentifier):
        (WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot const):
        (WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot):
        * Modules/indexeddb/IDBDatabaseIdentifier.h:
        * Modules/indexeddb/server/IDBServer.cpp:
        (WebCore::IDBServer::IDBServer::getAllDatabaseNamesAndVersions):
        (WebCore::IDBServer::IDBServer::diskUsage):

2022-02-25  Chris Dumez  <cdumez@apple.com>

        SharedArrayBuffer posted to AudioWorkletProcessor is not actually shared with the main thread
        https://bugs.webkit.org/show_bug.cgi?id=237144
        <rdar://problem/89479641>

        Reviewed by Darin Adler.

        SerializedScriptValue only maintains SharedArrayBuffers when constructed with SerializationContext::WorkerPostMessage.
        With other SerializationContext values, such as the default one that AudioWorkletNode was using, SharedArrayBuffers
        are serialized as simple arrays and are no longer shared.

        This patch passes SerializationContext::WorkerPostMessage when constructing the SerializedScriptValue since we want
        SharedArrayBuffer sharing and since a worklet is essentially a worker.

        Note that this patch allows passing a SharedArrayBuffer to an AudioWorklet upon construction via processorOptions.
        However, SharedArrayBuffer still won't be shared if sent later on via a MessagePort.postMessage() call. This is
        because MessagePort.postMessage() routes all messages via the network process, even if the destination ends up
        being within the same process as the sender (See Bug 220038).

        Test: http/wpt/webaudio/the-audio-api/the-audioworklet-interface/shared-array-buffer.https.html

        * Modules/webaudio/AudioWorkletNode.cpp:
        (WebCore::AudioWorkletNode::create):

2022-02-25  Jer Noble  <jer.noble@apple.com>

        [Cocoa] HLS + Modern EME key rotation causes playback to stall indefinitely
        https://bugs.webkit.org/show_bug.cgi?id=237214
        <rdar://89372801>

        Reviewed by Eric Carlson.

        In r275916, Ref was changed to perform pointer equality in its operator==. This caused 
        takeUnexpectedKeyRequestForInitializationData() to fail to find key requests matching
        the initData passed in through MediaKeySession.

        Fix the equality test by calling .get() on the Ref, which causes the `==` to resolve to
        FragmentedSharedBuffer::operator==().

        * platform/graphics/avfoundation/objc/CDMInstanceFairPlayStreamingAVFObjC.mm:
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::takeUnexpectedKeyRequestForInitializationData):

2022-02-25  Alex Christensen  <achristensen@webkit.org>

        Re-add YouTubePluginReplacement, removed in r285252
        https://bugs.webkit.org/show_bug.cgi?id=237182
        <rdar://89148022>

        Reviewed by Chris Dumez.

        Tests: security/contentSecurityPolicy/object-src-none-blocks-youtube-plugin-replacement.html
               security/contentSecurityPolicy/plugins-types-allows-youtube-plugin-replacement.html
               security/contentSecurityPolicy/plugins-types-blocks-youtube-plugin-replacement-without-mime-type.html
               security/contentSecurityPolicy/plugins-types-blocks-youtube-plugin-replacement.html

        Its removal broke webpages that work in Chrome and Firefox, so back it comes.

        * Headers.cmake:
        * Modules/plugins: Copied from Source/WebCore/Modules/plugins.
        * SourcesCocoa.txt:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSPluginElementFunctions.cpp:
        (WebCore::pluginScriptObject):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/test/JS/JSTestPluginInterface.cpp:
        (WebCore::JSTestPluginInterface::visitChildrenImpl):
        * html/HTMLPlugInElement.cpp:
        (WebCore::HTMLPlugInElement::createElementRenderer):
        (WebCore::HTMLPlugInElement::didAddUserAgentShadowRoot):
        (WebCore::registrar):
        (WebCore::pluginReplacementForType):
        (WebCore::HTMLPlugInElement::requestObject):
        (WebCore::HTMLPlugInElement::scriptObjectForPluginReplacement):
        * html/HTMLPlugInElement.h:
        (WebCore::HTMLPlugInElement::pluginReplacementScriptObject):
        * html/shadow/ShadowPseudoIds.cpp:
        (WebCore::ShadowPseudoIds::webkitPluginReplacement):
        * html/shadow/ShadowPseudoIds.h:
        * html/shadow/YouTubeEmbedShadowElement.cpp:
        * html/shadow/YouTubeEmbedShadowElement.h:
        * page/Settings.yaml:

2022-02-25  J Pascoe  <j_pascoe@apple.com>
        [WebAuthn] Use default pubKeyCredParams if empty in makeCredential
        https://bugs.webkit.org/show_bug.cgi?id=237109
        rdar://problem/89376484

        Reviewed by Brent Fulgham.

        The Web Authentication level 2 spec was updated to clarify that
        a set of default pubKeyCredParams should be used if the list
        supplied by the RP is empty. This patch starts using
        the default and updates associated tests.

        * Modules/webauthn/AuthenticatorCoordinator.cpp:
        (WebCore::AuthenticatorCoordinator::create const):
        * Modules/webauthn/PublicKeyCredentialCreationOptions.h:
        * Modules/webauthn/WebAuthenticationConstants.h:

2022-02-25  Chris Dumez  <cdumez@apple.com>

        Use modern Hasher in ContentExtensionsActions
        https://bugs.webkit.org/show_bug.cgi?id=237157

        Reviewed by Darin Adler.

        * contentextensions/ContentExtensionActions.h:
        (WebCore::ContentExtensions::add):
        (WTF::DefaultHash<WebCore::ContentExtensions::RedirectAction>::hash):
        (WTF::DefaultHash<WebCore::ContentExtensions::ModifyHeadersAction>::hash):
        (WebCore::ContentExtensions::VariantHasher::hash): Deleted.
        (WebCore::ContentExtensions::VectorHasher::hash): Deleted.

2022-02-25  Alan Bujtas  <zalan@apple.com>

        [Tables] Incorrect table sizing when colgroup comes after tbody
        https://bugs.webkit.org/show_bug.cgi?id=237205
        <rdar://86582214>

        Reviewed by Antti Koivisto.

        Let's use the colgroup for table sizing even when it comes after any thead, tbody, tfoot, and tr elements.
        This makes WebKit match other rendering engines (see https://src.chromium.org/viewvc/blink?revision=159442&view=revision)

        Test: fast/table/table-sizing-fails-when-colgroup-comes-after-content.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::firstColumn const):
        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::nextColumn const):

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Non-simple CORS preflight fails due to cache-control header
        https://bugs.webkit.org/show_bug.cgi?id=236837
        <rdar://problem/89382796>

        Reviewed by Chris Dumez.

        We fixed cache-control in https://bugs.webkit.org/show_bug.cgi?id=233916.
        The fix to make the website work is to ensure that Content-Type is not cleared when going to service worker.
        Covered by updated tests.

        * Modules/beacon/NavigatorBeacon.cpp:

2022-02-25  Zan Dobersek  <zdobersek@igalia.com>

        [GTK][WPE] Uncouple libgbm, libdrm dependencies from ANGLE functionality
        https://bugs.webkit.org/show_bug.cgi?id=237199

        Reviewed by Chris Lord.

        Unconditionally build with libgbm and libdrm cflags and linker flags
        since these will be used outside of ANGLE functionality.

        Remove USE(ANGLE) && USE(NICOSIA) guards from GBMDevice files.

        * PlatformGTK.cmake:
        * PlatformWPE.cmake:
        * platform/graphics/gbm/GBMDevice.cpp:
        * platform/graphics/gbm/GBMDevice.h:

2022-02-25  Carlos Garcia Campos  <cgarcia@igalia.com>

        AX: List item marker not exposed when not a direct child of a list item
        https://bugs.webkit.org/show_bug.cgi?id=236777
        <rdar://problem/89082485>

        Reviewed by Adrian Perez de Castro.

        It can happen that the marker is not a direct child of a list item, in which case the marker is ignored and not
        exposed to ATs.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::parentObjectUnignored const): In case of list marker find the marker list item.
        (WebCore::AccessibilityRenderObject::markerRenderer const): Helper to return the list item marker renderer.
        (WebCore::AccessibilityRenderObject::addListItemMarker): Add always the list item marker as the first child of
        list items.
        (WebCore::AccessibilityRenderObject::addChildren): Do not add list item marker children, they will be added to
        the right parent in addListItemMarker().
        * accessibility/AccessibilityRenderObject.h:

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Optimize black frame sending in MediaRecorderPrivate
        https://bugs.webkit.org/show_bug.cgi?id=237027

        Reviewed by Kimmo Kinnunen.

        Allow generating black frames as IOSurfaces.
        Covered by existing tests.

        * platform/graphics/cv/CVUtilities.h:
        * platform/graphics/cv/CVUtilities.mm:

2022-02-24  Matt Woodrow  <mattwoodrow@apple.com>

        Simplify grid RTL handling
        https://bugs.webkit.org/show_bug.cgi?id=236694

        Reviewed by Dean Jackson.

        The previous code stored columns in logical order (column 0 is the rightmost physical column), but the positions were offset
        using the physical left border, padding and content distribution offset. This hybrid physical/logical coordinate space
        made for tricky conversions into the final coordinate space.
        This changes the stored column positions to use purely logical coordinates, and does a single direction swap (by subtracting
        from the width) at the end.

        No tests added, this refactoring is covered by a large number of existing WPTs.

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::populateGridPositionsForDirection):
        (WebCore::RenderGrid::resolveAutoStartGridPosition const):
        (WebCore::RenderGrid::resolveAutoEndGridPosition const):
        (WebCore::RenderGrid::gridAreaBreadthForOutOfFlowChild):
        (WebCore::RenderGrid::logicalOffsetForOutOfFlowChild const):
        (WebCore::RenderGrid::gridAreaPositionForOutOfFlowChild const):
        (WebCore::RenderGrid::computeContentPositionAndDistributionOffset):
        (WebCore::RenderGrid::translateRTLCoordinate const):
        (WebCore::RenderGrid::logicalOffsetForChild const):
        (WebCore::RenderGrid::translateOutOfFlowRTLCoordinate const): Deleted.
        * rendering/RenderGrid.h:

2022-02-24  Jer Noble  <jer.noble@apple.com>

        [Refactor] Adopt LoggerHelper in Logging EME classes
        https://bugs.webkit.org/show_bug.cgi?id=234319

        Reviewed by Eric Carlson.

        In order to pass down a logger() and logIdentifier() to the platform/
        classes, modify LegacyCDMSessionClient to be a CanMakeWeakPtr class,
        so it can be passed around by reference and automatically invalidated
        when the client is destroyed. Then modify LegacyCDMSessionClient to
        provide a logger() and logIdentifier() to callers.

        * Modules/encryptedmedia/CDM.cpp:
        (WebCore::CDM::CDM):
        * Modules/encryptedmedia/CDM.h:
        (WebCore::CDM::logIdentifier const):
        * Modules/encryptedmedia/MediaKeySession.cpp:
        (WebCore::MediaKeySession::generateRequest):
        (WebCore::MediaKeySession::load):
        (WebCore::MediaKeySession::update):
        (WebCore::MediaKeySession::close):
        (WebCore::MediaKeySession::remove):
        (WebCore::MediaKeySession::updateKeyStatuses):
        (WebCore::MediaKeySession::sessionClosed):
        * Modules/encryptedmedia/MediaKeys.cpp:
        (WebCore::MediaKeys::MediaKeys):
        (WebCore::MediaKeys::createSession):
        (WebCore::MediaKeys::setServerCertificate):
        * Modules/encryptedmedia/MediaKeys.h:
        * Modules/encryptedmedia/legacy/LegacyCDM.cpp:
        (WebCore::LegacyCDM::createSession):
        * Modules/encryptedmedia/legacy/LegacyCDMPrivate.h:
        * Modules/encryptedmedia/legacy/LegacyCDMPrivateClearKey.cpp:
        (WebCore::LegacyCDMPrivateClearKey::createSession):
        * Modules/encryptedmedia/legacy/LegacyCDMPrivateClearKey.h:
        * Modules/encryptedmedia/legacy/LegacyCDMPrivateMediaPlayer.cpp:
        (WebCore::CDMPrivateMediaPlayer::createSession):
        * Modules/encryptedmedia/legacy/LegacyCDMPrivateMediaPlayer.h:
        * Modules/encryptedmedia/legacy/LegacyCDMSessionClearKey.cpp:
        (WebCore::CDMSessionClearKey::CDMSessionClearKey):
        * Modules/encryptedmedia/legacy/LegacyCDMSessionClearKey.h:
        * Modules/encryptedmedia/legacy/WebKitMediaKeySession.cpp:
        (WebCore::WebKitMediaKeySession::create):
        (WebCore::WebKitMediaKeySession::WebKitMediaKeySession):
        (WebCore::WebKitMediaKeySession::~WebKitMediaKeySession):
        (WebCore::WebKitMediaKeySession::close):
        (WebCore::WebKitMediaKeySession::generateKeyRequest):
        (WebCore::WebKitMediaKeySession::update):
        (WebCore::WebKitMediaKeySession::sendMessage):
        (WebCore::WebKitMediaKeySession::sendError):
        (WebCore::WebKitMediaKeySession::logChannel const):
        * Modules/encryptedmedia/legacy/WebKitMediaKeySession.h:
        * Modules/encryptedmedia/legacy/WebKitMediaKeys.cpp:
        (WebCore::WebKitMediaKeys::createSession):
        * Modules/encryptedmedia/legacy/WebKitMediaKeys.h:
        * platform/encryptedmedia/CDMFactory.h:
        * platform/encryptedmedia/CDMInstance.h:
        (WebCore::CDMInstance::setLogIdentifier):
        (WebCore::CDMInstance::setLogger): Deleted.
        * platform/encryptedmedia/CDMInstanceSession.h:
        (WebCore::CDMInstanceSession::setLogIdentifier):
        (WebCore::CDMInstanceSession::setLogger): Deleted.
        * platform/encryptedmedia/CDMPrivate.h:
        (WebCore::CDMPrivate::setLogIdentifier):
        (WebCore::CDMPrivate::setLogger): Deleted.
        * platform/encryptedmedia/clearkey/CDMClearKey.cpp:
        (WebCore::CDMFactoryClearKey::createCDM):
        * platform/encryptedmedia/clearkey/CDMClearKey.h:
        * platform/graphics/LegacyCDMSession.h:
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::createSession):
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::createSession):
        * platform/graphics/avfoundation/CDMFairPlayStreaming.cpp:
        (WebCore::CDMFactoryFairPlayStreaming::createCDM):
        (WebCore::CDMPrivateFairPlayStreaming::CDMPrivateFairPlayStreaming):
        (WebCore::CDMPrivateFairPlayStreaming::supportsConfiguration const):
        (WebCore::CDMPrivateFairPlayStreaming::createInstance):
        (WebCore::CDMPrivateFairPlayStreaming::setLogger): Deleted.
        * platform/graphics/avfoundation/CDMFairPlayStreaming.h:
        * platform/graphics/avfoundation/CDMPrivateMediaSourceAVFObjC.h:
        * platform/graphics/avfoundation/CDMPrivateMediaSourceAVFObjC.mm:
        (WebCore::CDMPrivateMediaSourceAVFObjC::createSession):
        * platform/graphics/avfoundation/cf/CDMSessionAVFoundationCF.cpp:
        (WebCore::CDMSessionAVFoundationCF::CDMSessionAVFoundationCF):
        * platform/graphics/avfoundation/cf/CDMSessionAVFoundationCF.h:
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::MediaPlayerPrivateAVFoundationCF::createSession):
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.h:
        * platform/graphics/avfoundation/objc/CDMInstanceFairPlayStreamingAVFObjC.h:
        * platform/graphics/avfoundation/objc/CDMInstanceFairPlayStreamingAVFObjC.mm:
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::CDMInstanceFairPlayStreamingAVFObjC):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::setServerCertificate):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::setStorageDirectory):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRequest):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRenewingRequest):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvidePersistableRequest):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::didFailToProvideRequest):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::requestDidSucceed):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::shouldRetryRequestForReason):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::groupSessionIdentifierChanged):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::externalProtectionStatusDidChangeForContentKeyRequest):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::CDMInstanceSessionFairPlayStreamingAVFObjC):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestLicense):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateLicense):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::loadSession):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::closeSession):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::removeSessionData):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didFailToProvideRequest):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestDidSucceed):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged):
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::protectionStatusForDisplayID const):
        (WebCore::CDMInstanceFairPlayStreamingAVFObjC::setLogger): Deleted.
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::setLogger): Deleted.
        * platform/graphics/avfoundation/objc/CDMSessionAVContentKeySession.h:
        (WebCore::CDMSessionAVContentKeySession::logClassName const):
        * platform/graphics/avfoundation/objc/CDMSessionAVContentKeySession.mm:
        (WebCore::CDMSessionAVContentKeySession::CDMSessionAVContentKeySession):
        (WebCore::CDMSessionAVContentKeySession::generateKeyRequest):
        (WebCore::CDMSessionAVContentKeySession::releaseKeys):
        (WebCore::CDMSessionAVContentKeySession::update):
        (WebCore::CDMSessionAVContentKeySession::addParser):
        (WebCore::CDMSessionAVContentKeySession::removeParser):
        (WebCore::CDMSessionAVContentKeySession::generateKeyReleaseMessage):
        * platform/graphics/avfoundation/objc/CDMSessionAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/CDMSessionAVFoundationObjC.mm:
        (WebCore::CDMSessionAVFoundationObjC::CDMSessionAVFoundationObjC):
        (WebCore::CDMSessionAVFoundationObjC::~CDMSessionAVFoundationObjC):
        (WebCore::CDMSessionAVFoundationObjC::generateKeyRequest):
        (WebCore::CDMSessionAVFoundationObjC::update):
        (WebCore::CDMSessionAVFoundationObjC::playerDidReceiveError):
        (WebCore::CDMSessionAVFoundationObjC::logChannel const):
        * platform/graphics/avfoundation/objc/CDMSessionAVStreamSession.h:
        (WebCore::CDMSessionAVStreamSession::logClassName const):
        * platform/graphics/avfoundation/objc/CDMSessionAVStreamSession.mm:
        (WebCore::CDMSessionAVStreamSession::CDMSessionAVStreamSession):
        (WebCore::CDMSessionAVStreamSession::~CDMSessionAVStreamSession):
        (WebCore::CDMSessionAVStreamSession::generateKeyRequest):
        (WebCore::CDMSessionAVStreamSession::releaseKeys):
        (WebCore::CDMSessionAVStreamSession::update):
        (WebCore::CDMSessionAVStreamSession::addParser):
        (WebCore::CDMSessionAVStreamSession::removeParser):
        (WebCore::CDMSessionAVStreamSession::generateKeyReleaseMessage):
        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.h:
        (WebCore::CDMSessionMediaSourceAVFObjC::logger const):
        (WebCore::CDMSessionMediaSourceAVFObjC::logIdentifier const):
        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.mm:
        (WebCore::CDMSessionMediaSourceAVFObjC::CDMSessionMediaSourceAVFObjC):
        (WebCore::CDMSessionMediaSourceAVFObjC::logChannel const):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::shouldWaitForLoadingOfResource):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createSession):
        * platform/graphics/gstreamer/eme/CDMThunder.cpp:
        (WebCore::CDMFactoryThunder::createCDM):
        * platform/graphics/gstreamer/eme/CDMThunder.h:
        * testing/LegacyMockCDM.cpp:
        (WebCore::LegacyMockCDM::createSession):
        (WebCore::MockCDMSession::MockCDMSession):
        * testing/LegacyMockCDM.h:
        * testing/MockCDMFactory.cpp:
        (WebCore::MockCDMFactory::createCDM):
        * testing/MockCDMFactory.h:

2022-02-24  Oriol Brufau  <obrufau@igalia.com>

        [css-cascade] Support 'revert' in @keyframes
        https://bugs.webkit.org/show_bug.cgi?id=237073

        Reviewed by Darin Adler.

        Resolver::styleForKeyframe was constructing a RenderStyle with only the
        styles specified in the @keyframes. But not taking into account the UA
        and user rules that affect the element meant that 'revert' was broken.
        Since Builder::applyProperty didn't find the declarations from other
        origins, 'revert' just behaved as 'unset'.

        This patch solves it by detecting if the @keyframes has a 'revert' value
        and in that case it collects the UA and user rules so that it can be
        resolved properly.

        Tests: imported/w3c/web-platform-tests/css/css-cascade/revert-val-006.html
               imported/w3c/web-platform-tests/css/css-cascade/revert-val-007.html
               imported/w3c/web-platform-tests/css/css-cascade/revert-val-008.html
               imported/w3c/web-platform-tests/css/css-cascade/revert-val-010.html

        * style/ElementRuleCollector.cpp:
        (WebCore::Style::ElementRuleCollector::addAuthorKeyframeRules):
        * style/ElementRuleCollector.h:
        * style/StyleResolver.cpp:
        (WebCore::Style::Resolver::styleForKeyframe):

2022-02-24  Devin Rousso  <drousso@apple.com>

        REGRESSION(r290436): fix build failures
        https://bugs.webkit.org/show_bug.cgi?id=237149

        Reviewed by Tim Horton.

        * Modules/applepay/cocoa/PaymentSessionErrorCocoa.mm:
        (WebCore::PaymentSessionError::sessionError const):
        * rendering/RenderThemeCocoa.mm:
        (WebCore::RenderThemeCocoa::adjustApplePayButtonStyle const):
        Replace `PAL::get_PassKitCore_*()` with `#define` declared in `<pal/cocoa/PassKitSoftLink.h>`.

2022-02-24  Megan Gardner  <megan_gardner@apple.com>

        Add percent decoding to Scroll to Text Fragment parsing.
        https://bugs.webkit.org/show_bug.cgi?id=236818

        Reviewed by Chris Dumez.

        Leverage URL parser to percent decode parsed text directives in
        scroll to text fragment implementation.

        Tests: http/wpt/html/dom/scroll-to-text-fragment/scroll-to-text-fragment-start-emoji.html
               http/wpt/html/dom/scroll-to-text-fragment/scroll-to-text-fragment-start-sentence.html
               http/wpt/html/dom/scroll-to-text-fragment/scroll-to-text-fragment-start.html

        * dom/FragmentDirectiveParser.cpp:
        (WebCore::FragmentDirectiveParser::parseFragmentDirective):

2022-02-24  Alan Bujtas  <zalan@apple.com>

        [IFC][Integration] Enable non-paginated vertical-rl writing mode
        https://bugs.webkit.org/show_bug.cgi?id=236897

        Reviewed by Antti Koivisto.

        * layout/integration/LayoutIntegrationCoverage.cpp:
        (WebCore::LayoutIntegration::canUseForStyle):

2022-02-24  Chris Dumez  <cdumez@apple.com>

        Fix bad logging in SharedWorkerObjectConnection::notifyWorkerObjectOfLoadCompletion()
        https://bugs.webkit.org/show_bug.cgi?id=237146

        Reviewed by Geoffrey Garen.

        Fix bad logging in SharedWorkerObjectConnection::notifyWorkerObjectOfLoadCompletion().
        It was logging an error even when the load succeeded.

        * workers/shared/SharedWorkerObjectConnection.cpp:
        (WebCore::SharedWorkerObjectConnection::notifyWorkerObjectOfLoadCompletion):

2022-02-24  Kate Cheney  <katherine_cheney@apple.com>

        Update CSP console logging
        https://bugs.webkit.org/show_bug.cgi?id=232216
        <rdar://problem/89322580>

        Reviewed by Brent Fulgham.

        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::willSendRequestInternal):
        (WebCore::SubresourceLoader::originalHeaders const):
        * page/csp/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::allowResourceFromSource const):
        (WebCore::ContentSecurityPolicy::allowWorkerFromSource const):
        (WebCore::ContentSecurityPolicy::allowScriptFromSource const):
        (WebCore::ContentSecurityPolicy::allowStyleFromSource const):

2022-02-24  Alan Bujtas  <zalan@apple.com>

        [LFC][IFC] Non-orthogonal inline block boxes keep their baseline on ideographic lines
        https://bugs.webkit.org/show_bug.cgi?id=236946

        Reviewed by Antti Koivisto.

        This is similar to the logic in RenderBlock::baselinePosition for inline block boxes.

        * layout/formattingContexts/inline/InlineLineBoxBuilder.cpp:
        (WebCore::Layout::LineBoxBuilder::constructInlineLevelBoxes):
        (WebCore::Layout::LineBoxBuilder::adjustIdeographicBaselineIfApplicable):
        * layout/integration/LayoutIntegrationBoxTree.cpp:
        (WebCore::LayoutIntegration::BoxTree::buildTree):
        * layout/integration/LayoutIntegrationLineLayout.cpp:
        (WebCore::LayoutIntegration::LineLayout::updateLayoutBoxDimensions):
        * rendering/RenderBlock.h:

2022-02-24  Alan Bujtas  <zalan@apple.com>

        [IFC][Integration] verticalLogicalMargin returns incorrect values for vertical-rl
        https://bugs.webkit.org/show_bug.cgi?id=237138

        Reviewed by Antti Koivisto.

        This was caused by an accidental copy/paste.

        * layout/integration/LayoutIntegrationLineLayout.cpp:
        (WebCore::LayoutIntegration::verticalLogicalMargin): also switch over to "switch".

2022-02-24  Devin Rousso  <drousso@apple.com>

        [Apple Pay] switch from `PassKit/*` to `PassKit[Core,UI]/*`
        https://bugs.webkit.org/show_bug.cgi?id=237091
        <rdar://problem/81085862>

        Reviewed by Tim Horton.

        * Modules/applepay/cocoa/PaymentSessionErrorCocoa.mm:
        (WebCore::PaymentSessionError::sessionError const):
        * rendering/RenderThemeCocoa.mm:
        (WebCore::RenderThemeCocoa::adjustApplePayButtonStyle const):

2022-02-24  Frédéric Wang  <fwang@igalia.com>

        RELEASE_ASSERT(!renderer()); in WebCore::Node::~Node() + 479 (Node.cpp:366)
        https://bugs.webkit.org/show_bug.cgi?id=235380

        Reviewed by Ryosuke Niwa.

        RenderTreeUpdater::tearDownRenderers() browse the composed tree to tear down descendants.
        However, element with a shadow root are handled specially in
        ComposedTreeIterator::ComposedTreeIterator(), they have to be handled specially by calling
        a tearDownLeftoverShadowHostChildren(). This patch does the same for slot elements which
        are also handled specially in ComposedTreeIterator(). It also makes names within
        tearDownLeftoverShadowHostChildren() more generic. This in particular fixes a release assert
        when a slot with pseudo elements children is torn down.

        Test: fast/shadow-dom/slot-with-pseudo-element-children-renderer-teardown.html

        * rendering/updating/RenderTreeUpdater.cpp:
        (WebCore::RenderTreeUpdater::tearDownRenderers): Also call tearDownLeftoverShadowHostChildren
        for a slot element and add a comment pointing to the method corresponding to these special
        cases.
        (WebCore::RenderTreeUpdater::tearDownLeftoverChildrenOfComposedTree): Renamed to remove "shadow host".
        * rendering/updating/RenderTreeUpdater.h: Ditto.

2022-02-24  Alan Bujtas  <zalan@apple.com>

        [IFC][Integration] Adjust hittest coords when in flipped writing mode
        https://bugs.webkit.org/show_bug.cgi?id=237103

        Reviewed by Antti Koivisto.

        This is similar to what we do in LegacyInlineFlowBox::nodeAtPoint.

        * layout/integration/LayoutIntegrationLineLayout.cpp:
        (WebCore::LayoutIntegration::flippedRectForWritingMode):
        (WebCore::LayoutIntegration::flippedPointForWritingMode):
        (WebCore::LayoutIntegration::LineLayout::hitTest):

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        LibWebRTCCodecs, -Proxy create and communicate the RemoteVideoFrameProxy incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=237083

        Reviewed by Youenn Fablet.

        Add functions to set media sample ownership identity if the underlying object
        supports the feature.

        * platform/MediaSample.h:
        (WebCore::MediaSample::setOwnershipIdentity):
        * platform/graphics/avfoundation/objc/MediaSampleAVFObjC.h:
        * platform/graphics/avfoundation/objc/MediaSampleAVFObjC.mm:
        (WebCore::MediaSampleAVFObjC::setOwnershipIdentity):
        * platform/graphics/cv/VideoFrameCV.h:
        * platform/graphics/cv/VideoFrameCV.mm:
        (WebCore::VideoFrameCV::setOwnershipIdentity):

2022-02-24  Martin Robinson  <mrobinson@webkit.org>

        Implement logical properties for CSS overscroll-behavior
        https://bugs.webkit.org/show_bug.cgi?id=237080

        Reviewed by Simon Fraser.

        No new tests. This is covered by existing WPT tests.

        Add support for overscroll-behavior-block and overscroll-behavior-inline, the logical versions
        of the overscroll behavior properties.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::valueForPropertyInStyle):
        * css/CSSProperties.json:
        * css/parser/CSSParserContext.cpp:
        (WebCore::CSSParserContext::isPropertyRuntimeDisabled const):
        * css/parser/CSSParserFastPaths.cpp:
        (WebCore::CSSParserFastPaths::isValidKeywordPropertyAndValue):
        (WebCore::CSSParserFastPaths::isKeywordPropertyID):
        * css/parser/CSSPropertyParser.cpp:
        (WebCore::CSSPropertyParser::parseSingleValue):

2022-02-24  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. [GTK] Mark GLContextGLX.cpp as no-unify

        * SourcesGTK.txt:

2022-02-23  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r290284.
        https://bugs.webkit.org/show_bug.cgi?id=237131

        It is preventing the fuzzer from finding other bugs

        Reverted changeset:

        "Make input element UA shadow tree creation lazy"
        https://bugs.webkit.org/show_bug.cgi?id=236747
        https://commits.webkit.org/r290284

2022-02-23  Tim Nguyen  <ntim@apple.com>

        Use of showModalDialog should appear as a warning in WI console
        https://bugs.webkit.org/show_bug.cgi?id=237046

        Reviewed by Devin Rousso.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::showModalDialog):

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Modernize / simplify ScrollingStateTree a bit
        https://bugs.webkit.org/show_bug.cgi?id=237111

        Reviewed by Simon Fraser.

        Modernize / simplify ScrollingStateTree a bit.

        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::nodeTypeAndParentMatch):
        Simplify function body to be on one line and make function static since it doesn't
        need an instance.

        (WebCore::nodeWasReattachedRecursive):
        Make function static since it doesn't need an instance.

        (WebCore::ScrollingStateTree::createUnparentedNode):
        - Pass a reference instead of pointer

        (WebCore::ScrollingStateTree::insertNode):
        - Use template deduction for Ref<>
        - Drop unnecessarily 0-check for parentID since stateNodeForID(parentID) would have
          returned null and we would have returned early a few lines above.

        (WebCore::ScrollingStateTree::unparentNode):
        (WebCore::ScrollingStateTree::unparentChildrenAndDestroyNode):
        - Use RefPtr type for protectedNode based on the variable naming. Previously, auto
          would have deduced to a raw pointer.

        (WebCore::ScrollingStateTree::detachAndDestroySubtree):
        (WebCore::ScrollingStateTree::clear):
        Pass more references instead of pointers.

        (WebCore::ScrollingStateTree::commit):
        use auto and std::exchange() to make the code a bit more concise.

        (WebCore::ScrollingStateTree::removeNodeAndAllDescendants):
        Take a reference in parameter instead of a raw pointer since the pointer couldn't
        be null.

        (WebCore::ScrollingStateTree::recursiveNodeWillBeRemoved):
        - Take a reference in parameter instead of a raw pointer since the pointer couldn't
        be null.
        - Rename currNode to currentNode per WebKit coding style.

        (WebCore::ScrollingStateTree::willRemoveNode):
        Take a reference in parameter instead of a raw pointer since the pointer couldn't
        be null.

        (WebCore::ScrollingStateTree::stateNodeForID const):
        Rewrite function in a more concise way by calling HashMap::get() instead of HashMap::find().

        (WebCore::reconcileLayerPositionsRecursive):
        - Make function static since it doesn't need an instance
        - Rename currNode to currentNode per WebKit coding style

        (WebCore::ScrollingStateTree::reconcileViewportConstrainedLayerPositions):
        Make function a bit more concise by not doing an early return.

        (showScrollingStateTree):
        Take in a reference instead of a raw pointer.

        (WebCore::ScrollingStateTree::nodeTypeAndParentMatch const): Deleted.
        (WebCore::ScrollingStateTree::nodeWasReattachedRecursive): Deleted.
        (WebCore::ScrollingStateTree::reconcileLayerPositionsRecursive): Deleted.
        * page/scrolling/ScrollingStateTree.h:

2022-02-23  Robert Jenner  <Jenner@apple.com>

        Unreviewed, reverting r290351 and r290404.

        Broke the build after revert of initial commit (r290348)
        Rebases no longer needed due to revert

        Reverted changesets:

        "Use of showModalDialog should appear as a warning in WI
        console"
        https://bugs.webkit.org/show_bug.cgi?id=237046
        https://commits.webkit.org/r290351

        "Use of showModalDialog should appear as a warning in WI
        console"
        https://bugs.webkit.org/show_bug.cgi?id=237046
        https://commits.webkit.org/r290404

2022-02-23  Robert Jenner  <Jenner@apple.com>

        Unreviewed, reverting r290348.

        Broke a test, slowing down EWS.

        Reverted changeset:

        "Create a DOMWindow::printWarningMessage method and start
        using it in DOMWindow.cpp"
        https://bugs.webkit.org/show_bug.cgi?id=237047
        https://commits.webkit.org/r290348

2022-02-23  Alan Bujtas  <zalan@apple.com>

        [IFC][Integration] Flip accumulatedOffset to take writing mode into account when hittesting across formatting contexts.
        https://bugs.webkit.org/show_bug.cgi?id=237094

        Reviewed by Antti Koivisto.

        Both paint and hittest need coord flip (vertical writing mode here) when jumping through formatting context boundaries.

        * layout/integration/LayoutIntegrationLineLayout.cpp:
        (WebCore::LayoutIntegration::flippedContentOffsetIfNeeded):
        (WebCore::LayoutIntegration::LineLayout::paint):
        (WebCore::LayoutIntegration::LineLayout::hitTest):

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Adopt more widely the new URL constructor that takes in a String
        https://bugs.webkit.org/show_bug.cgi?id=237099

        Reviewed by Darin Adler.

        * Modules/paymentrequest/PaymentRequest.cpp:
        (WebCore::convertAndValidatePaymentMethodIdentifier):
        * css/parser/CSSParserContext.cpp:
        (WebCore::CSSParserContext::completeURL const):
        * dom/Document.cpp:
        (WebCore::Document::referrer):
        * html/DOMURL.cpp:
        (WebCore::DOMURL::revokeObjectURL):
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::parsePrivateClickMeasurement const):
        * inspector/InspectorFrontendHost.cpp:
        (WebCore::InspectorFrontendHost::didNavigateExtensionTab):
        (WebCore::InspectorFrontendHost::inspectedPageDidNavigate):
        * inspector/agents/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::didClearWindowObjectInWorld):
        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::extractInnerURL):
        * platform/cocoa/NetworkExtensionContentFilter.mm:
        (WebCore::NetworkExtensionContentFilter::willSendRequest):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::load):
        (WebCore::MediaPlayerPrivateGStreamer::handleMessage):
        (WebCore::MediaPlayerPrivateGStreamer::loadNextLocation):
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
        (convertPlaybinURI):
        * platform/network/soup/URLSoup.cpp:
        (WebCore::soupURIToURL):
        * platform/win/PasteboardWin.cpp:
        (WebCore::filesystemPathFromUrlOrTitle):
        * testing/MockPaymentCoordinator.cpp:
        (WebCore::MockPaymentCoordinator::showPaymentUI):
        * workers/service/ServiceWorkerRegistrationKey.cpp:
        (WebCore::ServiceWorkerRegistrationKey::fromDatabaseKey):
        * workers/service/server/RegistrationDatabase.cpp:
        (WebCore::RegistrationDatabase::importRecords):

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Improve error message for missing pubKeyCredParams
        https://bugs.webkit.org/show_bug.cgi?id=235421
        rdar://87884875

        Reviewed by Brent Fulgham.

        We have seen confusion from library authors around the language
        used in this error not indicating enough information about what
        the problem is. This patch adds additional information, useful
        to developers seeing this error.

        * Modules/webauthn/AuthenticatorCoordinator.cpp:
        (WebCore::AuthenticatorCoordinator::create const):

2022-02-23  Alan Bujtas  <zalan@apple.com>

        [IFC][Integration] LineLayout::firstLinePhysicalBaseline/lastLineLogicalBaseline should flip box baseline value for vertical-lr
        https://bugs.webkit.org/show_bug.cgi?id=237090

        Reviewed by Antti Koivisto.

        * layout/integration/LayoutIntegrationLineLayout.cpp:
        (WebCore::LayoutIntegration::LineLayout::firstLinePhysicalBaseline const):
        (WebCore::LayoutIntegration::LineLayout::lastLineLogicalBaseline const):
        (WebCore::LayoutIntegration::LineLayout::firstInlineBoxRect const):

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        Prevent use of PDFKit when using PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=237052
        rdar://89251696

        Reviewed by Tim Horton.

        Add WEBCORE_EXPORT in order to use isPDFMIMEType.

        * platform/MIMETypeRegistry.h:

2022-02-23  Alan Bujtas  <zalan@apple.com>

        [IFC][Integration] LineLayout::firstInlineBoxRect should flip the rect coordinates for vertical-rl
        https://bugs.webkit.org/show_bug.cgi?id=237036

        Reviewed by Antti Koivisto and Darin Adler.

        This is similar to what RenderInline::firstInlineBoxTopLeft does.

        * layout/integration/LayoutIntegrationLineLayout.cpp:
        (WebCore::LayoutIntegration::LineLayout::firstInlineBoxRect const):

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] userHandle not marked nullable in _WKWebAuthenticationAssertionResponse
        https://bugs.webkit.org/show_bug.cgi?id=237043
        rdar://89317740

        Reviewed by Brent Fulgham.

        The userHandle is a nullable field on UserEntity. This patch changes
        various API/SPI to allow passing null userHandle.

        * Modules/webauthn/AuthenticatorAssertionResponse.cpp:
        (WebCore::AuthenticatorAssertionResponse::create):
        (WebCore::AuthenticatorAssertionResponse::AuthenticatorAssertionResponse):
        * Modules/webauthn/AuthenticatorAssertionResponse.h:

2022-02-23  Antti Koivisto  <antti@apple.com>

        [CSS Container Queries] offsetWidth/Height and similar should update layout for container queries
        https://bugs.webkit.org/show_bug.cgi?id=237079

        Reviewed by Simon Fraser.

        Fix

        css/css-contain/container-queries/inline-size-containment.html
        css/css-contain/container-queries/inline-size-containment-vertical-rl.html

        * dom/Document.cpp:
        (WebCore::Document::updateLayout):

        Make iterative instead of recursive.

        (WebCore::Document::updateLayoutIfDimensionsOutOfDate):

        Check for query containers.
        Call local updateLayout instead of the FrameViewLayoutContext one.

        * page/FrameView.cpp:
        (WebCore::FrameView::updateLayoutAndStyleIfNeededRecursive):
        * style/StyleScope.cpp:
        (WebCore::Style::Scope::updateQueryContainerState):

        Add protection against infinite layout/invalidation cycle with unstable layouts.

        * style/StyleScope.h:

2022-02-23  Andres Gonzalez  <andresg_22@apple.com>

        Fix for assert crash in AccessibilityRenderObject::visiblePositionForIndex.
        https://bugs.webkit.org/show_bug.cgi?id=236795
        rdar://89025180

        Reviewed by Chris Fleizach.

        Test: accessibility/native-text-control-attributed-string.html

        In some cases like the one described in the bug, AccessibilityRenderObject::visiblePositionForIndex
        is passed an index greater than the length of the text actually contained
        in the text control. This triggers this assert that verifies that you can
        round-trip from index to VisiblePosition and back to index. This patch
        does a bounds check in the index and adjust if necessary.
        The test exercise this method through the JS AccessibilityUIElement::attributedStringForRange
        for both <input> of type text and password.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::visiblePositionForIndex const):

2022-02-23  Diego Pino Garcia  <dpino@igalia.com>

        [GTK] Unreviewed, build fix for Debian Stable after r290366

        * platform/graphics/gstreamer/GStreamerVideoSinkCommon.cpp:
        (webKitVideoSinkSetMediaPlayerPrivate):

2022-02-23  Jer Noble  <jer.noble@apple.com>

        REGRESSION (r287574): ASSERTION FAILED: !m_impl || !m_shouldEnableAssertions || m_impl->wasConstructedOnMainThread() == isMainThread() under WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack()
        https://bugs.webkit.org/show_bug.cgi?id=235168
        <rdar://problem/87518939>

        Reviewed by Alexey Proskuryakov.

        Use runOnMainThread() from within WebCore, as it will dispatch to the correct thread when
        running under iOS/WebKitLegacy.

        * platform/graphics/avfoundation/AVTrackPrivateAVFObjCImpl.mm:
        (WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteVideoFrameObjectHeap::getVideoFrameBuffer can use base class pixelBuffer accessor
        https://bugs.webkit.org/show_bug.cgi?id=237020

        Reviewed by Kimmo Kinnunen.

        No change of behavior.
        Covered by existing tests.

        * platform/graphics/cv/VideoFrameCV.h:
        (WebCore::VideoFrameC$V::pixelBuffer const: Mark it as final.

2022-02-23  Zan Dobersek  <zdobersek@igalia.com>

        [GStreamer] Add WebKitDMABufVideoSink
        https://bugs.webkit.org/show_bug.cgi?id=236883

        Reviewed by Philippe Normand.

        Add custom WebKitDMABufVideoSink sink that is able to accept decoded
        dmabuf or raw data in a range of RGB-like or YUV formats.

        The sink is pretty straightforward, in large part mirroring the
        WebKitGLVideoSink implementation. The formats that (at the moment) we
        can correctly handle inside the TextureMapper-based graphics pipeline
        are combined with both the dmabuf or raw memory type during the caps
        construction. Like the GL counterpart, the received samples are passed
        on to the associated MediaPlayerPrivateGStreamer object. The common
        integration into the MediaPlayerPrivateGStreamer functionality is
        encapsulated into the webKitVideoSinkSetMediaPlayerPrivate() function.

        The MediaPlayerPrivateGStreamer implementation will be enhanced later to
        properly handle samples conforming to either variant of these caps. But
        the idea is that when using this sink, a dmabuf-containing sample will
        pass the dmabuf to the graphics subsystem and a raw-data-containing
        sample will copy the data into a dmabuf object (created or reused) and
        then pass it on.

        The WEBKIT_GST_DMABUF_SINK_FORCED_FALLBACK_CAPS_FORMAT environment
        variable can be set to specify the desired exclusive format that this
        sink should support. This is especially helpful to debug the correct
        handling of different RGB or YUV formats inside the graphics pipeline.
        When set, only raw data of the specified format is accepted, meaning the
        pipeline upstream will perform any necessary conversion of the decoded
        data into the desired format. Raw data is then packed into dmabufs and
        sent into the pipeline for display, enabling the developer to examine
        whether the given format is handled appropriately.

        The sink element is registered in registerWebKitGStreamerElements().
        This functionality will require The GStreamer allocators library, so the
        necessary dependency glue is also provided.

        * platform/GStreamer.cmake:
        * platform/graphics/gstreamer/DMABufVideoSinkGStreamer.cpp: Added.
        (forcedFallbackCapsFormat):
        (webKitDMABufVideoSinkConstructed):
        (webKitDMABufVideoSinkFinalize):
        (webKitDMABufVideoSinkGetProperty):
        (webkit_dmabuf_video_sink_class_init):
        (webKitDMABufVideoSinkSetMediaPlayerPrivate):
        (webKitDMABufVideoSinkProbePlatform):
        * platform/graphics/gstreamer/DMABufVideoSinkGStreamer.h: Added.
        * platform/graphics/gstreamer/GLVideoSinkGStreamer.cpp:
        (webKitGLVideoSinkSetMediaPlayerPrivate):
        * platform/graphics/gstreamer/GStreamerCommon.cpp:
        (WebCore::registerWebKitGStreamerElements):
        * platform/graphics/gstreamer/GStreamerVideoSinkCommon.cpp: Added.
        (webKitVideoSinkSetMediaPlayerPrivate):
        * platform/graphics/gstreamer/GStreamerVideoSinkCommon.h: Added.

2022-02-23  Sihui Liu  <sihui_liu@apple.com>

        REGRESSION(r289474): [iOS] ASSERTION FAILED: isMainThread() under WebCore::IDBServer::UniqueIDBDatabase::abortActiveTransactions()
        https://bugs.webkit.org/show_bug.cgi?id=237066
        <rdar://problem/89324810>

        Reviewed by Chris Dumez.

        We no longer need the assertion because the function can be called on non-main thread since r289474, where we 
        started to abort transactions for suspension on WorkQueue. To avoid confusion, rename mainThreadAbortResult to 
        suspensionAbortResult.

        * Modules/indexeddb/server/UniqueIDBDatabase.cpp:
        (WebCore::IDBServer::UniqueIDBDatabase::abortTransaction):
        (WebCore::IDBServer::UniqueIDBDatabase::abortActiveTransactions):
        * Modules/indexeddb/server/UniqueIDBDatabaseTransaction.h:
        (WebCore::IDBServer::UniqueIDBDatabaseTransaction::setSuspensionAbortResult):
        (WebCore::IDBServer::UniqueIDBDatabaseTransaction::suspensionAbortResult const):
        (WebCore::IDBServer::UniqueIDBDatabaseTransaction::setMainThreadAbortResult): Deleted.
        (WebCore::IDBServer::UniqueIDBDatabaseTransaction::mainThreadAbortResult const): Deleted.

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Crash when calling WEBGL_lose_context.loseContext() after the context has been lost
        https://bugs.webkit.org/show_bug.cgi?id=236966

        Reviewed by Dean Jackson.

        WebGLRenderingContextBase::forceLostContext() would
        try to synthesize a GL error to the underlying
        m_context. However, m_context is cleared when a real
        context loss happens. This happens for example when we
        simulate a GPU status failure or when we create too
        many contexts. The m_context is not currently cleared
        when the page simulates context lost via WEBGL_lose_contexts.loseContext().

        Test: webgl/lose-context-after-context-lost.html

        * html/canvas/WebGLRenderingContextBase.cpp:
        (WebCore::WebGLRenderingContextBase::synthesizeGLError):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        Optimize RemoteVideoFrame handling in WebProcess WebRTC pipeline
        https://bugs.webkit.org/show_bug.cgi?id=236970

        Reviewed by Eric Carlson.

        In case of remote video frame, directly get the remote video frame as a MediaSample in receive side.
        On send side, wrap remote video frames as provider-based WebRTC video frames.
        LibWebRTCCodecs will optimize the handling of remote frames for hardware encoders and no change will
        happen for software encoders.
        Covered by existing tests.

        * platform/mediastream/mac/RealtimeIncomingVideoSourceCocoa.mm:
        * platform/mediastream/mac/RealtimeOutgoingVideoSourceCocoa.cpp:

2022-02-23  Lauro Moura  <lmoura@igalia.com>

        Unreviewed, non-unified build fix after 247623@main
        https://bugs.webkit.org/show_bug.cgi?id=237074

        * bindings/js/WebAssemblyCachedScriptSourceProvider.h: Namespace.

2022-02-22  Chris Dumez  <cdumez@apple.com>

        http/wpt/push-api/onpush-disabled.html fails
        https://bugs.webkit.org/show_bug.cgi?id=236874
        <rdar://problem/89176154>

        Reviewed by Youenn Fablet.

        Before running the test, we would construct a new WKWebView with the Push API setting disabled.
        We would then run the test, which would launch a service worker. Normally, we would expect the
        service worker to inherit the settings from the WKWebView. However, it was not reliably
        happening because the settings for the service worker are stored on the WebProcessPool and
        WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess() was selecting a
        random WebProcessPool object (the first one returned by processPools()).

        To address the issue, we now pass the ProcessIdentifier of the client that requested the
        service worker connection so that establishServiceWorkerContextConnectionToNetworkProcess() can
        now prioritize the WebProcessPool of that process. Also, as an optimization, we now prioritize
        this client process to run the service worker (assuming it is origin-clean).

        No new tests, unskipped existing test.

        * workers/service/server/SWServer.cpp:
        (WebCore::SWServer::createContextConnection):
        * workers/service/server/SWServer.h:

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Use of showModalDialog should appear as a warning in WI console
        https://bugs.webkit.org/show_bug.cgi?id=237046

        Reviewed by Devin Rousso and Darin Adler.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::showModalDialog):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Add a URL constructor that takes a String
        https://bugs.webkit.org/show_bug.cgi?id=237068

        Reviewed by Darin Adler.

        Adopt the new `URL(const String&)` constructor.

        * Modules/webauthn/AuthenticatorCoordinator.cpp:
        (WebCore::AuthenticatorCoordinatorInternal::processAppIdExtension):
        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::connect):
        * bindings/js/ScriptModuleLoader.cpp:
        (WebCore::resolveModuleSpecifier):
        (WebCore::ScriptModuleLoader::fetch):
        (WebCore::ScriptModuleLoader::moduleURL):
        (WebCore::ScriptModuleLoader::responseURLFromRequestURL):
        (WebCore::ScriptModuleLoader::importModule):
        * bindings/js/SerializedScriptValue.cpp:
        (WebCore::CloneDeserializer::readFile):
        (WebCore::CloneDeserializer::readTerminal):
        * contentextensions/ContentExtensionActions.cpp:
        (WebCore::ContentExtensions::RedirectAction::parse):
        (WebCore::ContentExtensions::RedirectAction::applyToRequest):
        * dom/Document.cpp:
        (WebCore::Document::referrer):
        * html/URLInputType.cpp:
        (WebCore::URLInputType::typeMismatchFor const):
        * loader/DocumentLoader.cpp:
        (WebCore::microsoftTeamsRedirectURL):
        * loader/PrivateClickMeasurement.cpp:
        (WebCore::PrivateClickMeasurement::parseAttributionRequestQuery):
        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::deleteCacheForOrigin):
        * loader/archive/cf/LegacyWebArchive.cpp:
        (WebCore::LegacyWebArchive::createResource):
        * loader/archive/mhtml/MHTMLParser.cpp:
        (WebCore::MHTMLParser::parseNextPart):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::open):
        * page/Quirks.cpp:
        (WebCore::isBBCDomain):
        (WebCore::Quirks::triggerOptionalStorageAccessQuirk const):
        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::createFromString):
        (WebCore::SecurityOrigin::create):
        * page/SecurityOriginData.cpp:
        (WebCore::SecurityOriginData::toURL const):
        * page/SecurityPolicy.cpp:
        (WebCore::SecurityPolicy::generateReferrerHeader):
        * page/csp/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::reportViolation const):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::originsInMediaCache):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::clearMediaCacheForOrigins):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::setPlaybinURL):
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
        (webKitWebSrcMakeRequest):
        * platform/gtk/SelectionData.cpp:
        (WebCore::SelectionData::setURIList):
        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::setHTTPReferrer):
        * platform/network/cf/ResourceErrorCF.cpp:
        (WebCore::ResourceError::platformLazyInit):
        * platform/network/cf/SocketStreamHandleImplCFNet.cpp:
        (WebCore::SocketStreamHandleImpl::SocketStreamHandleImpl):
        * platform/network/curl/CurlRequest.cpp:
        (WebCore::CurlRequest::didReceiveHeader):
        * platform/network/mac/ResourceErrorMac.mm:
        (WebCore::ResourceError::platformLazyInit):
        * platform/win/PasteboardWin.cpp:
        (WebCore::Pasteboard::writeString):
        * testing/Internals.cpp:
        (WebCore::Internals::sendH2Ping):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Drop StringHasher::hashMemory() and use the modern Hasher instead
        https://bugs.webkit.org/show_bug.cgi?id=237049

        Reviewed by Sam Weinig and Darin Adler.

        * Modules/indexeddb/shared/IDBResourceIdentifier.h:
        (WebCore::add):
        (WebCore::IDBResourceIdentifierHash::hash):
        (WebCore::IDBResourceIdentifier::hash const): Deleted.
        * dom/Attribute.h:
        (WebCore::add):
        * dom/DocumentSharedObjectPool.cpp:
        (WebCore::DocumentSharedObjectPool::cachedShareableElementDataWithAttributes):
        (WebCore::attributeHash): Deleted.
        * dom/QualifiedName.cpp:
        (WebCore::QualifiedName::QualifiedNameImpl::computeHash const):
        * dom/QualifiedName.h:
        (WebCore::add):
        (WebCore::hashComponents): Deleted.
        * dom/QualifiedNameCache.cpp:
        (WebCore::QNameComponentsTranslator::hash):
        * page/GlobalWindowIdentifier.h:
        (WebCore::add):
        (WTF::GlobalWindowIdentifierHash::hash):
        (WebCore::GlobalWindowIdentifier::hash const): Deleted.
        * page/SecurityOriginHash.h:
        (WebCore::SecurityOriginHash::hash):
        * platform/ScriptExecutionContextIdentifier.h:
        (WebCore::add):
        (WebCore::ProcessQualified<UUID>::hash const): Deleted.
        (WTF::computeHash): Deleted.
        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::hash const):
        * platform/graphics/win/FontPlatformDataCGWin.cpp:
        (WebCore::FontPlatformData::hash const):
        * svg/SVGElementInlines.h:
        (WebCore::SVGAttributeHashTranslator::hash):
        * workers/service/ServiceWorkerRegistrationKey.cpp:
        (WebCore::ServiceWorkerRegistrationKey::hash const): Deleted.
        * workers/service/ServiceWorkerRegistrationKey.h:
        (WebCore::add):
        (WTF::ServiceWorkerRegistrationKeyHash::hash):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Create a DOMWindow::printWarningMessage method and start using it in DOMWindow.cpp
        https://bugs.webkit.org/show_bug.cgi?id=237047

        Reviewed by Darin Adler.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::close):
        (WebCore::DOMWindow::webkitRequestAnimationFrame):
        (WebCore::DOMWindow::startListeningForDeviceOrientationIfNecessary):
        (WebCore::DOMWindow::startListeningForDeviceMotionIfNecessary):
        (WebCore::DOMWindow::printConsoleMessage const):
        (WebCore::DOMWindow::printErrorMessage const):
        (WebCore::DOMWindow::printWarningMessage const):
        * page/DOMWindow.h:

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Share more code between dispatchSessionStorageEvents() and dispatchLocalStorageEvents()
        https://bugs.webkit.org/show_bug.cgi?id=237040

        Reviewed by Geoffrey Garen.

        * storage/StorageEventDispatcher.cpp:
        (WebCore::dispatchStorageEvents):
        (WebCore::StorageEventDispatcher::dispatchSessionStorageEvents):
        (WebCore::StorageEventDispatcher::dispatchLocalStorageEvents):
        (WebCore::dispatchSessionStorageEventsToWindows): Deleted.
        (WebCore::dispatchLocalStorageEventsToWindows): Deleted.

2022-02-22  Chris Dumez  <cdumez@apple.com>

        CachedResourceLoader::allCachedSVGImages() reparses resource URLs unnecessarily
        https://bugs.webkit.org/show_bug.cgi?id=237002

        Reviewed by Darin Adler.

        Store URLs in the HashMaps instead of Strings since we have URLs initially and we
        need URLs eventually. This avoids having to re-parse the URL unnecessarily, which
        is fairly expensive.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::determineRevalidationPolicy const):
        (WebCore::CachedResourceLoader::notifyFinished):
        * loader/cache/CachedResourceLoader.h:

2022-02-22  Frédéric Wang  <fwang@igalia.com>

        null ptr deref via WebXRSystem::requestSession
        https://bugs.webkit.org/show_bug.cgi?id=235916

        Reviewed by Dean Jackson.
        WebXRSystem::requestSession() null checks the document's global object via the method
        Document::domWindow() and calls WebXRSystem::inlineSessionRequestIsAllowedForGlobalObject()
        which dereferences the global object via the method ScriptExecutionContext::globalObject().
        The former is just getting a raw pointer from Document::m_domWindow which (once set) remains
        non-null until the document is destroyed. The latter instead gets the DOM window via the
        document's FrameDestructionObserver::m_frame which is null when document is detached from the
        frame. Hence the two methods may disagree, leading to a null ptr deref in
        WebXRSystem::inlineSessionRequestIsAllowedForGlobalObject(). This patch works around that
        issue by explicitly null checking the result of Document::::globalObject(). Additionally, it
        makes the document (and its m_domWindow member) protected earlier in
        WebXRSystem::requestSession() i.e. before passing them to potentially complex subroutines
        immersiveSessionRequestIsAllowedForGlobalObject() and
        inlineSessionRequestIsAllowedForGlobalObject().

        Test: webxr/xr-requestSession-crash.html

        * Modules/webxr/WebXRSystem.cpp:
        (WebCore::WebXRSystem::inlineSessionRequestIsAllowedForGlobalObject const): null-check
        document::globalObject() before deferencing it.
        (WebCore::WebXRSystem::requestSession): protect document (and its m_domWindow member).

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Clean up / optimize even more call sites constructing vectors
        https://bugs.webkit.org/show_bug.cgi?id=236852

        Reviewed by Darin Adler.

        * Modules/applepay/PaymentCoordinator.cpp:
        (WebCore::PaymentCoordinator::beginPaymentSession):
        * Modules/applepay/cocoa/PaymentMethodCocoa.mm:
        (WebCore::convert):
        * Modules/cache/DOMCache.cpp:
        (WebCore::DOMCache::batchPutOperation):
        * Modules/gamepad/Gamepad.cpp:
        (WebCore::Gamepad::Gamepad):
        * Modules/gamepad/GamepadManager.cpp:
        (WebCore::GamepadManager::platformGamepadDisconnected):
        (WebCore::GamepadManager::makeGamepadVisible):
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::objectStoreNames const):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBKeyData.h:
        (WebCore::IDBKeyData::isDeletedValue const):
        (WebCore::add):
        (WebCore::IDBKeyDataHash::hash):
        (WebCore::IDBKeyData::hash const): Deleted.
        * Modules/indexeddb/IDBObjectStore.cpp:
        (WebCore::IDBObjectStore::indexNames const):
        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::objectStoreNames const):
        * Modules/mediacontrols/MediaControlsHost.cpp:
        (WebCore::MediaControlsHost::showMediaControlsContextMenu):
        * Modules/mediasource/MediaSource.cpp:
        (WebCore::MediaSource::activeRanges const):
        * Modules/mediasource/SampleMap.h:
        (WebCore::DecodeOrderSampleMap::size const):
        * Modules/mediasource/SourceBufferList.h:
        * Modules/speech/SpeechSynthesis.cpp:
        (WebCore::SpeechSynthesis::getVoices):
        * Modules/speech/cocoa/WebSpeechRecognizerTask.mm:
        (-[WebSpeechRecognizerTaskImpl callbackWithTranscriptions:isFinal:]):
        * Modules/speech/cocoa/WebSpeechRecognizerTaskMock.mm:
        (-[WebSpeechRecognizerTaskMock audioSamplesAvailable:]):
        * animation/CSSPropertyAnimation.cpp:
        (WebCore::blendFunc):
        * animation/DocumentTimelinesController.cpp:
        (WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents):
        * animation/KeyframeEffect.cpp:
        (WebCore::processPropertyIndexedKeyframes):
        * contentextensions/ContentExtension.cpp:
        (WebCore::ContentExtensions::ContentExtension::ContentExtension):
        * css/CSSValueList.h:
        (WebCore::CSSValueList::size const):
        * css/calc/CSSCalcOperationNode.cpp:
        (WebCore::CSSCalcOperationNode::hoistChildrenWithOperator):
        * css/parser/CSSParserImpl.cpp:
        (WebCore::CSSParserImpl::consumeContainerRule):
        * dom/DOMStringList.h:
        (WebCore::DOMStringList::create):
        (WebCore::DOMStringList::append):
        (WebCore::DOMStringList::DOMStringList):
        * dom/EventPath.cpp:
        (WebCore::EventPath::EventPath):
        * dom/FullscreenManager.cpp:
        (WebCore::FullscreenManager::cancelFullscreen):
        * dom/LoadableScript.cpp:
        (WebCore::LoadableScript::notifyClientFinished):
        * dom/RadioButtonGroups.cpp:
        (WebCore::RadioButtonGroup::members const):
        * html/DirectoryFileListCreator.cpp:
        (WebCore::toFileList):
        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::saveLastSelection):
        (WebCore::HTMLSelectElement::setActiveSelectionAnchorIndex):
        * html/ImageBitmap.cpp:
        (WebCore::ImageBitmap::detachBitmaps):
        * html/canvas/WebGLRenderingContextBase.cpp:
        (WebCore::WebGLRenderingContextBase::getAttachedShaders):
        * html/parser/HTMLMetaCharsetParser.cpp:
        (WebCore::HTMLMetaCharsetParser::processMeta):
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::insertPhoneNumberLink):
        * html/parser/TextDocumentParser.cpp:
        (WebCore::TextDocumentParser::insertFakePreElement):
        * loader/ContentFilter.cpp:
        (WebCore::ContentFilter::create):
        * loader/appcache/ApplicationCacheManifestParser.cpp:
        (WebCore::parseApplicationCacheManifest):
        * page/ResizeObserver.cpp:
        (WebCore::ResizeObserver::deliverObservations):
        * page/TextIndicator.cpp:
        (WebCore::initializeIndicator):
        * page/csp/ContentSecurityPolicy.cpp:
        (WebCore::parseSubResourceIntegrityIntoDigests):
        * platform/FileChooser.cpp:
        (WebCore::FileChooser::chooseFile):
        (WebCore::FileChooser::chooseFiles):
        (WebCore::FileChooser::chooseMediaFiles):
        * platform/SharedBuffer.cpp:
        (WebCore::FragmentedSharedBuffer::append):
        * platform/ThreadSafeDataBuffer.h:
        (WebCore::add):
        * platform/audio/AudioDSPKernelProcessor.cpp:
        (WebCore::AudioDSPKernelProcessor::initialize):
        * platform/audio/AudioResampler.cpp:
        (WebCore::AudioResampler::AudioResampler):
        * platform/audio/DynamicsCompressorKernel.cpp:
        (WebCore::DynamicsCompressorKernel::setNumberOfChannels):
        * platform/audio/MultiChannelResampler.cpp:
        (WebCore::MultiChannelResampler::MultiChannelResampler):
        * platform/cocoa/PlaybackSessionModelMediaElement.mm:
        (WebCore::PlaybackSessionModelMediaElement::legibleMediaSelectionOptions const):
        * platform/gamepad/mac/Dualshock3HIDGamepad.cpp:
        (WebCore::Dualshock3HIDGamepad::Dualshock3HIDGamepad):
        * platform/gamepad/mac/LogitechGamepad.cpp:
        (WebCore::LogitechGamepad::LogitechGamepad):
        * platform/gamepad/mac/StadiaHIDGamepad.cpp:
        (WebCore::StadiaHIDGamepad::StadiaHIDGamepad):
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::addRepaintRect):
        * platform/graphics/PathUtilities.cpp:
        (WebCore::PathUtilities::pathsWithShrinkWrappedRects):
        (WebCore::PathUtilities::pathWithShrinkWrappedRectsForOutline):
        * platform/graphics/SourceBufferPrivate.cpp:
        (WebCore::SourceBufferPrivate::bufferedSamplesForTrackId):
        * platform/graphics/avfoundation/CDMFairPlayStreaming.cpp:
        (WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsSkd):
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::AVFWrapper::setRequestForKey):
        * platform/graphics/avfoundation/objc/CDMInstanceFairPlayStreamingAVFObjC.mm:
        (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateKeyStatuses):
        * platform/graphics/avfoundation/objc/ImageDecoderAVFObjC.mm:
        (WebCore::ImageDecoderAVFObjC::frameInfos const):
        * platform/graphics/avfoundation/objc/SourceBufferParserAVFObjC.mm:
        (WebCore::SourceBufferParserAVFObjC::didParseStreamDataAsAsset):
        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::variationAxes const):
        * platform/mac/PasteboardMac.mm:
        (WebCore::Pasteboard::writeString):
        * platform/mediastream/RealtimeVideoCaptureSource.cpp:
        (WebCore::RealtimeVideoCaptureSource::setSupportedPresets):
        * platform/network/BlobRegistryImpl.cpp:
        (WebCore::BlobRegistryImpl::registerBlobURL):
        (WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::drawBoxSideFromPath):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::connectClippingStackLayers):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::adjustOverflowScrollbarContainerLayers):
        * rendering/RenderThemeMac.mm:
        (WebCore::paintAttachmentTitleBackground):
        * rendering/svg/SVGRenderTreeAsText.cpp:
        (WebCore::writeSVGStrokePaintingResource):
        * rendering/svg/SVGTextChunk.cpp:
        (WebCore::SVGTextChunk::SVGTextChunk):
        * style/PageRuleCollector.cpp:
        (WebCore::Style::PageRuleCollector::matchPageRules):
        * style/RuleSetBuilder.cpp:
        (WebCore::Style::RuleSetBuilder::MediaQueryCollector::pop):
        * style/StyleBuilderConverter.h:
        (WebCore::Style::BuilderConverter::convertContainerName):

2022-02-22  Nikolas Zimmermann  <nzimmermann@igalia.com>

        [LBSE] Rename RenderSVGTransformableContainer -> LegacyRenderSVGTransformableContainer
        https://bugs.webkit.org/show_bug.cgi?id=237023

        Reviewed by Rob Buis.

        Following the established procedure: rename RenderSVGTransformableContainer -> LegacyRenderSVGTransformableContainer.
        In a follow-up patch RenderSVGTransformableContainer will be reintroduced for LBSE, inheriting from
        RenderSVGContainer instead of LegacyRenderSVGContainer.

        Covered by existing tests, no change in behaviour.

        * Sources.txt:
        * WebCore.xcodeproj/project.pbxproj:
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isLegacySVGTransformableContainer const):
        (WebCore::RenderObject::isSVGTransformableContainer const): Deleted.
        * rendering/svg/LegacyRenderSVGContainer.cpp:
        (WebCore::LegacyRenderSVGContainer::layout):
        * rendering/svg/LegacyRenderSVGContainer.h:
        * rendering/svg/LegacyRenderSVGTransformableContainer.cpp: Renamed from Source/WebCore/rendering/svg/RenderSVGTransformableContainer.cpp.
        (WebCore::LegacyRenderSVGTransformableContainer::LegacyRenderSVGTransformableContainer):
        (WebCore::LegacyRenderSVGTransformableContainer::calculateLocalTransform):
        (WebCore::LegacyRenderSVGTransformableContainer::graphicsElement):
        * rendering/svg/LegacyRenderSVGTransformableContainer.h: Renamed from Source/WebCore/rendering/svg/RenderSVGTransformableContainer.h.
        * rendering/svg/RenderSVGViewportContainer.h:
        * rendering/svg/SVGContainerLayout.cpp:
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::transformToRootChanged):
        * svg/SVGAElement.cpp:
        (WebCore::SVGAElement::createElementRenderer):
        * svg/SVGGElement.cpp:
        (WebCore::SVGGElement::createElementRenderer):
        * svg/SVGSwitchElement.cpp:
        (WebCore::SVGSwitchElement::createElementRenderer):
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::createElementRenderer):

2022-02-22  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] Switch media player to playbin3
        https://bugs.webkit.org/show_bug.cgi?id=236884

        Reviewed by Xabier Rodriguez-Calvar.

        With GStreamer 1.20 playbin3 is quite usable now, so give it a try as default playback
        engine during the 2.38 cycle. If one wants to opt out, set the WEBKIT_GST_USE_PLAYBIN2
        environment variable to 1.

        No new tests, covered by existing media layout tests.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::createGSTPlayBin):

2022-02-22  Nikolas Zimmermann  <nzimmermann@igalia.com>

        [LBSE] Activate LBSE for <rect> painting
        https://bugs.webkit.org/show_bug.cgi?id=236194

        Reviewed by Rob Buis.

        Finally activate LBSE for <rect> elements -- painting <rect> elements
        now works as expected in LBSE. Try using MiniBrowser and switch
        from legacy engine to LBSE and back -- this now works just fine and
        rebuilds the render tree / updates display.

        Covered by existing tests, no change in behaviour.

        * rendering/svg/SVGRenderTreeAsText.cpp:
        (WebCore::writeStyle):
        (WebCore::writeChildren):
        * svg/SVGRectElement.cpp:
        (WebCore::SVGRectElement::createElementRenderer):

2022-02-22  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] Initial MediaRecorder implementation
        https://bugs.webkit.org/show_bug.cgi?id=236558

        Reviewed by Xabier Rodriguez-Calvar.

        Add a MediaRecorder backend based on the GStreamer Transcoder library. We anticipate the
        scenario where the GstWebRTC backend might provide encoded streams to the recorder, in which
        case transcoding is required. The transcoder library can operate in pass-through as well.

        * CMakeLists.txt:
        * Modules/mediarecorder/MediaRecorder.cpp:
        (WebCore::MediaRecorder::isTypeSupported):
        (WebCore::MediaRecorder::createMediaRecorderPrivate):
        * Modules/mediarecorder/MediaRecorderProvider.cpp:
        (WebCore::MediaRecorderProvider::createMediaRecorderPrivate):
        (WebCore::MediaRecorderProvider::isSupported):
        * Modules/mediarecorder/MediaRecorderProvider.h:
        * loader/EmptyClients.cpp:
        * platform/GStreamer.cmake:
        * platform/graphics/gstreamer/GRefPtrGStreamer.cpp:
        (WTF::adoptGRef):
        (WTF::refGPtr<GstEncodingProfile>):
        (WTF::derefGPtr<GstEncodingProfile>):
        * platform/graphics/gstreamer/GRefPtrGStreamer.h:
        * platform/graphics/gstreamer/GStreamerRegistryScanner.cpp:
        (WebCore::GStreamerRegistryScanner::initializeEncoders):
        * platform/mediarecorder/MediaRecorderPrivateGStreamer.cpp: Added.
        (WebCore::MediaRecorderPrivateGStreamer::create):
        (WebCore::MediaRecorderPrivateGStreamer::MediaRecorderPrivateGStreamer):
        (WebCore::MediaRecorderPrivateGStreamer::~MediaRecorderPrivateGStreamer):
        (WebCore::MediaRecorderPrivateGStreamer::startRecording):
        (WebCore::MediaRecorderPrivateGStreamer::stopRecording):
        (WebCore::MediaRecorderPrivateGStreamer::fetchData):
        (WebCore::MediaRecorderPrivateGStreamer::pauseRecording):
        (WebCore::MediaRecorderPrivateGStreamer::resumeRecording):
        (WebCore::MediaRecorderPrivateGStreamer::mimeType const):
        (WebCore::MediaRecorderPrivateGStreamer::isTypeSupported):
        (WebCore::MediaRecorderPrivateGStreamer::containerProfile):
        (WebCore::MediaRecorderPrivateGStreamer::setSource):
        (WebCore::MediaRecorderPrivateGStreamer::setSink):
        (WebCore::MediaRecorderPrivateGStreamer::configureVideoEncoder):
        (WebCore::MediaRecorderPrivateGStreamer::preparePipeline):
        (WebCore::MediaRecorderPrivateGStreamer::processSample):
        (WebCore::MediaRecorderPrivateGStreamer::notifyEOS):
        * platform/mediarecorder/MediaRecorderPrivateGStreamer.h: Added.
        * platform/mediastream/gstreamer/GStreamerMediaStreamSource.cpp:
        (webkitMediaStreamSrcEnsureStreamCollectionPosted):
        (webkitMediaStreamSrcPadProbeCb):
        (webkitMediaStreamSrcSignalEndOfStream):
        * platform/mediastream/gstreamer/GStreamerMediaStreamSource.h:

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Hide PDF.js sidebar shown for long documents
        https://bugs.webkit.org/show_bug.cgi?id=236850

        Reviewed by Chris Dumez.

        Use the built-in PDF.js `#pagemode=none` parameter to do this: https://github.com/mozilla/pdf.js/wiki/Viewer-options

        * html/PDFDocument.cpp:
        (WebCore::PDFDocument::createDocumentStructure):

2022-02-22  Antti Koivisto  <antti@apple.com>

        [CSS container Queries] getComputedStyle should update style for invalid query containers
        https://bugs.webkit.org/show_bug.cgi?id=237038

        Reviewed by Darin Adler.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::hasValidStyleForProperty):

        We always need to update style inside a query container since a change to it may affect descendants.

2022-02-22  Kate Cheney  <katherine_cheney@apple.com>

        Authenticated encryption console logging causing performance regressions
        https://bugs.webkit.org/show_bug.cgi?id=236987
        <rdar://problem/89108253>

        Reviewed by Chris Dumez.

        No new tests. Behavior confirmed by existing crypto/subtle tests.

        For clients that use repeated unauthenticated AES encryption, console
        logging may cause perf issues. We should log the authenticated
        encryption warning once per context.

        * crypto/SubtleCrypto.cpp:
        (WebCore::SubtleCrypto::addAuthenticatedEncryptionWarningIfNecessary):
        * dom/ScriptExecutionContext.h:
        (WebCore::ScriptExecutionContext::hasLoggedAuthenticatedEncryptionWarning const):
        (WebCore::ScriptExecutionContext::setHasLoggedAuthenticatedEncryptionWarning):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Re-style PDF.js form fields to match PDFKit
        https://bugs.webkit.org/show_bug.cgi?id=237041

        Reviewed by Geoffrey Garen.

        Remove black border on :hover, only display light blue background on hover, display blue focusring on :focus.

        * Modules/pdfjs-extras/style-cocoa.css:
        (.annotationLayer :is():

2022-02-22  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Partial rollout of r289946, broke Netflix
        https://bugs.webkit.org/show_bug.cgi?id=237019
        <rdar://89261425>

        Reviewed by Eric Carlson.

        Adopting AVContentKeySupport for AVSampleBufferDisplayLayer broke Netflix playback on Cocoa
        ports. Disable that support by hard coding sampleBufferRenderersSupportKeySession() to
        return false.

        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.mm:
        (WebCore::sampleBufferRenderersSupportKeySession):

2022-02-22  Tyler Wilcock  <tyler_w@apple.com>

        AX: Only compute ariaTreeRows for isTree() objects
        https://bugs.webkit.org/show_bug.cgi?id=236994

        Reviewed by Andres Gonzalez.

        We only expose AXPropertyName::ARIATreeRows for isTree() objects, but compute it for every object, which is wasteful.

        This patch also includes a drive-by fixing of setting AXPropertyName::IsTreeItem. Prior to this patch,
        we never set this property. Also, we now only store AXPropertyName::ARIATreeItemContent for isTreeItem() objects.

        The AXPropertyName::IsTreeItem fix makes test accessibility/roles-exposed.html closer to passing with ITM enabled.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::ariaTreeRows):
        Remove unncessary tab character.
        * accessibility/isolatedtree/AXIsolatedObject.cpp:
        (WebCore::AXIsolatedObject::initializeAttributeData):

2022-02-22  Tyler Wilcock  <tyler_w@apple.com>

        AX: Fix accessibility/aria-current-state-changed-notification.html in isolated tree mode
        https://bugs.webkit.org/show_bug.cgi?id=237014

        Reviewed by Chris Fleizach.

        We need to update AXPropertyName::CurrentValue when we get a AXCurrentStateChanged notification.

        Fixes accessibility/aria-current-state-changed-notification.html in isolated tree mode.

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::updateIsolatedTree):
        * accessibility/isolatedtree/AXIsolatedTree.cpp:

2022-02-22  Andres Gonzalez  <andresg_22@apple.com>

        Fix for crash in several AX LayoutTests in isolated tree mode.
        https://bugs.webkit.org/show_bug.cgi?id=237015

        Reviewed by Chris Dumez.

        Follow up to https://bugs.webkit.org/show_bug.cgi?id=236748.

        The iteration over the object's children has to happen over a copy
        because the children vector can change during the traversal of the tree.

        * accessibility/isolatedtree/AXIsolatedTree.cpp:
        (WebCore::AXIsolatedTree::collectNodeChangesForSubtree):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Make pointer-events checks for SVG take in account inert subtrees
        https://bugs.webkit.org/show_bug.cgi?id=235836

        Reviewed by Antti Koivisto.

        Re-using visibleToHitTesting in SVG code isn't possible, because visibleToHitTesting removes visibility: hidden;
        content from hit-testing, which we do not want to here, since pointer-events has values for SVG which still
        allow clicking content regardless of their visibility value (pointer-events: painted/fill/stroke/all).

        Instead, we add an inert-aware effectivePointerEvents, similar to effectiveUserSelect and re-use that across the codebase.

        Tests: imported/w3c/web-platform-tests/html/semantics/interactive-elements/the-dialog-element/inert-svg-hittest.html
               imported/w3c/web-platform-tests/inert/inert-svg-hittest.tentative.html

        * rendering/RenderElement.cpp:
        (WebCore::RenderElement::styleWillChange):
        * rendering/RenderElement.h:
        (WebCore::RenderElement::visibleToHitTesting const):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::layerStyleChanged):
        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::effectivePointerEvents const):
        * rendering/svg/LegacyRenderSVGModelObject.cpp:
        (WebCore::LegacyRenderSVGModelObject::checkIntersection):
        (WebCore::LegacyRenderSVGModelObject::checkEnclosure):
        * rendering/svg/LegacyRenderSVGShape.cpp:
        (WebCore::LegacyRenderSVGShape::nodeAtFloatPoint):
        * rendering/svg/RenderSVGImage.cpp:
        (WebCore::RenderSVGImage::nodeAtFloatPoint):
        * rendering/svg/RenderSVGModelObject.cpp:
        (WebCore::RenderSVGModelObject::checkIntersection):
        (WebCore::RenderSVGModelObject::checkEnclosure):
        * rendering/svg/RenderSVGShape.cpp:
        (WebCore::RenderSVGShape::nodeAtPoint):
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::nodeAtFloatPoint):
        * rendering/svg/SVGInlineTextBox.cpp:
        (WebCore::SVGInlineTextBox::nodeAtPoint):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Rename RenderStyle::userSelectIncludingInert to RenderStyle::effectiveUserSelect
        https://bugs.webkit.org/show_bug.cgi?id=237033

        Reviewed by Antti Koivisto.

        This naming is consistent with other properties (effectiveDisplay/Appearance/PointerEvents/etc.).

        * dom/Node.cpp:
        (WebCore::computeEditabilityFromComputedStyle):
        (WebCore::Node::canStartSelection const):
        * dom/Position.cpp:
        (WebCore::Position::nodeIsUserSelectNone):
        (WebCore::Position::nodeIsUserSelectAll):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::canMouseDownStartSelect):
        (WebCore::EventHandler::selectCursor):
        * page/Frame.cpp:
        (WebCore::Frame::rangeForPoint):
        * rendering/RenderElement.cpp:
        (WebCore::RenderElement::selectionBackgroundColor const):
        (WebCore::RenderElement::selectionColor const):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateClipRects const):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::collectSelectionGeometriesInternal):
        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::effectiveUserSelect const):
        (WebCore::RenderStyle::userSelectIncludingInert const): Deleted.

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings
        https://bugs.webkit.org/show_bug.cgi?id=236989

        Reviewed by Youenn Fablet.

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings, since RuntimeEnabledFeatures is deprecated.

        * Modules/push-api/PushEvent.idl:
        * Modules/push-api/PushManager.idl:
        * Modules/push-api/PushMessageData.idl:
        * Modules/push-api/PushSubscription.idl:
        * Modules/push-api/PushSubscriptionChangeEvent.idl:
        * Modules/push-api/PushSubscriptionOptions.idl:
        * Modules/push-api/ServiceWorkerGlobalScope+PushAPI.idl:
        * Modules/push-api/ServiceWorkerRegistration+PushAPI.idl:
        * dom/Document.cpp:
        (WebCore::Document::suspend):
        (WebCore::Document::resume):
        (WebCore::Document::finishedParsing):
        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::matchRegistration):
        (WebCore::DocumentLoader::responseReceived):
        (WebCore::DocumentLoader::commitData):
        (WebCore::DocumentLoader::unregisterReservedServiceWorkerClient):
        (WebCore::DocumentLoader::loadMainResource):
        * page/NavigatorBase.cpp:
        (WebCore::NavigatorBase::serviceWorker):
        * page/NavigatorServiceWorker.idl:
        * page/RuntimeEnabledFeatures.h:
        (WebCore::RuntimeEnabledFeatures::pushAPIEnabled const): Deleted.
        (WebCore::RuntimeEnabledFeatures::setPushAPIEnabled): Deleted.
        (WebCore::RuntimeEnabledFeatures::serviceWorkerEnabled const): Deleted.
        (WebCore::RuntimeEnabledFeatures::setServiceWorkerEnabled): Deleted.
        * workers/service/ExtendableEvent.idl:
        * workers/service/ExtendableMessageEvent.idl:
        * workers/service/FetchEvent.idl:
        * workers/service/ServiceWorker.idl:
        * workers/service/ServiceWorkerClient.idl:
        * workers/service/ServiceWorkerClients.idl:
        * workers/service/ServiceWorkerContainer.idl:
        * workers/service/ServiceWorkerGlobalScope.idl:
        * workers/service/ServiceWorkerRegistration.idl:
        * workers/service/ServiceWorkerWindowClient.idl:

2022-02-22  Marcos Caceres  <marcos@marcosc.com>

        Permission API: handle non-fully active documents
        https://bugs.webkit.org/show_bug.cgi?id=236952

        Spec change:
        https://github.com/w3c/permissions/pull/365

        Reviewed by Youenn Fablet.

        Test: imported/w3c/web-platform-tests/permissions/non-fully-active.https.html

        * Modules/permissions/PermissionStatus.cpp:
        (WebCore::PermissionStatus::stateChanged):
        * Modules/permissions/Permissions.cpp:
        (WebCore::Permissions::query):

2022-02-22  Asumu Takikawa  <asumu@igalia.com>

        Initial support for Wasm/ESM-integration in the WebCore module loader
        https://bugs.webkit.org/show_bug.cgi?id=236268

        Reviewed by Yusuke Suzuki.

        Add initial WebAssembly script support for WebCore module loading. It
        does not yet support Wasm scripts in workers. Detection of Wasm
        modules is currently done by MIME type, not by import assertions.

        * Headers.cmake:
        * Modules/fetch/FetchResponse.cpp:
        (WebCore::FetchResponse::hasWasmMIMEType const):
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluateModule):
        * bindings/js/ScriptController.h:
        * bindings/js/ScriptModuleLoader.cpp:
        (WebCore::ScriptModuleLoader::evaluate):
        (WebCore::ScriptModuleLoader::notifyFinished):
        * bindings/js/ScriptModuleLoader.h:
        * bindings/js/WebAssemblyCachedScriptSourceProvider.h: Added.
        * bindings/js/WebAssemblyScriptSourceCode.h: Copied from Source/JavaScriptCore/parser/SourceProvider.cpp.
        (WebCore::WebAssemblyScriptSourceCode::WebAssemblyScriptSourceCode):
        (WebCore::WebAssemblyScriptSourceCode::jsSourceCode const):
        * platform/MIMETypeRegistry.cpp:
        (WebCore::MIMETypeRegistry::isSupportedWebAssemblyMIMEType):
        * platform/MIMETypeRegistry.h:
        * workers/WorkerOrWorkletScriptController.cpp:
        (WebCore::WorkerOrWorkletScriptController::evaluateModule):
        * workers/WorkerOrWorkletScriptController.h:

2022-02-22  Pablo Saavedra  <psaavedra@igalia.com>

        Properly uninitialize EGL display before termination
        https://bugs.webkit.org/show_bug.cgi?id=236766

        From the docs [1], if contexts or surfaces associated with display
        is current to any thread, they are not released until they
        are no longer current as a result of eglMakeCurrent.

        So call eglMakeCurrent() to such effect.

        [1] https://www.khronos.org/registry/EGL/sdk/docs/man/html/eglMakeCurrent.xhtml

        Reviewed by Carlos Garcia Campos.

        * platform/graphics/PlatformDisplay.cpp:
        (WebCore::PlatformDisplay::terminateEGLDisplay):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events
        https://bugs.webkit.org/show_bug.cgi?id=236985

        Reviewed by Darin Adler.

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events,
        by keeping track of window objects interested in storage events. A Window object is interested
        in storage events if both of the following conditions is true:
        1. It has a Storage object (either localStorage or sessionStorage)
        2. It has a storage event listener registered.

        This patch also refactors the code so that we share more logic between WebKit1 and WebKit2.

        * inspector/agents/InspectorDOMStorageAgent.cpp:
        (WebCore::InspectorDOMStorageAgent::setDOMStorageItem):
        (WebCore::InspectorDOMStorageAgent::removeDOMStorageItem):
        (WebCore::InspectorDOMStorageAgent::clearDOMStorageItems):
        * loader/EmptyClients.cpp:
        * page/DOMWindow.cpp:
        (WebCore::windowsInterestedInStorageEvents):
        (WebCore::DOMWindow::forEachWindowInterestedInStorageEvents):
        (WebCore::DOMWindow::~DOMWindow):
        (WebCore::DOMWindow::willDetachDocumentFromFrame):
        (WebCore::DOMWindow::eventListenersDidChange):
        * page/DOMWindow.h:
        * page/DOMWindowProperty.h:
        * storage/Storage.cpp:
        (WebCore::Storage::setItem):
        (WebCore::Storage::removeItem):
        (WebCore::Storage::clear):
        * storage/StorageArea.h:
        * storage/StorageEventDispatcher.cpp:
        (WebCore::dispatchSessionStorageEventsToWindows):
        (WebCore::dispatchLocalStorageEventsToWindows):
        (WebCore::StorageEventDispatcher::dispatchSessionStorageEvents):
        (WebCore::StorageEventDispatcher::dispatchLocalStorageEvents):
        (WebCore::StorageEventDispatcher::dispatchSessionStorageEventsToFrames): Deleted.
        (WebCore::StorageEventDispatcher::dispatchLocalStorageEventsToFrames): Deleted.
        * storage/StorageEventDispatcher.h:

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Improve const correctness for SecurityOrigin accessors
        https://bugs.webkit.org/show_bug.cgi?id=236983

        Reviewed by Chris Dumez.

        * loader/SubresourceLoader.h:
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::origin const):
        (WebCore::CachedResource::origin):
        * loader/cache/CachedResourceRequest.h:
        (WebCore::CachedResourceRequest::origin const):
        (WebCore::CachedResourceRequest::origin):

2022-02-21  Brandon Stewart  <brandonstewart@apple.com>

        Ensure layer has backing during traversal
        https://bugs.webkit.org/show_bug.cgi?id=236858

        Reviewed by Simon Fraser.

        Ensure the layer has a backing attached to it before trying to append
        the node id.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::collectStationaryLayerRelatedOverflowNodes):

2022-02-21  Cameron McCormack  <heycam@apple.com>

        Make input element UA shadow tree creation lazy
        https://bugs.webkit.org/show_bug.cgi?id=236747

        Reviewed by Aditya Keerthi.

        We currently delay InputType creation for parser inserted elements until
        just after the attributes have been set, so that we don't wastefully
        create an InputType and the UA shadow tree creation if a non-text
        type="" was specified on the tag. We don't do anything similar for
        script inserted input elements. We could make the InputType creation
        lazy, but most of the wasted time is due to the shadow tree creation.

        This patch makes InputType shadow tree creation lazy by delaying it
        until one of the following happens:

        1. the element is inserted into the document
        2. the type="" or value="" attributes are changed before the element
           is inserted into the document
        3. any DOM methods that need access to the innerTextElement() are
           called on the element before the element is inserted into the
           document

        Not all places where we call innerTextElement() on the
        HTMLInputElement are safe to lazily create the shadow trees, so we
        have two accessors:

        - innerTextElement() returns the inner text element if it's been
          created already
        - innerTextElementCreatingShadowSubtreeIfNeeded will perform the lazy
          shadow tree construction if it hasn't already been done

        Since the existing
        createShadowSubtreeAndUpdateInnerTextElementEditability function has
        more responsibility than just creating the subtree and ensuring the
        editability is set appropriately, it's renamed to a more manageable
        createShadowSubtree.

        This change is a 0.5% progression on Speedometer 2.

        Test: fast/forms/lazy-shadow-tree-creation.html

        * html/BaseDateAndTimeInputType.h:
        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::createShadowSubtree):
        (WebCore::BaseDateAndTimeInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/ColorInputType.h:
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::createShadowSubtree):
        (WebCore::ColorInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/FileInputType.h:
        * html/FileInputType.cpp:
        (WebCore::FileInputType::createShadowSubtree):
        (WebCore::FileInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/InputType.cpp:
        (WebCore::InputType::createShadowSubtree):
        (WebCore::InputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/RangeInputType.h:
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::createShadowSubtree):
        (WebCore::RangeInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/SearchInputType.h:
        * html/SearchInputType.cpp:
        (WebCore::SearchInputType::createShadowSubtree):
        (WebCore::SearchInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Renamed createShadowSubtreeAndUpdateInnerTextElementEditability to
        createShadowSubtree and remove the "isInnerTextElementEditable"
        argument, since we can ask the element() for its value if needed.
        createShadowSubtree is now also responsible for creating the shadow
        root.

        * html/TextFieldInputType.h:
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::createShadowSubtree):
        (WebCore::TextFieldInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Renamed. Ensure all shadow tree state is up to date now that it can be
        created later.

        * html/InputType.h:
        * html/InputType.cpp:
        (WebCore::InputType::createShadowSubtree):
        (WebCore::InputType::hasCreatedShadowSubtree const):
        New functions to create the shadow subtree if it hasn't been done
        already, and to query whether it's been done.

        * html/HTMLInputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::innerTextElementCreatingShadowSubtreeIfNeeded):
        * html/HTMLTextAreaElement.h:
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::innerTextElementCreatingShadowSubtreeIfNeeded):
        * html/HTMLTextFormControlElement.h:
        * html/InputType.h:
        * html/InputType.cpp:
        (WebCore::InputType::innerTextElementCreatingShadowSubtreeIfNeeded):
        New functions to first create the shadow subtree before returning
        innerTextElement(). HTMLTextAreaElement never lazily creates its
        shadow subtree and so just returns innerTextElement().

        * html/HTMLInputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Deleted. Just call through to m_inputType->createShadowTree()
        directly.

        (WebCore::HTMLInputElement::HTMLInputElement):
        (WebCore::HTMLInputElement::create):
        (WebCore::HTMLInputElement::initializeInputType):
        (WebCore::HTMLInputElement::updateType):
        Don't immediately create the shadow tree.

        (WebCore::HTMLInputElement::didFinishInsertingNode):
        Create the shadow subtree now that the element's been inserted. No
        need to call dataListMayHaveChanged since
        TextFieldInputType::createShadowSubtree will now do this.

        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::updateInnerTextValue):
        Ensure the shadow subtree is created since we need to poke at it.

        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::forwardEvent):
        Don't forward the event if the shadow tree hasn't been created yet.

        (WebCore::HTMLTextFormControlElement::setSelectionRange):
        Ensure the shadow tree has been created. This is needed if the
        selection APIs are called on the input element before it's inserted
        into the document.

        (WebCore::HTMLTextFormControlElement::visiblePositionForIndex const):
        Assert that the shadow tree has been created, since editing
        functionality should only be needed if the element's been inserted
        into the document.

        (WebCore::HTMLTextFormControlElement::setInnerTextValue):
        Ensure the shadow tree has been created.

        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::handleMouseDownEvent):
        (WebCore::RangeInputType::handleTouchEvent):
        (WebCore::RangeInputType::handleKeydownEvent):
        Ensure the shadow tree has been created in case the event will change
        the value.

        (WebCore::RangeInputType::sliderTrackElement const):
        Only return the element if it's been created.

        (WebCore::RangeInputType::typedSliderThumbElement const):
        Assert that the element has been created.

        (WebCore::RangeInputType::dataListMayHaveChanged):
        Only try to re-layout if the shadow tree has been created.

        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::isEmptyValue const):
        Avoid creating the shadow subtree.

        (WebCore::TextFieldInputType::forwardEvent):
        Move the element assertion up to be consistent with other functions.

        (WebCore::TextFieldInputType::innerTextElement const):
        Don't assert, since this now can legitimately return null.

        * html/FileInputType.cpp:
        (WebCore::FileInputType::disabledStateChanged):
        (WebCore::FileInputType::attributeChanged):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::disabledStateChanged):
        (WebCore::RangeInputType::attributeChanged):
        (WebCore::RangeInputType::setValue):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::disabledStateChanged):
        (WebCore::TextFieldInputType::readOnlyStateChanged):
        (WebCore::TextFieldInputType::updatePlaceholderText):
        (WebCore::TextFieldInputType::updateAutoFillButton):
        (WebCore::TextFieldInputType::dataListMayHaveChanged):
        Don't update the shadow tree contents if it hasn't been created yet.
        createShadowTree is responsible for ensuring it creates the shadow
        tree contents reflecting the current state.

2022-02-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        Add test coverage for the pasteboard writing codepath added in r289839
        https://bugs.webkit.org/show_bug.cgi?id=236944

        Reviewed by Aditya Keerthi.

        Add test coverage for the changes in r289839 in the case where `ENABLE(IMAGE_ANALYSIS_ENHANCEMENTS)` is turned
        on. To do this, we set the platform image analysis results to a new internal mock object,
        `FakeImageAnalysisResult`, that returns a string for a given NSRange. This code is then exercised by several
        existing layout tests that copy and paste text inside image overlays:

        - fast/images/text-recognition/image-overlay-line-wrapping.html
        - fast/images/text-recognition/image-overlay-text-without-leading-whitespace.html
        - fast/images/text-recognition/mac/copy-image-overlay-text-with-context-menu.html

        * testing/Internals.cpp:
        (WebCore::Internals::installImageOverlay):
        * testing/Internals.h:
        * testing/Internals.mm:
        (-[FakeImageAnalysisResult initWithString:]):
        (-[FakeImageAnalysisResult _attributedStringForRange:]):
        (WebCore::Internals::fakeImageAnalysisResultForTesting):

2022-02-21  Myles C. Maxfield  <mmaxfield@apple.com>

        Sort WebCore and WebKit Xcode project files
        https://bugs.webkit.org/show_bug.cgi?id=237010

        Unreviewed.

        No new tests because there is no behavior change.

        * WebCore.xcodeproj/project.pbxproj:

== Rolled over to ChangeLog-2022-02-22 ==
