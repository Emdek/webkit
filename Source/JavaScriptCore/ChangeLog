2022-02-22  Alexander Kanavin  <alex@linutronix.de>

        When building introspection files, add CMAKE_C_FLAGS to the compiler flags.
        https://bugs.webkit.org/show_bug.cgi?id=232936

        Reviewed by Michael Catanzaro.

        g-ir-compiler is using a C compiler internally, so it needs to set
        the proper flags for it.

        * PlatformGTK.cmake:

2022-02-22  Asumu Takikawa  <asumu@igalia.com>

        Initial support for Wasm/ESM-integration in the WebCore module loader
        https://bugs.webkit.org/show_bug.cgi?id=236268

        Reviewed by Yusuke Suzuki.

        Adjust WebAssemblySourceProvider to inherit from a new abstract base
        class that exposes the data as a pointer and size, to allow
        implementations other than a Vector. Also add initialization
        and cleanup methods managed by RAII class.

        * CMakeLists.txt:
        * JavaScriptCore.xcodeproj/project.pbxproj:
        * parser/SourceProvider.cpp:
        (JSC::BaseWebAssemblySourceProvider::BaseWebAssemblySourceProvider):
        * parser/SourceProvider.h:
        (JSC::BaseWebAssemblySourceProvider::lockUnderlyingBuffer):
        (JSC::BaseWebAssemblySourceProvider::unlockUnderlyingBuffer):
        (JSC::WebAssemblySourceProviderBufferGuard::WebAssemblySourceProviderBufferGuard):
        (JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard):
        * runtime/CachedTypes.cpp:
        (JSC::CachedWebAssemblySourceProvider::encode):
        * tools/JSDollarVM.cpp:
        * wasm/js/JSWebAssemblyHelpers.h:
        (JSC::getWasmBufferFromValue):
        (JSC::createSourceBufferFromValue):

2022-02-22  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] ShadowRealm JSRemoteFunction creation should convert CopyNameAndLength errors to TypeError
        https://bugs.webkit.org/show_bug.cgi?id=237007

        Reviewed by Alexey Shvayka.

        1. Rename JSRemoteFunction::create to tryCreate since it can throw an error.
        2. Passing JSGlobalObject* as a first parameter to JSRemoteFunction::tryCreate since it can throw an error.
        3. Extract CopyNameAndLength part and convert errors to TypeError as specified.

        * jit/JITOperations.cpp:
        (JSC::getWrappedValue):
        (JSC::JSC_DEFINE_JIT_OPERATION):
        * runtime/JSRemoteFunction.cpp:
        (JSC::wrapValue):
        (JSC::JSC_DEFINE_HOST_FUNCTION):
        (JSC::JSRemoteFunction::tryCreate):
        (JSC::JSRemoteFunction::copyNameAndLength):
        (JSC::JSRemoteFunction::finishCreation):
        (JSC::JSRemoteFunction::create): Deleted.
        * runtime/JSRemoteFunction.h:

2022-02-22  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] TypeError from JSRemoteFunction should be generated by JSRemoteFunction's JSGlobalObject
        https://bugs.webkit.org/show_bug.cgi?id=237013

        Reviewed by Saam Barati.

        Our unwinding converts any errors inside JSRemoteFunction to TypeError. At that time, we should
        use JSRemoteFunction's JSGlobalObject for this type error.

        * interpreter/Interpreter.cpp:
        (JSC::UnwindFunctor::UnwindFunctor):
        (JSC::UnwindFunctor::operator() const):
        (JSC::sanitizeRemoteFunctionException):
        (JSC::Interpreter::unwind):

2022-02-21  Robin Morisset  <rmorisset@apple.com>

        [JSC] Format the output of --reportTotalPhaseTimes=1 more nicely
        https://bugs.webkit.org/show_bug.cgi?id=237005

        Reviewed by Saam Barati.

        Before this patch:
        [B3] moveConstants total ms: 64.307583 max ms: 1.703167
        [B3] lowerToAir total ms: 151.297782 max ms: 5.426375
        [B3] generateToAir total ms: 1623.987166 max ms: 92.826750
        [B3] simplifyCFG total ms: 11.760463 max ms: 1.088083
        [B3] Air::lowerMacros total ms: 5.975679 max ms: 0.382000

        After this patch:
        total ms:   66.328 max ms:   2.283 [B3] moveConstants
        total ms:  148.097 max ms:   5.361 [B3] lowerToAir
        total ms: 1619.115 max ms:  96.307 [Total B3] generateToAir
        total ms:   11.959 max ms:   1.185 [Air] simplifyCFG
        total ms:    6.519 max ms:   0.697 [Air] Air::lowerMacros

        Concretely there are two changes:
        - use FixedWidthDouble (also introduced to WTF in this patch) to line-up the total times.
          This makes it possible to see at a glance which phases are worth optimizing and which aren't.
        - Tag phases more precisely, and in particular replace [B3] by [Air] where relevant,
          and give different tags to measurements that correspond to groups of phases instead of a single phase (e.g. generateToAir).

        * JavaScriptCore.xcodeproj/project.pbxproj:
        * b3/B3Compile.cpp:
        (JSC::B3::compile):
        * b3/B3FixSSA.cpp:
        * b3/B3Generate.cpp:
        (JSC::B3::prepareForGeneration):
        (JSC::B3::generateToAir):
        * b3/B3PhaseScope.cpp:
        (JSC::B3::PhaseScope::PhaseScope):
        * b3/B3PhaseScope.h:
        * b3/B3TimingScope.h: Removed.
        (JSC::B3::TimingScope::TimingScope): Deleted.
        * b3/B3VariableLiveness.cpp:
        (JSC::B3::VariableLiveness::VariableLiveness):
        * b3/air/AirAllocateRegistersAndStackAndGenerateCode.cpp:
        (JSC::B3::Air::GenerateAndAllocateRegisters::generate):
        * b3/air/AirAllocateRegistersAndStackByLinearScan.cpp:
        * b3/air/AirGenerate.cpp:
        (JSC::B3::Air::prepareForGeneration):
        (JSC::B3::Air::generateWithAlreadyAllocatedRegisters):
        * b3/air/AirLiveness.h:
        (JSC::B3::Air::Liveness::Liveness):
        * b3/air/AirPhaseScope.cpp:
        (JSC::B3::Air::PhaseScope::PhaseScope):
        * b3/air/AirPhaseScope.h:
        * tools/CompilerTimingScope.cpp:

2022-02-21  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Fix ShadowRealm unwinding
        https://bugs.webkit.org/show_bug.cgi?id=237001

        Reviewed by Saam Barati.

        This patch fixes a crash bug found by test262. Regardless of it is RemoteFunction,
        we should handle it as the same way to the other normal host functions except
        for setting m_seenRemoteFunction = true flag. Previously, we are early returning,
        this is wrong since we should stop unwinding if the caller is entry frame.

        * interpreter/Interpreter.cpp:
        (JSC::UnwindFunctor::operator() const):

2022-02-21  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Temporal.PlainDate should validate input range
        https://bugs.webkit.org/show_bug.cgi?id=236936

        Reviewed by Darin Adler.

        Implement https://tc39.es/proposal-temporal/#sec-temporal-isodatetimewithinlimits check in
        PlainDate to validate input range. For example, 0x7fffffff year should be rejected since
        it is larger than ECMAScript datetime representation value. This is checked via ISODateTimeWithinLimits
        in the spec.

        We also remove isValid assertions in ExactTime. This should not be checked in these accessors, rather,
        we should call that function when we would like to check, since PlainDate can represent a bit smaller
        value than ExactTime's minValue (minValue - nsPerDay).

        We also extend ExactTime::fromISOPartsAndOffset to handle values via Int128 to accept int32_t range years.
        By using Int128 for nanoseconds, we can even represent int32_t max / min years. And we remove
        `ASSERT(y >= -999999 && y <= 999999)` check since this is not necessary.

        * runtime/ISO8601.cpp:
        (JSC::ISO8601::ExactTime::fromISOPartsAndOffset):
        (JSC::ISO8601::isDateTimeWithinLimits):
        * runtime/ISO8601.h:
        (JSC::ISO8601::ExactTime::ExactTime): Deleted.
        (JSC::ISO8601::ExactTime::fromEpochSeconds): Deleted.
        (JSC::ISO8601::ExactTime::fromEpochMilliseconds): Deleted.
        (JSC::ISO8601::ExactTime::fromEpochMicroseconds): Deleted.
        (JSC::ISO8601::ExactTime::epochSeconds const): Deleted.
        (JSC::ISO8601::ExactTime::epochMilliseconds const): Deleted.
        (JSC::ISO8601::ExactTime::epochMicroseconds const): Deleted.
        (JSC::ISO8601::ExactTime::epochNanoseconds const): Deleted.
        (JSC::ISO8601::ExactTime::nanosecondsFraction const): Deleted.
        (JSC::ISO8601::ExactTime::asString const): Deleted.
        (JSC::ISO8601::ExactTime::isValid const): Deleted.
        (JSC::ISO8601::ExactTime::operator< const): Deleted.
        (JSC::ISO8601::ExactTime::operator<= const): Deleted.
        (JSC::ISO8601::ExactTime::operator== const): Deleted.
        (JSC::ISO8601::ExactTime::operator!= const): Deleted.
        (JSC::ISO8601::ExactTime::operator>= const): Deleted.
        (JSC::ISO8601::ExactTime::operator> const): Deleted.
        * runtime/TemporalPlainDate.cpp:
        (JSC::toPlainDate):

== Rolled over to ChangeLog-2022-02-22 ==
