2022-02-27  Chris Dumez  <cdumez@apple.com>

        Omit template parameter for SetForScope<> variables
        https://bugs.webkit.org/show_bug.cgi?id=237258

        Reviewed by Darin Adler.

        * bytecompiler/BytecodeGenerator.h:
        (JSC::BytecodeGenerator::emitNode):
        * debugger/Debugger.cpp:
        (JSC::Debugger::dispatchFunctionToObservers):
        * dfg/DFGByteCodeParser.cpp:
        (JSC::DFG::ByteCodeParser::setLocalOrTmp):
        (JSC::DFG::ByteCodeParser::setArgument):
        * inspector/InspectorBackendDispatcher.cpp:
        (Inspector::BackendDispatcher::dispatch):
        * parser/Parser.cpp:
        (JSC::Parser<LexerType>::parseInner):
        (JSC::Parser<LexerType>::parseAsyncFunctionSourceElements):
        (JSC::Parser<LexerType>::parseAsyncGeneratorFunctionSourceElements):
        (JSC::Parser<LexerType>::parseFunctionBody):
        (JSC::Parser<LexerType>::parseFunctionParameters):
        (JSC::Parser<LexerType>::parseFunctionInfo):
        (JSC::Parser<LexerType>::parseFunctionDeclaration):
        (JSC::Parser<LexerType>::parseAsyncFunctionDeclaration):
        (JSC::Parser<LexerType>::parseClass):
        (JSC::Parser<LexerType>::parseProperty):
        (JSC::Parser<LexerType>::parseGetterSetter):
        (JSC::Parser<LexerType>::parseFunctionExpression):
        (JSC::Parser<LexerType>::parseAsyncFunctionExpression):
        (JSC::Parser<LexerType>::parseArrowFunctionExpression):

2022-02-26  Basuke Suzuki  <basuke.suzuki@sony.com>

        Remove UNUSED warnings for non-Cocoa platform after r290449
        https://bugs.webkit.org/show_bug.cgi?id=237233

        Reviewed by Darin Adler.

        * runtime/JSDateMath.cpp:

2022-02-24  Mark Lam  <mark.lam@apple.com>

        Remove incorrect ASSERT.
        https://bugs.webkit.org/show_bug.cgi?id=237185
        <rdar://problem/83902782>

        Reviewed by Yusuke Suzuki.

        These debug ASSERTs were added in http://trac.webkit.org/r283632 back when we
        weren't sure that the StringImpl pointer can be null or not.  We're now certain
        that the StringImpl pointer can be null because:

        The site of the ASSERT looks like this:
        ```
            auto* impl = string->tryGetValueImpl();
            ASSERT(impl); // FIXME: rdar://83902782
            if (impl && impl->isAtom() && 
                ...
        ```
        ... where string is a JSString, which can also be a JSRopeString.

        JSString::tryGetValueImpl() is:
        ```
        inline const StringImpl* JSString::tryGetValueImpl() const
        {
            uintptr_t pointer = fiberConcurrently();
            if (pointer & isRopeInPointer)
                return nullptr;
            return bitwise_cast<StringImpl*>(pointer);
        }
        ```

        If string is a JSRopeString, the returned impl will be null.  Hence, the ASSERT is
        invalid and should be removed.

        * dfg/DFGByteCodeParser.cpp:
        (JSC::DFG::ByteCodeParser::parseBlock):
        (JSC::DFG::ByteCodeParser::handlePutByVal):

2022-02-25  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r290516.
        https://bugs.webkit.org/show_bug.cgi?id=237222

        broke debug tests

        Reverted changeset:

        "[JSC] Use DeferTerminationForAWhile in Interpreter::unwind"
        https://bugs.webkit.org/show_bug.cgi?id=237176
        https://commits.webkit.org/r290516

2022-02-25  Mark Lam  <mark.lam@apple.com>

        operationMaterializeObjectInOSR should DeferTerminationForAWhile instead of just DeferTermination.
        https://bugs.webkit.org/show_bug.cgi?id=237173
        rdar://problem/89450245

        Reviewed by Yusuke Suzuki.

        DeferTermination can throw the TerminationException on destruction of the scope
        object.  operationMaterializeObjectInOSR() was using DeferTermination, resulting
        in the TerminationException being thrown on exit.  This trips up
        validateDFGExceptionHandling testing (which is enabled on Debug builds) because the
        TerminationException is unexpected.  The solution is simply to use
        DeferTerminationForAWhile instead, and let a more natural trap checkpoint throw
        the TerminationException later.

        Also refactored notifyDebuggerOfUnwinding() to return early if a debugger is not
        present.  This avoids unnecessarily entering and exiting a DeferTermination scope
        in notifyDebuggerOfUnwinding().  This was observed while testing this change on
        the attached test case.

        * ftl/FTLOperations.cpp:
        (JSC::FTL::operationMaterializeObjectInOSR):
        * interpreter/Interpreter.cpp:
        (JSC::notifyDebuggerOfUnwinding):

2022-02-24  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Use DeferTerminationForAWhile in Interpreter::unwind
        https://bugs.webkit.org/show_bug.cgi?id=237176

        Reviewed by Mark Lam.

        Interpreter::unwind calls sanitizeRemoteFunctionException, which would like to create scope (but it
        does not have user observable behavior). Problem is that, since it is creating a scope, it can throw
        a termination exception. We were using DeferTermination, but destructor of this scope can still set
        termination exception, which results in throwing a termination exception for the error handler.

        We use DeferTerminationForAWhile in the prologue of the Interpreter::unwind to ensure that this function
        will not accept termination exception coming concurrently.

        * interpreter/Interpreter.cpp:
        (JSC::sanitizeRemoteFunctionException):
        (JSC::Interpreter::unwind):

2022-02-25  Patrick Angle  <pangle@apple.com>

        Web Inspector: [Cocoa] Split remote inspector message data into smaller chunks for large messages
        https://bugs.webkit.org/show_bug.cgi?id=237110
        <rdar://89364487>

        Reviewed by Devin Rousso.

        Messages over 2 MiB will now be split into multiple chunks, which allows us to not exceed any receiving daemon
        process' memory limit under otherwise normal conditions. 2 MiB was chosen as a balance between not having to
        split most messages at all and making sure that the messages (and any copies made during the relaying of the
        messages) do not exceed the memory limits of the receiving daemon process.

        In order to prevent us from sending chunked messages to a process that doesn't support them we check for a flag
        to enable this functionality during connection setup.

        * inspector/remote/RemoteInspector.h:
        * inspector/remote/RemoteInspectorConstants.h:
        * inspector/remote/cocoa/RemoteInspectorCocoa.mm:
        (Inspector::RemoteInspector::sendMessageToRemote):
        (Inspector::RemoteInspector::receivedSetupMessage):

2022-02-24  Chris Dumez  <cdumez@apple.com>

        [Cocoa] Only clear ICU cache when time zone is changed
        https://bugs.webkit.org/show_bug.cgi?id=236996

        Reviewed by Yusuke Suzuki.

        We used to unconditionally invalidate the VM's DateCache in VMEntryScope in order to
        make sure we always used the latest time zone from the host machine (in case it changed).
        This overly aggressive invalidation was causing us to repeatedly go to the disk in order
        to determine the host time zone. On Cocoa ports, we now listen to the
        kCFTimeZoneSystemTimeZoneDidChangeNotification notification and only invalidate the
        VM's DateCache in VMEntryScope if the host time zone has actually changed since the
        last time.

        * runtime/JSDateMath.cpp:
        (JSC::timeZoneChangeNotification):
        (JSC::DateCache::DateCache):
        (JSC::DateCache::resetIfNecessary):
        (JSC::DateCache::reset): Deleted.
        * runtime/JSDateMath.h:
        * runtime/VM.h:
        (JSC::VM::resetDateCacheIfNecessary):
        (JSC::VM::resetDateCache): Deleted.
        * runtime/VMEntryScope.cpp:
        (JSC::VMEntryScope::VMEntryScope):

2022-02-24  Geza Lore  <glore@igalia.com>

        [JSC] Respect bytecode alignment in BytecodeRewriter
        https://bugs.webkit.org/show_bug.cgi?id=237092

        Reviewed by Yusuke Suzuki.

        Note: This patch only affects bytecode generation on platforms which
        set CPU(NEEDS_ALIGNED_ACCESS), which are ARMv7 and MIPS. On all other
        platforms the generated bytecode is identical.

        The previous BytecodeRewriter::removeBytecode method unconditionally
        removed the given instruction, which could then break the required
        alignment of subsequent wide ops. While this could be fixed by
        inserting padding after the removal, all current uses of
        removeBytecode are such that they constitute one half of a replace.
        Instead of adding unnecessary padding, added an explicit
        replaceBytecodeWithFragment method that removes the old instruction
        and replaces it with the given fragment, while maintaining alignment
        of the subsequent bytecode. This yields fewer nops. If removeBytecode
        turns out to be necessary later, use replaceBytecodeWithFragment with
        an empty fragment.

        * bytecode/BytecodeGeneratorification.cpp:
        (JSC::BytecodeGeneratorification::run):
        * bytecode/BytecodeRewriter.h:
        (JSC::BytecodeRewriter::Fragment::align):
        (JSC::BytecodeRewriter::insertFragmentAfter):
        (JSC::BytecodeRewriter::replaceBytecodeWithFragment):
        * bytecompiler/BytecodeGeneratorBaseInlines.h:
        (JSC::BytecodeGeneratorBase<Traits>::alignWideOpcode32):

2022-02-23  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] WeakMapImpl do not need to take cellLock in visitOutputConstraints and main thread
        https://bugs.webkit.org/show_bug.cgi?id=200195

        Reviewed by Mark Lam.

        WeakMapImpl::visitOutputConstraints is called in the constraint solver, so the main thread is stopped.
        WeakMapImpl::rehash can destroy the buffer, but it is only called on either the main thread or GC finalizer. As a result,
        it never happens that destroying the buffer while touching it in visitOutputConstraints. We can remove the lock guarding
        this buffer.

        * runtime/WeakMapImpl.cpp:
        (JSC::WeakMapImpl<BucketType>::visitOutputConstraints):
        * runtime/WeakMapImpl.h:
        (JSC::WeakMapImpl::WeakMapImpl):
        (JSC::WeakMapImpl::makeAndSetNewBuffer):
        (JSC::WeakMapImpl::finishCreation): Deleted.
        * runtime/WeakMapImplInlines.h:
        (JSC::WeakMapImpl<WeakMapBucket>::rehash):

2022-02-23  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Adjust thread number for GC throughput
        https://bugs.webkit.org/show_bug.cgi?id=237122

        Reviewed by Mark Lam.

        Adjust numberOfGCMarkers from 4 to 3 to make GC and main thread througput better on M1 macOS.
        3 makes sense since there is also a main thread when they are running concurrently to the
        main thread.

        It offers 1.2% improvement in Speedometer2 in M1Max MBP and 0.4% improvement in M1 MBP.

        ----------------------------------------------------------------------------------------------------------------------------------
        |               subtest                |     ms      |     ms      |  b / a   | pValue (significance using False Discovery Rate) |
        ----------------------------------------------------------------------------------------------------------------------------------
        | Elm-TodoMVC                          |107.445000   |102.856667   |0.957296  | 0.000000 (significant)                           |
        | VueJS-TodoMVC                        |21.571667    |21.805000    |1.010817  | 0.403054                                         |
        | EmberJS-TodoMVC                      |113.320000   |111.300000   |0.982174  | 0.000027 (significant)                           |
        | BackboneJS-TodoMVC                   |39.981667    |39.318333    |0.983409  | 0.002346 (significant)                           |
        | Preact-TodoMVC                       |15.516667    |15.648333    |1.008485  | 0.544754                                         |
        | AngularJS-TodoMVC                    |117.010000   |115.346667   |0.985785  | 0.000495 (significant)                           |
        | Vanilla-ES2015-TodoMVC               |57.790000    |57.176667    |0.989387  | 0.000270 (significant)                           |
        | Inferno-TodoMVC                      |55.275000    |53.755000    |0.972501  | 0.000000 (significant)                           |
        | Flight-TodoMVC                       |53.875000    |53.941667    |1.001237  | 0.739556                                         |
        | Angular2-TypeScript-TodoMVC          |36.600000    |36.471667    |0.996494  | 0.743761                                         |
        | VanillaJS-TodoMVC                    |48.058333    |47.671667    |0.991954  | 0.158193                                         |
        | jQuery-TodoMVC                       |203.433333   |201.878333   |0.992356  | 0.009271 (significant)                           |
        | EmberJS-Debug-TodoMVC                |325.058333   |319.848333   |0.983972  | 0.000003 (significant)                           |
        | React-TodoMVC                        |80.533333    |79.281667    |0.984458  | 0.000011 (significant)                           |
        | React-Redux-TodoMVC                  |134.738333   |131.801667   |0.978205  | 0.000000 (significant)                           |
        | Vanilla-ES2015-Babel-Webpack-TodoMVC |56.780000    |56.168333    |0.989227  | 0.000514 (significant)                           |
        ----------------------------------------------------------------------------------------------------------------------------------
        a mean = 293.86568
        b mean = 297.52900
        pValue = 0.0266899465
        (Bigger means are better.)
        1.012 times better
        Results ARE significant

        * runtime/Options.cpp:
        (JSC::overrideDefaults):

2022-02-23  Adrian Perez de Castro  <aperez@igalia.com>

        Ensure generated inline assembler that setups segments returns to previous state
        https://bugs.webkit.org/show_bug.cgi?id=236976

        Reviewed by Yusuke Suzuki.

        Use .previous in inline assembler in order to ensure that mixed emission of assembler
        functions and other definitions correctly puts each of them in their rightful sections
        in the output object code.

        * assembler/MacroAssemblerARM64.cpp:
        * assembler/MacroAssemblerARMv7.cpp:
        * assembler/MacroAssemblerMIPS.cpp:
        * assembler/MacroAssemblerX86Common.cpp:

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Add a URL constructor that takes a String
        https://bugs.webkit.org/show_bug.cgi?id=237068

        Reviewed by Darin Adler.

        Adopt the new `URL(const String&)` constructor.

        * API/JSAPIGlobalObject.mm:
        (JSC::computeValidImportSpecifier):

2022-02-22  Alexander Kanavin  <alex@linutronix.de>

        When building introspection files, add CMAKE_C_FLAGS to the compiler flags.
        https://bugs.webkit.org/show_bug.cgi?id=232936

        Reviewed by Michael Catanzaro.

        g-ir-compiler is using a C compiler internally, so it needs to set
        the proper flags for it.

        * PlatformGTK.cmake:

2022-02-22  Asumu Takikawa  <asumu@igalia.com>

        Initial support for Wasm/ESM-integration in the WebCore module loader
        https://bugs.webkit.org/show_bug.cgi?id=236268

        Reviewed by Yusuke Suzuki.

        Adjust WebAssemblySourceProvider to inherit from a new abstract base
        class that exposes the data as a pointer and size, to allow
        implementations other than a Vector. Also add initialization
        and cleanup methods managed by RAII class.

        * CMakeLists.txt:
        * JavaScriptCore.xcodeproj/project.pbxproj:
        * parser/SourceProvider.cpp:
        (JSC::BaseWebAssemblySourceProvider::BaseWebAssemblySourceProvider):
        * parser/SourceProvider.h:
        (JSC::BaseWebAssemblySourceProvider::lockUnderlyingBuffer):
        (JSC::BaseWebAssemblySourceProvider::unlockUnderlyingBuffer):
        (JSC::WebAssemblySourceProviderBufferGuard::WebAssemblySourceProviderBufferGuard):
        (JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard):
        * runtime/CachedTypes.cpp:
        (JSC::CachedWebAssemblySourceProvider::encode):
        * tools/JSDollarVM.cpp:
        * wasm/js/JSWebAssemblyHelpers.h:
        (JSC::getWasmBufferFromValue):
        (JSC::createSourceBufferFromValue):

2022-02-22  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] ShadowRealm JSRemoteFunction creation should convert CopyNameAndLength errors to TypeError
        https://bugs.webkit.org/show_bug.cgi?id=237007

        Reviewed by Alexey Shvayka.

        1. Rename JSRemoteFunction::create to tryCreate since it can throw an error.
        2. Passing JSGlobalObject* as a first parameter to JSRemoteFunction::tryCreate since it can throw an error.
        3. Extract CopyNameAndLength part and convert errors to TypeError as specified.

        * jit/JITOperations.cpp:
        (JSC::getWrappedValue):
        (JSC::JSC_DEFINE_JIT_OPERATION):
        * runtime/JSRemoteFunction.cpp:
        (JSC::wrapValue):
        (JSC::JSC_DEFINE_HOST_FUNCTION):
        (JSC::JSRemoteFunction::tryCreate):
        (JSC::JSRemoteFunction::copyNameAndLength):
        (JSC::JSRemoteFunction::finishCreation):
        (JSC::JSRemoteFunction::create): Deleted.
        * runtime/JSRemoteFunction.h:

2022-02-22  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] TypeError from JSRemoteFunction should be generated by JSRemoteFunction's JSGlobalObject
        https://bugs.webkit.org/show_bug.cgi?id=237013

        Reviewed by Saam Barati.

        Our unwinding converts any errors inside JSRemoteFunction to TypeError. At that time, we should
        use JSRemoteFunction's JSGlobalObject for this type error.

        * interpreter/Interpreter.cpp:
        (JSC::UnwindFunctor::UnwindFunctor):
        (JSC::UnwindFunctor::operator() const):
        (JSC::sanitizeRemoteFunctionException):
        (JSC::Interpreter::unwind):

2022-02-21  Robin Morisset  <rmorisset@apple.com>

        [JSC] Format the output of --reportTotalPhaseTimes=1 more nicely
        https://bugs.webkit.org/show_bug.cgi?id=237005

        Reviewed by Saam Barati.

        Before this patch:
        [B3] moveConstants total ms: 64.307583 max ms: 1.703167
        [B3] lowerToAir total ms: 151.297782 max ms: 5.426375
        [B3] generateToAir total ms: 1623.987166 max ms: 92.826750
        [B3] simplifyCFG total ms: 11.760463 max ms: 1.088083
        [B3] Air::lowerMacros total ms: 5.975679 max ms: 0.382000

        After this patch:
        total ms:   66.328 max ms:   2.283 [B3] moveConstants
        total ms:  148.097 max ms:   5.361 [B3] lowerToAir
        total ms: 1619.115 max ms:  96.307 [Total B3] generateToAir
        total ms:   11.959 max ms:   1.185 [Air] simplifyCFG
        total ms:    6.519 max ms:   0.697 [Air] Air::lowerMacros

        Concretely there are two changes:
        - use FixedWidthDouble (also introduced to WTF in this patch) to line-up the total times.
          This makes it possible to see at a glance which phases are worth optimizing and which aren't.
        - Tag phases more precisely, and in particular replace [B3] by [Air] where relevant,
          and give different tags to measurements that correspond to groups of phases instead of a single phase (e.g. generateToAir).

        * JavaScriptCore.xcodeproj/project.pbxproj:
        * b3/B3Compile.cpp:
        (JSC::B3::compile):
        * b3/B3FixSSA.cpp:
        * b3/B3Generate.cpp:
        (JSC::B3::prepareForGeneration):
        (JSC::B3::generateToAir):
        * b3/B3PhaseScope.cpp:
        (JSC::B3::PhaseScope::PhaseScope):
        * b3/B3PhaseScope.h:
        * b3/B3TimingScope.h: Removed.
        (JSC::B3::TimingScope::TimingScope): Deleted.
        * b3/B3VariableLiveness.cpp:
        (JSC::B3::VariableLiveness::VariableLiveness):
        * b3/air/AirAllocateRegistersAndStackAndGenerateCode.cpp:
        (JSC::B3::Air::GenerateAndAllocateRegisters::generate):
        * b3/air/AirAllocateRegistersAndStackByLinearScan.cpp:
        * b3/air/AirGenerate.cpp:
        (JSC::B3::Air::prepareForGeneration):
        (JSC::B3::Air::generateWithAlreadyAllocatedRegisters):
        * b3/air/AirLiveness.h:
        (JSC::B3::Air::Liveness::Liveness):
        * b3/air/AirPhaseScope.cpp:
        (JSC::B3::Air::PhaseScope::PhaseScope):
        * b3/air/AirPhaseScope.h:
        * tools/CompilerTimingScope.cpp:

2022-02-21  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Fix ShadowRealm unwinding
        https://bugs.webkit.org/show_bug.cgi?id=237001

        Reviewed by Saam Barati.

        This patch fixes a crash bug found by test262. Regardless of it is RemoteFunction,
        we should handle it as the same way to the other normal host functions except
        for setting m_seenRemoteFunction = true flag. Previously, we are early returning,
        this is wrong since we should stop unwinding if the caller is entry frame.

        * interpreter/Interpreter.cpp:
        (JSC::UnwindFunctor::operator() const):

2022-02-21  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Temporal.PlainDate should validate input range
        https://bugs.webkit.org/show_bug.cgi?id=236936

        Reviewed by Darin Adler.

        Implement https://tc39.es/proposal-temporal/#sec-temporal-isodatetimewithinlimits check in
        PlainDate to validate input range. For example, 0x7fffffff year should be rejected since
        it is larger than ECMAScript datetime representation value. This is checked via ISODateTimeWithinLimits
        in the spec.

        We also remove isValid assertions in ExactTime. This should not be checked in these accessors, rather,
        we should call that function when we would like to check, since PlainDate can represent a bit smaller
        value than ExactTime's minValue (minValue - nsPerDay).

        We also extend ExactTime::fromISOPartsAndOffset to handle values via Int128 to accept int32_t range years.
        By using Int128 for nanoseconds, we can even represent int32_t max / min years. And we remove
        `ASSERT(y >= -999999 && y <= 999999)` check since this is not necessary.

        * runtime/ISO8601.cpp:
        (JSC::ISO8601::ExactTime::fromISOPartsAndOffset):
        (JSC::ISO8601::isDateTimeWithinLimits):
        * runtime/ISO8601.h:
        (JSC::ISO8601::ExactTime::ExactTime): Deleted.
        (JSC::ISO8601::ExactTime::fromEpochSeconds): Deleted.
        (JSC::ISO8601::ExactTime::fromEpochMilliseconds): Deleted.
        (JSC::ISO8601::ExactTime::fromEpochMicroseconds): Deleted.
        (JSC::ISO8601::ExactTime::epochSeconds const): Deleted.
        (JSC::ISO8601::ExactTime::epochMilliseconds const): Deleted.
        (JSC::ISO8601::ExactTime::epochMicroseconds const): Deleted.
        (JSC::ISO8601::ExactTime::epochNanoseconds const): Deleted.
        (JSC::ISO8601::ExactTime::nanosecondsFraction const): Deleted.
        (JSC::ISO8601::ExactTime::asString const): Deleted.
        (JSC::ISO8601::ExactTime::isValid const): Deleted.
        (JSC::ISO8601::ExactTime::operator< const): Deleted.
        (JSC::ISO8601::ExactTime::operator<= const): Deleted.
        (JSC::ISO8601::ExactTime::operator== const): Deleted.
        (JSC::ISO8601::ExactTime::operator!= const): Deleted.
        (JSC::ISO8601::ExactTime::operator>= const): Deleted.
        (JSC::ISO8601::ExactTime::operator> const): Deleted.
        * runtime/TemporalPlainDate.cpp:
        (JSC::toPlainDate):

== Rolled over to ChangeLog-2022-02-22 ==
